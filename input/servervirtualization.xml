<?xml version="1.0" encoding="utf-8"?>
<?xsml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
<!--
<?xml-model href="https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/schema.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
-->
<!--<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
-->
<?xml-model href="https://github.com/commoncriteria/transforms/raw/master/schemas/CCProtectionProfile.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
<PP xmlns="http://common-criteria.rhcloud.com/ns/cc" name="Server Virtulaization"
  xmlns:htm="http://www.w3.org/1999/xhtml">
<?xml-model href="../schema%20os.rng" type="application/xml" schematypens="http://relaxng.org/ns/structure/1.0"?>
  
  <!-- Kevin's murderous schema -->
  <!-- https://raw.githubusercontent.com/commoncriteria/transforms/master/schemas/schema.rng-->
<!--

<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?> -->


<!--
<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/xsl" href="../transforms/pp2html.xsl"?>
-->
<!--
<PP xmlns="http://common-criteria.rhcloud.com/ns/cc" name="Server Virtualization"
    xmlns:htm="http://www.w3.org/1999/xhtml"> -->
  
  <!-- <inline-comment color='green'> Hello World QQQQ </inline-comment> -->
  <!-- <inline-comment color='blue' linebreak='yes'> Hello World QQQQ </inline-comment> -->
 
  <PPReference title="PP Reference" id="XXXXX">
    <ReferenceTable>
      <PPTitle>Protection Profile for Server Virtualization</PPTitle>
      <PPVersion>1.1</PPVersion>
      <PPAuthor>National Information Assurance Partnership</PPAuthor>
      <PPPubDate>2015-09-14</PPPubDate>
      <PPCertificationID>unassigned</PPCertificationID>
      <CCVersion>3.1R4</CCVersion>
      <Keywords>virtualization; hypervisor; VMM</Keywords>
      <entry>
        <name>Registration</name>
        <description>National Information Assurance Partnership</description>
      </entry>
    </ReferenceTable>
  </PPReference>

  <RevisionHistory role="draft">
    <entry>
      <version>1.0</version>
      <date>2014-10-03</date>
      <subject>Initial Release</subject>
    </entry>
    <entry>
      <version>1.1</version>
      <date>2015-09-14</date>
      <subject>Added optional requirements; modified key destruction SFR, FCS_COP.1, FPT_HCL_EXT.1, FPT_VDP_EXT.1, FCS_IPSEC_EXT.1; added clarifying application notes to FAU_GEN.1; 
        and corrected errors in v1.0.</subject>
    </entry>
  </RevisionHistory>

  <RevisionHistory role="final">
    <entry>
      <version>1.1</version>
      <date>2015-09-14</date>
      <subject>Latest Release</subject>
    </entry>
  </RevisionHistory>

  <chapter title="PP Introduction" id="int">
    
    <section title="PP Reference Identification" id="ppref"> 
      PP Reference: Protection Profile for Server Virtualization<htm:br></htm:br>
      PP Version: 1.1<htm:br></htm:br>
      PP Date: 14 September 2015<htm:br></htm:br>
      This Protection Profile (PP) describes the security requirements for Server Virtualization and provides a minimal baseline set of requirements targeted at mitigating well-defined threats.<htm:br></htm:br>
	     This PP is based on requirements identified in the Distributed Management Task Force (DMTF) white paper dated September 5, 2012. The DMTF document defines design goals and requirements for the secure implementation of server virtualization solutions. This protection profile has distilled over 100 requirements from the DMTF paper down to a core of approximately 50 requirements considered by the authors to be fundamental to the security of Virtualization Systems.
    </section>
    <section title="Terms" id="glossary"> The following sections provide both Common Criteria and
      technology terms used in this Protection Profile.
      <subsection title="Common Criteria Terms" id="ccterms">
        <glossary>
          <entry>
            <term><abbr title="Common Criteria">CC</abbr></term>
            <description>Common Criteria for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Common Evaluation Methodology">CEM</abbr></term>
            <description>Common Evaluation Methodology for Information Technology Security
              Evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="Protection Profile">PP</abbr></term>
            <description>An implementation-independent set of security requirements for a category
              of products.</description>
          </entry>
          <entry>
            <term><abbr title="Security Target">ST</abbr></term>
            <description>A set of implementation-dependent security requirements for a specific
              product.</description>
          </entry>
          <entry>
            <term><abbr title="Target of Evaluation">TOE</abbr></term>
            <description>
              The product under evaluation. In this case, the Operating System as described in section 
              <xref linkend="TOEboundary"/> and its
              supporting documentation.
            </description>
          </entry>
          <entry>
            <term><abbr title="TOE Security Functionality">TSF</abbr></term>
            <description>The security functionality of the product under evaluation.</description>
          </entry>
          <entry>
            <term><abbr title="TOE Summary Specification">TSS</abbr></term>
            <description>A description of how a <abbr linkend="TOE"/> satisfies the SFRs in a <abbr
              linkend="ST"/>. </description>
          </entry>
          <entry>
            <term><abbr title="Security Functional Requirement">SFR</abbr></term>
            <description>A requirement for security enforcement by the <abbr linkend="TOE"/>.
            </description>
          </entry>
          <entry>
            <term><abbr title="Security Assurance Requirement">SAR</abbr></term>
            <description>A requirement to assure the security of the <abbr linkend="TOE"/>.
            </description>
          </entry>
        </glossary>
      </subsection>
      <subsection title="Technology Terms" id="techterms">
        <glossary>
          <entry>
            <term>Administrator/Virtualization System Administrator</term>
	    <description> See <htm:b>User</htm:b>
            </description>
	  </entry>
	  <entry>
            <term>Auditor</term>
	    <description> See <htm:b>User</htm:b>
            </description>
	  </entry>
          <entry>
            <term>Domain/Information Domain</term>
            <description>A Domain or Information Domain is a policy construct that groups
		together execution environments and networks by sensitivity of information and access control policy.
		For example, classification levels represent information domains. Within classification levels, there
		might be other domains representing communities of interest or coalitions. In the context of a VS,
		information domains are generally implemented as collections of VMs connected by virtual networks.
		The Virtualization System itself can be considered an Information Domain, as can its Management
		Subsystem.
	    </description>
          </entry>
          <entry>
            <term><abbr title="Guest Operating System">Guest OS</abbr></term>
            <description>
              An operating system that runs within a Guest or Helper VM.
            </description>      
          </entry>
  	  <entry>
            <term>Guest Network</term>
	    <description> See <htm:b>Operational Network</htm:b>
            </description>
	  </entry>
	  <entry>
            <term>Guest VM</term>
            <description>A Guest VM is a VM that contains a virtual environment for the execution of an independent
		computing system. Virtual environments execute mission workloads and implement customer-specific
		client or server functionality in Guest VMs, such as a web server or desktop productivity applications.
	    </description>
      	  </entry>
	  <entry>
            <term>Helper VM</term>
            <description>A Helper VM is a VM that performs services on behalf of one or more Guest VMs, but does
		not qualify as a Service VM—and therefore is not part of the VMM. Helper VMs implement functions or
		services that are particular to the workloads of Guest VMs. For example, a VM that provides a virus
		scanning service for a Guest VM would be considered a Helper VM.
	    </description>
	  </entry>
      	  <entry>
      	    <term><abbr title="Host Operating System">Host OS</abbr></term>
      	    <description>An operating system onto which a Virtualization System is installed.
		Relative to the VS, the Host OS is part of the Platform.
      	    </description>
      	  </entry>
          <entry>
            <term>Hypervisor</term>
            <description>The Hypervisor is part of the VMM. It is the software executive of the physical platform of a
		Virtualization System. A Hypervisor’s primary function is to mediate access to all CPU and memory
		resources, but it is also responsible for either the direct management or the delegation of the
		management of all other hardware devices on the hardware platform.
	    </description>
          </entry>
          <entry>
            <term>Hypercall</term>
            <description>An API function that allows VM-aware software running within a VM to invoke Hypervisor or
		VMM functionality.
	    </description>
          </entry>
          <entry>
            <term>Introspection</term>
            <description> A capability that allows a specially designated and privileged domain to have visibility into
		another domain for purposes of anomaly detection or monitoring.
	    </description>
          </entry>
          <entry>
            <term>Management Network</term>
	    <description>A network, which may have both physical and virtualized components, used to
		manage and administer a VS. Management networks include networks used by VS Administrators to
		communicate with management components of the VS, and networks used by the VS for
		communications between VS components. For purposes of this document, networks that connect
		physical hosts for purposes of VM transfer or coordinate, and backend storage networks are considered
		management networks.
            </description>
          </entry>
          <entry>
            <term>Management Subsystem</term>
	    <description>Components of the VS that allow VS Administrators to configure and manage
		the VMM, as well as configure Guest or Helper VMs. VMM management functions include VM
		configuration, virtualized network configuration, and allocation of physical resources.
            </description>
          </entry>
          <entry>
            <term>Operational Network</term>
	    <description>An Operational Network is a network, which may have both physical and
		virtualized components, used to connect Guest and Helper VMs to each other and potentially to other
		entities outside of the VS. Operational Networks support mission workloads and customer-specific client
		or server functionality. Also called a “Guest Network.”
            </description>
          </entry>
          <entry>
            <term>Physical Platform</term>
	    <description>The hardware environment on which a VS executes. Physical platform resources
		include processors, memory, devices, and associated firmware.
            </description>
          </entry>
          <entry>
            <term>Platform</term>
	    <description>The hardware, firmware, and software environment into which a VS is installed and executes.
            </description>
          </entry>
          <entry>
            <term>Service VM</term>
	    <description>A Service VM is a VM whose purpose is to support the Hypervisor in providing the resources
		or services necessary to support Guest and Helper VMs (defined above). Service VMs may implement
		some portion of Hypervisor functionality, but also may contain important system functionality that is
		not necessary for Hypervisor operation. As with any VM, Service VMs necessarily execute without full
		Hypervisor privileges—only the privileges required to perform its designed functionality. Examples of
		Service VMs include device driver VMs that manage access to a physical devices, and name-service VMs
		that help establish communication paths between VMs.
            </description>
          </entry>
      	  <entry>
      	    <term><abbr title="System Security Policy">SSP</abbr></term>
      	    <description>The overall policy enforced by the Virtualization System defining
		constraints on the behavior of VMs and users.
      	    </description>
      	  </entry>
          <entry>
            <term>User</term>
	    <description>For purposes of this document, there are three user roles in Virtualization Systems defined by
		their privileges:<htm:br></htm:br>
	      <ul>
		<li><htm:b>Unprivileged Users.</htm:b> Generally referred to as “Users.” Users operate Guest VMs. For
		some VS instantiations, Users may function only within Guest VMs (e.g. remote thin
		client environments). For other instantiations, policy may permit Users to, for example,
		start and stop Guest VMs, connect and disconnect Guest VMs to physical devices, and
		log in to multiple Guests at the same time. Users are not permitted to configure VMs,
		virtual networking, or policy.</li>
	        <li><htm:b>VS Administrators.</htm:b> Generally referred to as “Administrators.” Administrators perform
		management functions on the VS, including creation and configuration of Guest VMs,
		assignment of Users to VMs, definition of Domains, creation and management of
		virtualized network infrastructure, and maintenance of the VS. VS Administration does
		not include administration of software running within Guest VMs, such as the Guest OS.</li>
	        <li><htm:b>Auditors.</htm:b> An Auditor is responsible for managing the audit capabilities of the TOE. An
		Auditor may also be an Administrator. It is not a threshold requirement that the TOE be
		capable of supporting an Auditor role that is separate from that of an Administrator.</li>
	      </ul>
            </description>
          </entry>
      	  <entry>
      	    <term><abbr title="Virtual Machine">VM</abbr></term>
      	    <description>A Virtual Machine is a virtualized hardware environment in which an operating
		system may execute.
      	    </description>
      	  </entry>
      	  <entry>
      	    <term><abbr title="Virtual Machine Manager">VMM</abbr></term>
      	    <description>A VMM is a collection of software components responsible for
		enabling VMs to function as expected by the software executing within them. Generally, the VMM
		consists of a Hypervisor, Service VMs, and other components of the VS, such as virtual devices, binary
		translation systems, and physical device drivers. It manages concurrent execution of all VMs and
		virtualizes platform resources as needed.
      	    </description>
      	  </entry>
	  <entry>
	    <term><abbr title="Virtualization System">VS</abbr></term>
      	    <description>A software product that enables multiple independent computing systems
		to execute on the same physical hardware platform without interference from one other. For purposes
		of this document, the VS consists of a Virtual Machine Manager (VMM), Virtual Machine (VM)
		abstractions, a management subsystem, and other components.
      	    </description>
      	  </entry>
        </glossary>
      </subsection>
	  </section>
    
<section title="Compliant Targets of Evaluation" id="TOEdescription">
      <subsection title="Components of a Virtualization System" id="TOEboundary">
	Server Virtualization in the context of this PP relates to a virtualization system that implements virtualized
		hardware components on server-class hardware. It creates a virtualized hardware environment for each
		instance of an operating system (virtual machines or VMs) permitting these environments to execute
		concurrently while maintaining the appearance of isolation and exclusive control over assigned computing
		resources. Each VM instance supports applications such as file servers, web servers, and mail servers.
		Server virtualization may also support client operating systems in a virtual desktop or thin-client
		environment.<htm:br></htm:br>
		A Virtualization System (VS) is a software product that enables multiple independent computing systems
		to execute on the same physical hardware platform without interference from one other. For purposes of
		this document, the VS consist of a Virtual Machine Manager (VMM), Virtual Machine (VM) abstractions,
		and other components.<htm:br></htm:br>
		A VMM is a collection of software components responsible for enabling VMs to function as expected by
		the software executing within them. Generally, the VMM consists of a Hypervisor, Service VMs, and other
		components of the VS, such as virtual devices, binary translation systems, and physical device drivers. It
		manages concurrent execution of all VMs and virtualizes platform resources as needed.<htm:br></htm:br>
		The Hypervisor is the software executive of the physical platform of a Virtualization System. A hypervisor
		operates at the highest CPU privilege level and manages access to all of the physical resources of the
		hardware platform. It exports a well-defined, protected interface for access to the resources it manages.
		A Hypervisor’s primary function is to mediate access to all CPU and memory resources, but it is also
		responsible for either the direct management or the delegation of the management of all other hardware
		devices on the hardware platform. This document does not specify any Hypervisor-specific requirements,
		though many VMM requirements would naturally apply to a Hypervisor.<htm:br></htm:br>
		A Service VM is a VM whose purpose is to support the Hypervisor in providing the resources or services
		necessary to support Guest and Helper VMs (defined below). Service VMs may implement some portion
		of Hypervisor functionality, but also may contain important system functionality that is not necessary for
		Hypervisor operation. As with any VM, Service VMs necessarily execute without full Hypervisor
		privileges—only the privileges required to perform its designed functionality. Examples of Service VMs
		include device driver VMs that manage access to a physical devices, and name-service VMs that help
		establish communication paths between VMs.<htm:br></htm:br>
		A Guest VM is a VM that contains a virtual environment for the execution of an independent computing
		system. Virtual environments execute mission workloads and implement customer-specific client or
		server functionality in Guest VMs, such as a web server or desktop productivity applications. A Helper VM
		is a VM that performs services on behalf of one or more Guest VMs, but does not qualify as a Service
		VM—and therefore is not part of the VMM. Helper VMs implement functions or services that are
		particular to the workloads of Guest VMs. For example, a VM that provides a virus scanning service for a
		Guest VM would be considered a Helper VM. The line between Helper and Service VMs can easily be
		blurred. For instance, a VM that implements a cryptographic function—such as an in-line encryption VM—
		could be identified as either a Service or Helper VM depending on the particular virtualization solution. If
		the cryptographic functions are necessary only for the privacy of Guest VM data in support of the Guest’s
		mission applications, it would be proper to classify the encryption VM as a Helper. But if the encryption
		VM is necessary for the VMM to isolate Guest VMs, it would be proper to classify the encryption VM as a
		Service VM. For purposes of this document, Helper VMs are subject to all requirements that apply to
		Guest VMs, unless specifically stated otherwise.
      </subsection>
      <subsection title="TOE Definition" id="TOEdef">
	Figure 1 shows a greatly simplified view of a generic Virtualization System and Platform. TOE
	components are displayed in Red. Non-TOE components are in Blue. The Platform is the hardware,
	firmware, and software onto which the VS is installed. The VMM includes the Hypervisor, Service VMs,
	and VM containers, but not the software that runs inside Guest VMs. The Management Subsystem is
	part of the TOE, but is not part of the VMM.
	<figure entity="images/Toe.png" title="Figure 1: General TOE " id="toe"/>
	For purposes of this Protection Profile, the Virtualization System is the TOE, subject to some caveats. The
	Platform onto which the VS is installed is not part of the TOE, to include hardware, platform firmware,
	and Host Operating System. Software installed with the VS on the Host OS specifically to support the VS
	or implement VS functionality is part of the TOE. General purpose software—such as device drivers for
	physical devices and the Host OS itself—is not part of the TOE, regardless of whether it supports VS
	functionality or runs inside a Service VM or control domain. Software that runs within Guest and Helper
	VMs is not part of the TOE.<htm:br></htm:br>
	In general, for Server Virtualization products that are installed onto “bare metal,” the entire set of installed
	components constitute the TOE, and the hardware constitute the Platform. Also in general, for products
	that are hosted by or integrated into a commodity operating system, the components installed expressly
	for implementing and supporting virtualization are in the TOE, and the Platform comprises the hardware
	and Host OS.
      </subsection>
      <subsection title="Requirements Met by the Platform" id="RequirementsMetByPlatform">
	Depending on the way the VS is installed, functions tested under this PP may be implemented by the TOE
	or by the Platform. There is no difference in the testing required whether the function is implemented by
	the TOE or by the Platform. In either case, the tests determine whether the function being tested provides
	a level of assurance acceptable to meet the goals of this Profile with respect to a particular product and
	platform. The equivalency guidelines are intended in part to address this TOE vs. Platform distinction, and
	to ensure that the assurance level does not change between instances of equivalent products on equivalent platforms. 
	And also, of course, to ensure that the appropriate testing is done when the distinction is significant.
      </subsection>
      <subsection title="Scope of Certification" id="ScopeOfCertification">
	Successful evaluation of a Virtualization System against this profile does not constitute or imply successful
	evaluation of any Host Operating System or Platform—no matter how tightly integrated with the VS. The
	Platform—including any Host OS—supports the VS through provision of services and resources.
	Specialized VS components installed on or in a Host OS to support the VS may be considered part of the
	TOE. But general-purpose OS components and functions—whether or not they support the VS—are not
	part of the TOE, and thus are not evaluated under this PP.
      </subsection>
      <subsection title="Vendor Attestation" id="VendorAttestation">
	This PP includes four SFRs that include elements that are met via vendor attestation. Attestation
	assurance activities are reserved for SFRs that define a property that is critical to the system’s security
	functionality, but that is impossible or impractical to test in a repeatable and consistent manner. These
	Attestation assurance activities require the vendor to make an assertion in the ST that their product meets
	the specified SFR—no further testing or assessment of the product regarding these SFRs or elements is
	performed by the CCTL. The CCTL will simply verify that the ST includes a pre-determined Attestation
	statement. By including this statement in the ST, the vendor is accepting responsibility for the assurance
	of their product in these particular areas. If at any time evidence is produced that indicates that these
	statements are false (and the product does not meet the specified security functionality), the CC
	certificate may be revoked. See FDP_VMS_EXT.1, FDP_VNC_EXT.1, FPT_VDP_EXT.1, and FPT_VIV_EXT.1 for the associated
	Attestation statements.
      </subsection>
      <subsection title="Product and Platform Equivalence" id="ProductPlatformEquivalence">
	The tests in this Protection Profile must be run on all product versions and Platforms with which the
	Vendor would like to claim compliance—subject to the this Profile’s equivalency guidelines [to be
	published].
      </subsection>
    </section>
  </chapter>
  <chapter title="CC Conformance" id="ccl">
    <cclaims>
      <cclaim id="Conformance Statement">
        <description> As defined by the references [CC1], [CC2] and [CC3], this PP:<htm:br></htm:br>
          <htm:ul>
            <htm:li>conforms to the requirements of Common Criteria v3.1, Revision 4</htm:li>
            <htm:li>is Part 2 extended, Part 3 conformant</htm:li>
            <htm:li>does not claim conformance to any other PP.</htm:li>
          </htm:ul>
		In order to be conformant to this PP, a TOE must demonstrate Exact Compliance. Exact Compliance, as a
		subset of Strict Compliance as defined by the CC, is defined as the ST containing all of the requirements
		in section 5 of the this PP, and potentially requirements from Annex B, C, and D of this PP. While
		iteration is allowed, no additional requirements (from the CC parts 2 or 3) are allowed to be included in
		the ST. Further, no requirements in section 5 of this PP are allowed to be omitted.
        </description>
      </cclaim>
    </cclaims>
  </chapter>
  <chapter title="Security Problem Description" id="spd">The security problem to be addressed by compliant TOEs 
	is described by threats and policies that are common to a Server Virtualization System in general, rather than 
	those that might be targeted at a specific Virtualization System function or at a specific type of Virtualization 
	System. Annex A presents the Security Problem Description (SPD) in a more “traditional” form. The following 
	sections detail the problems that compliant TOEs will address; references to the “traditional” statements in Annex A 
	are included.<htm:br></htm:br>
	Assumptions are described in Table 4 (Annex A).
    <section title="Threats" id="threats">
      <threats>
        <threat id="T.DATA_LEAKAGE">
          <description> <htm:b>Cross-Domain Data Leakage</htm:b><htm:br></htm:br>
		It is a fundamental property of VMs that the domains encapsulated by different VMs remain separate
		unless data sharing is permitted by policy. For this reason, all Virtualization Systems shall support a policy
		that prohibits information transfer between VMs.<htm:br></htm:br>
		It shall be possible to configure VMs such that data cannot be moved between domains from VM to VM,
		or through virtual or physical network components under the control of the VS. When VMs are configured
		as such, it shall not be possible for data to leak between domains, neither by the express efforts of
		software or users of a VM, nor because of vulnerabilities or errors in the implementation of the VMM or
		other VS components.<htm:br></htm:br>
		If it is possible for data to leak between domains when prohibited by policy, then an adversary on one
		domain or network can obtain data from another domain. Such cross-domain data leakage can, for
		example, cause classified information, corporate proprietary information, or medical data to be made
		accessible to unauthorized entities.</description>
          <objective-refer ref="O.VM_ISOLATION">
            <rationale></rationale>
          </objective-refer>
          <objective-refer ref="O.DOMAIN_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_UPDATE">
          <description> <htm:b>Unauthorized Update</htm:b><htm:br></htm:br>
            It is common for attackers to target unpatched versions of software containing known flaws. 
            This means it is extremely important to update Virtualization System software as soon as possible when 
            updates are available. But the source of the updates and the updates themselves must be trusted. If 
            an attacker can write their own update containing malicious code they can take control of the VS.<htm:br></htm:br>
            Methods of countering this threat typically involve digitally signing updates and verifying the signature 
            before installation of the update, or computing a hash on updates and verifying the result against a value 
            provided by the vendor.
          </description>
          <objective-refer ref="O.VMM_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_MODIFICATON">
          <description> <htm:b>Unauthorized Modification</htm:b><htm:br></htm:br>
            System integrity is a core security objective for Virtualization Systems. To achieve system 
            integrity the integrity of each VMM component must be established and maintained. Malware running on 
            the platform must not be able to undetectably modify Virtualization System components while the system 
            is running or at rest. Likewise, malicious code running within a virtual machine must not be able to 
            modify Virtualization System components. Integrity measurements and secure launch of the Virtualization 
            System are ways of ensuring integrity.</description>
          <objective-refer ref="O.VMM_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
          <objective-refer ref="O.AUDIT">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.USER_ERROR">
          <description> <htm:b>User Error</htm:b><htm:br></htm:br>
            If a Virtualization System is capable of simultaneously displaying VMs of different domains 
            to the same user at the same time, there is always the chance that the user will become confused and 
            unintentionally leak information between domains. This is especially likely if VMs belonging to 
            different domains are indistinguishable. The VS must take measures to minimize the likelihood of such 
            confusion.</description>
          <objective-refer ref="O.VM_ISOLATION">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.3P_SOFTWARE">
          <description> <htm:b>Vulnerability in Third-Party Software</htm:b><htm:br></htm:br>
            In some VS implementations, critical functions are by necessity performed by software not 
            produced by the Virtualization Vendor. Such software includes Host Operating Systems and physical 
            device drivers. Vulnerabilities in this software can be exploited by an adversary and result in VMM 
            compromise. Where possible, the VS should mitigate the results of potential vulnerabilities or malicious 
            content in third-party code.
          </description>
          <objective-refer ref="O.VMM_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.VMM_COMPROMISE">
          <description> <htm:b>VMM_Compromise</htm:b><htm:br></htm:br>
            The Virtualization System is designed to provide the appearance of exclusivity to the VMs 
            and is designed to separate or isolate their functions except where specifically shared. Failure of 
            security mechanisms could lead to unauthorized intrusion into or modification of the VMM, or bypass of 
            the VMM altogether. This must be prevented to avoid compromising the Virtualization System.
          </description>
          <objective-refer ref="O.VMM_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
          <objective-refer ref="O.VM_ISOLATION">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.PLATFORM_COMPROMISE">
          <description> <htm:b>Platform Compromise</htm:b><htm:br></htm:br>
            The VS must be capable of protecting the platform from threats that originate within VMs 
            and operational networks connected to the VS. The hosting of untrusted—even malicious—domains by the 
            VS cannot be permitted to compromise the security and integrity of the platform on which the VS executes. 
            If an attacker can access the underlying platform in a manner not controlled by the VMM, the attacker 
            might be able to modify system firmware or software—compromising both the Virtualization System and the 
            underlying platform.
          </description>
          <objective-refer ref="O.PLATFORM_INTEGRITY">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNAUTHORIZED_ACCESS">
          <description> <htm:b>Unauthorized Access to Management Functions</htm:b><htm:br></htm:br>
            Server Virtualization Systems generally include a comprehensive management infrastructure. 
            Functions performed by the management layer include VM configuration, virtualized network configuration, 
            allocation of physical resources, and reporting. Only certain authorized system users (administrators) 
            are allowed to exercise management functions.<htm:br></htm:br>
            Virtualization System servers communicate with other servers and clients, as well as administrators, 
            over communication networks. The endpoints can be both geographically and logically separated from the 
            server, and pass through a variety of other systems which may be under the control of an adversary, and 
            offer the opportunity for communications with the server to be compromised. An adversary with access to 
            an open management network could inject commands into the management infrastructure. This would
            provide an adversary with administrator privilege on the server platform, and administrative control over 
            the VMs and virtual network connections. The adversary could also gain access to the management network by 
            hijacking the management network channel.
          </description>
          <objective-refer ref="O.MANAGEMENT_ACCESS">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.WEAK_CRYPTO">
          <description> <htm:b>Weak Cryptography Due to Insufficient Entropy</htm:b><htm:br></htm:br>
            To the extent that VMs appear isolated within the Virtualization System, a threat of weak 
            cryptography may arise if the VMM does not provide sufficient entropy to support security-related features 
            that depend on entropy to implement cryptographic algorithms. For example, a random number generator keeps 
            an estimate of the number of bits of noise in the entropy pool. From this entropy pool random numbers are 
            created. Good random numbers are essential to implementing strong cryptography. Cryptography implemented 
            using poor random numbers can be defeated by a sophisticated adversary.
          </description>
          <objective-refer ref="O.VM_ENTROPY">
            <rationale></rationale>
          </objective-refer>
        </threat>
        <threat id="T.UNMANAGEABLE_NW">
          <description> <htm:b>Unmanageable Enterprise Network</htm:b><htm:br></htm:br>
            Virtualization Systems can host VMs that are part of one or more larger physical networks. 
            The Virtualization System itself is infrastructure network entity and must be managed as such. Unmanageable 
            networks make it difficult to keep software and firmware of servers, clients, and network devices updated 
            and patched. Known vulnerabilities in unpatched software often can easily be exploited by adversaries to 
            compromise the Virtualization System or platform.
          </description>
          <objective-refer ref="O.MANAGEABLE_NETWORK">
            <rationale></rationale>
          </objective-refer>
        </threat>
      </threats>
    </section>
    <section title="Assumptions" id="assumptions">
      The specific conditions listed in the following subsections are assumed to exist in the TOE’s Operational Environment. 
      These assumptions include both practical realities in the development of the TOE security requirements and the essential 
      environmental conditions on the use of the TOE.<htm:br></htm:br>
      ST authors should ensure that the assumptions still hold for their particular technology; the table should be modified as appropriate.
      <assumptions>
        <assumption id="A.PLATFORM_INTEGRITY">
          <description> The platform has not been compromised prior to installation of the Virtualization System.
          </description>
          <objective-refer ref="OE.PLATFORM_INTEGRITY">
            <rationale> The operational environment objective OE.PLATFORM_INTEGRITY is realized through
              A.PLATFORM_INTEGRITY. </rationale>
          </objective-refer>
        </assumption>
        <assumption id="A.PHYSICAL">
          <description> Physical security commensurate with the value of the TOE and the data it contains is assumed to be provided by the environment.
          </description>
          <objective-refer ref="OE.PHYSICAL">
            <rationale>The operational environment objective OE.PHYSICAL is realized through
              A.PROPER_USER.</rationale>
          </objective-refer>
        </assumption>
        <assumption id="A.TRUSTED_ADMIN">
          <description> TOE Administrators are trusted to follow and apply all administrator guidance.
          </description>
          <objective-refer ref="OE.TRUSTED_ADMIN">
            <rationale>The operational environment objective OE.TRUSTED_ADMIN is realized through
              A.TRUSTED_ADMIN.</rationale>
          </objective-refer>
        </assumption>
      </assumptions>
    </section>
<!--    <section title="Organizational Security Policies" id="OSPs">
      <OSPs>
        <OSP id="P.ENTERPRISE">
          <description>If the OS is bound to a directory or management server, the configuration of
            the OS software must be capable of adhering to the enterprise security policies
            distributed by them.</description>
          <objective-refer ref="O.MANAGEMENT">
            <rationale>The organizational security policy P.ENTERPRISE is enforced through the
              objective O.MANAGEMENT as this objective represents how the enterprise and user assert
              management over the <abbr linkend="OS"/>.</rationale>
          </objective-refer>
        </OSP>
      </OSPs>
    </section> -->
  </chapter>
  <chapter title="Security Objectives" id="obj">
    <section title="Security Objectives for the TOE" id="SecurityObjectivesTOE">
      Compliant TOEs provide security functionality to address threats and to implement policies that are 
      imposed by law or regulation. The following sections provide a description of this functionality.
      <SOs>
        <SO id="O.VM_ISOLATION">
          <description> <htm:b>VM Isolation</htm:b><htm:br></htm:br>
            VMs are the fundamental subject of the system. The VMM is responsible for applying 
            the system security policy (SSP) to the VM and all resources. As basic functionality, the VMM 
            must support a security policy that mandates no information transfer between VMs.<htm:br></htm:br>
            The VMM must support the necessary mechanisms to isolate the resources of all VMs. The VMM partitions 
            a platform's physical resources for use by the supported virtual environments. Depending on the use 
            case, a VM may require a completely isolated environment with exclusive access to system resources, 
            or share some of its resources with other VMs. It must be possible to enforce a security policy that 
            prohibits the transfer of data between VMs through shared devices. When the platform security policy 
            allows the sharing of resources across VM boundaries, the VMM must ensure that all access to those 
            resources is consistent with the policy. The VMM may delegate the responsibility for the mediation of 
            sharing of particular resources to select Service VMs; however in doing so, it remains responsible for 
            mediating access to the Service VMs, and each service VM must mediate all access to any shared resource 
            that has been delegated to it in accordance with the SSP.<htm:br></htm:br>
            Devices, whether virtual or physical, are resources requiring access control. The VMM must enforce access 
            control in accordance to system security policy. Physical devices are platform devices with access mediated 
            via the VMM per the non-bypassability objective. Virtual devices may include virtual storage devices and 
            virtual network devices. Some of the access control restrictions must be enforced internal to Service VMs, 
            as may be the case for isolating virtual networks. VMMs may also expose purely virtual interfaces. These are 
            VMM specific, and while they are not analogous to a physical device, they are also subject to access control.<htm:br></htm:br>
            The VMM must support the mechanisms to isolate all resources associated with virtual networks and to limit a 
            VM's access to only those virtual networks for which it has been configured. The VMM must also support the 
            mechanisms to control the configurations of virtual networks according to the SSP.</description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.VMM_INTEGRITY">
          <description> <htm:b>VMM Integrity</htm:b><htm:br></htm:br>
            Integrity is a core security objective for Virtualization Systems. To achieve system integrity the integrity of 
            each VMM component must be established and maintained. This objective concerns only the integrity of the 
            Virtualization System—not the integrity of software running inside of VMs or of the physical platform. The overall 
            objective is to ensure the integrity of critical components of a Virtualization System.<htm:br></htm:br>
            Initial integrity of a VS is established through a digitally signed installation or update package, or through 
            integrity measurements made at launch. Integrity is maintained in a running system by careful protection of the VMM 
            from untrusted users and software. For example, it must not be possible for software running within a Guest VM to 
            exploit a vulnerability in a device or hypercall interface and gain control of the VMM. The vendor must release 
            patches for vulnerabilities as soon as practicable after discovery.
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.PLATFORM_INTEGRITY">
          <description> <htm:b>Maintain Platform Integrity</htm:b><htm:br></htm:br>
            The integrity of the VMM depends on the integrity of the hardware and software on which the VMM relies. 
            Although the VS does not have complete control over the integrity of the platform, the VS must ensure that no VS-hosted 
            software or VS users are capable of undermining the integrity of the platform. 
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.DOMAIN_INTEGRITY">
          <description> <htm:b>Maintain Domain Integrity</htm:b><htm:br></htm:br>
            While the VS is not responsible for the contents or correct functioning of software that runs within Guest 
            VMs, it is responsible for ensuring that such software is not interfered with by VMs from other domains.
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.MANAGEMENT_ACCESS">
          <description> <htm:b>Management Functions Access Control</htm:b><htm:br></htm:br>
            Server Virtualization Systems generally include a comprehensive management infrastructure. 
            VMM management functions include VM configuration, virtualized network configuration, allocation of physical 
            resources, and reporting. Only certain authorized system users (administrators) are allowed to exercise management 
            functions.<htm:br></htm:br>
            Because of the privileges exercised by the VMM management functions, it must not be possible for the VMM’s management 
            components to be compromised without administrator notification. This means that unauthorized users cannot be permitted 
            access to the management functions, and the management components must not be interfered with by Guest VMs or unprivileged 
            users on other networks—including operational networks connected to the TOE.<htm:br></htm:br>
            VMMs include a set of management functions that collectively allow administrators to configure and manage the VMM, as 
            well as configure Guest or Helper VMs. These management functions are specific to the virtualization system, distinct from 
            any other management functions that might exist for the internal management of any given Guest VM. These VMM management 
            functions are privileged, with the security of the entire system relying on their proper use. The VMM management functions 
            can be classified into different categories and the policy for their use and the impact to security may vary accordingly.<htm:br></htm:br>
            The management functions might be distributed throughout the VMM (within the VMM and Service VMs). The VMM must support the 
            necessary mechanisms to enable the control of all platform management functions according to the system security policy. When 
            a management function is distributed among multiple Service VMs, the VMs must be protected using the security mechanisms of the 
            Hypervisor and any Service VMs involved to ensure that the intent of the system security policy is not compromised. 
            Additionally, since hypercalls permit Guest VMs to invoke the Hypervisor, and often allow the passing of data to the Hypervisor, 
            it is important that the hypercall interface is well-guarded and that all parameters be validated.<htm:br></htm:br>
            The VMM maintains configuration data for every VM on the system. This configuration data, whether of Service or Guest VMs, must 
            be protected. The mechanisms used to establish, modify and verify configuration data are part of the platform management 
            functions and must be protected as such. The proper internal configuration of Service VMs that provide critical security 
            functions can also greatly impact platform security. These configurations must also be protected. Internal configuration of 
            Guest VMs should not impact overall platform security. The overall goal is to ensure that the VMM, including the environments 
            internal to Service VMs, is properly configured and that all Guest VM configurations are maintained consistent with the system 
            security policy throughout their lifecycle.<htm:br></htm:br>
            Server virtualization platforms are usually managed remotely. An administrator must, for example, remotely update virtualization 
            software, start and shut down VMs, and manage virtualized network connections. The console could be run on a separate machine or 
            it could itself run in a VM. In most cases, an administrator must communicate with a privileged management agent over a network. 
            Communications with the management infrastructure must be protected from Guest VMs and operational networks.
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.MANAGEABLE_NETWORK">
          <description> <htm:b>Manageable Enterprise Network</htm:b><htm:br></htm:br>
            Virtualization Systems can host VMs that are part of one or more larger physical networks. The Virtualization System itself 
            is part of the network infrastructure and must be managed as such. This means it must be updated and patched as a normal part 
            of enterprise network operations in order to prevent potential compromise of the VMM and all the networks and VMs that it hosts. 
            The VS must support standards and protocols that help enhance manageability of the VS as an IT product.
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.VM_ENTROPY">
          <description> <htm:b>Entropy for VMs</htm:b><htm:br></htm:br>
            In order to function as members of operational networks, VMs must be able to communicate securely with other network 
            entities—whether virtual or physical. They must therefore have access to sources of entropy sufficient for them to communicate 
            securely.
          </description>
          <component-refer ref=""/>
        </SO>
        <SO id="O.AUDIT">
          <description> <htm:b>Audit</htm:b><htm:br></htm:br>
            The purpose of audit is to capture and protect data about what happens on a system so that it can later be examined to determine 
            what has happened in the past. Security-relevant events related to virtualization must be logged by the VMM and made available to an 
            auditor. The system must also have a way to prevent the audit data from using all the CPU or resources available preventing a denial 
            of service within the VMM.
          </description>
          <component-refer ref=""/>
        </SO>
      </SOs>
    </section>
    <section title="Security Objectives for the Operational Environment"
      id="SecurityObjectivesTOEorEnvironment">The following security objectives for the operational
      environment assist the <abbr linkend="OS"/> in correctly providing its security functionality.
      These track with the assumptions about the environment. <SOEs>
        <SOE id="OE.CONFIG">
          <description>
            TOE administrators will configure the Virtualization System correctly to create the intended security policy.
          </description>
        </SOE>
        <SOE id="OE.PHYSICAL">
          <description>
            Physical security, commensurate with the value of the TOE and the data it contains, is provided by the environment.
          </description>
        </SOE>
        <SOE id="OE.PLATFORM_INTEGRITY">
          <description>
            The platform has not been compromised prior to installation of the Virtualization System.
          </description>
        </SOE>
        <SOE id="OE.TRUSTED_ADMIN">
          <description>
            TOE Administrators are trusted to follow and apply all administrator guidance in a trusted manner.
          </description>
        </SOE>
      </SOEs></section>
    <section title="Security Objectives Rationale" id="SOR">
      The rationale tracing the threats to the objectives and the objectives to the requirements is 
      contained in the prose in Sections 2.0 and 3.0 and is included in table form below. The only 
      outstanding mappings are those for the Assumptions and Organizational Security Policies; those 
      are contained in Annex A below.
      <InsertSPDCorrespondence/></section>
  </chapter>
  <chapter title="Security Requirements" id="SRs">
    <section title="Security Functional Requirements" id="SFRs">The individual security functional requirements are 
      specified in the sections below.
      <subsection title="Conventions" id="conventions">
        The CC defines operations on Security Functional Requirements: assignments, selections, assignments within 
        selections and refinements. This document uses the following font conventions to identify the operations 
        defined by the CC: 
        <htm:ul>
          <htm:li>
            <htm:b>Assignment</htm:b> operation (denoted by <htm:i>italicized text</htm:i>): is used to assign a
            specific value to an unspecified parameter, such as the length of a password. Showing the
            value in square brackets indicates assignment.</htm:li>
          <htm:li>
            <htm:b>Refinement</htm:b> operation made by PP author (denoted by <htm:b>bold text</htm:b>): Indicated by the word 
            “Refinement” in bold text after the element number with additional text in bold text and deletions 
            with strikethroughs, if necessary;</htm:li>
          <htm:li>
            <htm:b>Selection</htm:b> (denoted by <htm:u>underlined text</htm:u>) </htm:li>
          <htm:li>
            <htm:b>Assignment within a Selection</htm:b> (denoted by <htm:u><htm:i>italicized and underlined text</htm:i></htm:u>) </htm:li>
          <htm:li>
            <htm:b>Iteration</htm:b> operation: Indicated by appending the iteration number in parenthesis, e.g., (1), (2), 
            (3).</htm:li>
        </htm:ul>
        Extended SFRs are identified by having a label ‘EXT’ after the requirement name for TOE SFRs.
      </subsection>
      
      <subsection title="Audit" id="aud"><!-- HERE this doesn't quite match the document, but I had to create a subsection header to follow the format of the other docs -->
        <f-component id="FAU_GEN.1" name="Audit Data Generation" status="threshold">
          <f-element id="FAU_GEN.1.1">
            <title>The TSF shall be able to generate an audit record of the following auditable events:
              <ol type='a'>
                <li>Start-up and shutdown of audit functions</li>
                <li>All administrative actions</li>
                <li>Specifically defined auditable events listed in Table 1</li>
                <li><selectables>
                  <selectable>Specifically defined auditable events listed in Table B1</selectable>
                  <selectable>no other</selectable>
                </selectables></li>
              </ol>
            </title>
          </f-element>
          <f-element id="FAU_GEN.1.2">
            <title>The TSF shall record within each audit record at least the following information:
              <ol type='a'>
                <li>Date and time of the event</li>
                <li>Type of event</li>
                <li>Subject and object identity (if applicable)</li>
                <li>The outcome (success or failure) of the event</li>
                <li>Additional information defined in Table 1</li>
              </ol>
            </title>
            <note role="application">
              The ST author can include other auditable events directly in Table 1; they are not limited to the list presented. The ST author should update the table in FAU_GEN.1.2 with any additional information generated. “Subject identity” in FAU_GEN.1.2 could be an administrator’s user id or an identifier specifying a VM, for example.<htm:br></htm:br>
              If the ST author selects (d) in FAU_GEN.1.1, then Table B1 from Annex B must be included in the ST.<htm:br></htm:br>
              The Table 1 entry for FDP_VNC_EXT.1 refers to configuration settings that attach VMs to virtualized network components. Changes to these configurations can be made during VM execution or when VMs are not running. Audit records must be generated for either case.<htm:br></htm:br>
              The audit events for FMT_MOF_EXT.1 should correspond with the selections in SFR FMT_MOF_EXT.1.2. If a function is not supported by the TOE, then an audit event need not be generated for that function.<htm:br></htm:br>
              The intent of the audit requirement for FDP_PPR_EXT.1 is to log that the VM is connected to a physical device (when the device becomes part of the VM’s hardware view), not to log every time that the device is accessed. Generally, this is only once at VM startup. However, some devices can be connected and disconnected on the fly (e.g. virtual USB devices such as CDROMs). All such connection/disconnection events must be logged.
            </note>
            <aactivity>
              The evaluator shall check the TSS and ensure that it lists all of the auditable events and provides a format for audit records. Each audit record format type shall be covered, along with a brief description of each field. The evaluator shall check to make sure that every audit event type mandated by the PP is described in the TSS.<htm:br></htm:br>
              The evaluator shall also make a determination of the administrative actions that are relevant in the context of this PP. The evaluator shall examine the administrative guide and make a determination of which administrative commands, including subcommands, scripts, and configuration files, are related to the configuration (including enabling or disabling) of the mechanisms implemented in the TOE that are necessary to enforce the requirements specified in the PP. The evaluator shall document the methodology or approach taken while determining which actions in the administrative guide are security-relevant with respect to this PP.<htm:br></htm:br>
              The evaluator shall test the TOE’s ability to correctly generate audit records by having the TOE generate audit records for the events listed and administrative actions. For administrative actions, the evaluator shall test that each action determined by the evaluator above to be security relevant in the context of this PP is auditable. When verifying the test results, the evaluator shall ensure the audit records generated during testing match the format specified in the administrative guide, and that the fields in each audit record have the proper entries.<htm:br></htm:br>
              Note that the testing here can be accomplished in conjunction with the testing of the security mechanisms directly.
           <htm:table border="1">
                <htm:caption>Auditable Events</htm:caption>
                <htm:TR class="header">
                  <htm:TH>Requirement</htm:TH>
                  <htm:TH>Auditable Events</htm:TH>
                  <htm:TH>Additional Audit Record Contents</htm:TH>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FAU_GEN.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FAU_SAR.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FAU_STG.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FAU_STG_EXT.1</htm:TD>
                  <htm:TD>Failure of audit data capture due to lack of disk space or pre-defined limit.<htm:br></htm:br>
                    On failure of logging function, capture record of failure and record upon restart of logging function.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_CKM.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_CKM.2</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_CKM_EXT.4</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_COP.1(1)</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_COP.1(2)</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_COP.1(3)</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_COP.1(4)</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_RBG_EXT.1</htm:TD>
                  <htm:TD>Failure of the randomization process.</htm:TD>
                  <htm:TD>No additional information.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FCS_ENT_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_VMS_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_PPR_EXT.1</htm:TD>
                  <htm:TD>Successful and failed VM connections to physical devices where connection is governed by configurable policy.<htm:br></htm:br>
                    Security policy violations.</htm:TD>
                  <htm:TD>VM and physical device identifiers.<htm:br></htm:br>
                    Identifier for the security policy that was violated.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_VNC_EXT.1</htm:TD>
                  <htm:TD>Successful and failed attempts to connect VMs to virtual and physical networking components.<htm:br></htm:br>
                    Security policy violations.<htm:br></htm:br>
                    Administrator configuration of inter-VM communications channels between VMs.<htm:br></htm:br>
                  </htm:TD>
                  <htm:TD>VM and virtual or physical networking component identifiers.<htm:br></htm:br>
                    Identifier for the security policy that was violated.<htm:br></htm:br></htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_RIP_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_RIP_EXT.2</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FDP_HBI_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FTP_TRP.1</htm:TD>
                  <htm:TD>Initiation of the trusted channel. Termination of the trusted channel. Failures of the trusted path functions</htm:TD>
                  <htm:TD>User ID and remote source (IP Address) if feasible.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FTP_UIF_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FTP_UIF_EXT.2</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FIA_PMG_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FIA_UIA_EXT.1</htm:TD>
                  <htm:TD>Administrator authentication attempts<htm:br></htm:br>
                    All use of the identification and authentication mechanism.
                  </htm:TD>
                  <htm:TD>Provided user identity, origin of the attempt (e.g. console, remote IP address).</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FIA_X509_EXT.1</htm:TD>
                  <htm:TD>Failure to validate a certificate.</htm:TD>
                  <htm:TD>Reason for failure.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FIA_X509_EXT.2</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FMT_SMR.2</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FMT_MSA_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FMT_MOF_EXT.1</htm:TD>
                  <htm:TD>
                    Updates to the TOE.<htm:br></htm:br>
                    Configuration changes (system, network, audit function, Guest VM time, etc.).<htm:br></htm:br>
                    Start-up and shutdown of the TOE<htm:br></htm:br>
                    VM Start/Stop/Suspend events.<htm:br></htm:br>
                    Start and end of remote management session.
                  </htm:TD>
                  <htm:TD>Configuration changes.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FMT_SMO_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_TUD_EXT.1</htm:TD>
                  <htm:TD>Initiation of update.<htm:br></htm:br>
                    Failure of signature verification.
                  </htm:TD>
                  <htm:TD>No additional information.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_VIV_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_HCL_EXT.1</htm:TD>
                  <htm:TD>Attempts to access disabled hypercall interfaces<htm:br></htm:br>
                    Security policy violations.</htm:TD>
                  <htm:TD>Interface for which access was attempted.<htm:br></htm:br>
                    Identifier for the security policy that was violated.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_VDP_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_HAS_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_EEM_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_RDM_EXT.1</htm:TD>
                  <htm:TD>Transfer of removable media or device between VMs.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
                <htm:TR>
                  <htm:TD>FPT_DVD_EXT.1</htm:TD>
                  <htm:TD>None.</htm:TD>
                  <htm:TD>None.</htm:TD>
                </htm:TR>
              </htm:table>
              
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FAU_GEN.1.1" name="Auditable Events Table (Optional)"  status="sel-based">
          <f-element id="FAU_GEN.1.1">
            <title>Optional Auditable Events
            </title>
            <note role="application">Optional audit events if selected in FAU_GEN.1.1.</note>
            <aactivity><!-- table on page 80 -->
              <htm:table border="1">
                <htm:caption>Optional Auditable Events</htm:caption>
                <htm:tr class="header">
                  <htm:th>Requirement</htm:th>
                  <htm:th>Auditable Events</htm:th>
                  <htm:th>Additional Audit Record Contents</htm:th>
                </htm:tr>
                <htm:tr>
                  <htm:td>FIA_UIA_EXT.1</htm:td>
                  <htm:td>Administrator session start time and end time.</htm:td>
                  <htm:td>None.</htm:td>
                </htm:tr>
                <htm:tr>
                  <htm:td>FMT_MOF_EXT.1</htm:td>
                  <htm:td>Account created, modified, enabled, disabled, removed,</htm:td>
                  <htm:td></htm:td>
                </htm:tr>None.</htm:table>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FAU_SAR.1" name="Audit Review" status="threshold">
          <f-element id="FAU_SAR.1.1">
            <title>The TSF shall provide <htm:u><htm:b>administrators</htm:b></htm:u> with the capability to read <htm:b>all information</htm:b> from the audit records.
            </title>
          </f-element>
            <f-element id="FAU_SAR.1.2">
              <title>The TSF shall provide the audit records in a manner suitable for the user to interpret the information.
            </title>
            <aactivity>The evaluator shall verify that the audit records provide all of the information specified in FAU_GEN.1 and that this information is suitable for human interpretation. The evaluator shall review the operational guidance for the procedure on how to review the audit records. The assurance activity for this requirement is performed in conjunction with the assurance activity for FAU_GEN.1.
            </aactivity>
          </f-element>
        </f-component> 
        <f-component id="FAU_STG.1" name="Protected Audit Trail Storage" status="threshold">
          <f-element id="FAU_STG.1.1">
            <title>The TSF shall protect the stored audit records in the audit trail from unauthorized deletion.
            </title>
          </f-element>
            <f-element id="FAU_STG.1.2">
              <title>The TSF shall be able to prevent unauthorized modifications to the stored audit records in the audit trail.
              </title>
            <note role="application">The below Assurance Activity is not intended to imply that the TOE must support an Administrator’s ability to designate individual audit records for deletion. That level of granularity is not required.</note>
            <aactivity>The evaluator shall ensure that the TSS describes how the audit records are protected from unauthorized modification or deletion. The evaluator shall ensure that the TSS describes the conditions that must be met for authorized deletion of audit records. The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall access the audit trail as an unauthorized Administrator and attempt to modify and delete the audit records. The evaluator shall verify that these attempts fail.</test>
                <test>The evaluator shall access the audit trail as an authorized Administrator and attempt to delete the audit records. The evaluator shall verify that these attempts succeed. The evaluator shall verify that only the records authorized for deletion are deleted.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FAU_STG_EXT.1" name="Off-Loading of Audit Data" status="threshold">
          <f-element id="FAU_STG_EXT.1.1">
            <title>The TSF shall be able to transmit the generated audit data to an external IT entity using a trusted channel implementing the 
              <selectables>
                <selectable>IPsec</selectable>
                <selectable>SSH</selectable>
                <selectable>TLS</selectable>
                <selectable>TLS/HTTPS</selectable>
              </selectables>
              protocol.
            </title>
            <aactivity>The evaluator shall examine the TSS to ensure it describes the means by which the audit data are transferred to the external audit server, and how the trusted channel is provided. Testing of the trusted channel mechanism will be performed as specified in the associated assurance activities for the particular trusted channel mechanism. The evaluator shall also examine the operational guidance to ensure it describes how to establish the trusted channel to the audit server, as well as describe any requirements on the audit server (particular audit server protocol, version of the protocol required, etc.), as well as configuration of the TOE needed to communicate with the audit server. The evaluator shall perform the following test for this requirement:
              <testlist>
                <test>The evaluator shall establish a session between the TOE and the audit server according to the configuration guidance provided. The evaluator shall then examine the traffic that passes between the audit server and the TOE during several activities of the evaluator’s choice designed to generate audit data to be transferred to the audit server. The evaluator shall observe that these data are not able to be viewed in the clear during this transfer, and that they are successfully received by the audit server. The evaluator shall record the particular software (name, version) used on the audit server during testing.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FAU_STG_EXT.1.2">
            <title>The TSF shall 
              <selectables>
                <selectable>drop new audit data</selectable>
                <selectable>overwrite previous audit records according to the following rule: 
              <assignable>rule for overwriting previous audit records</assignable>, 
              <assignable>other action</assignable></selectable>
              </selectables> when the local storage space for audit data is full.</title>
            <note role="application">The external log server might be used as alternative storage space in case the local storage space is full. The ‘other action’ could in this case be defined as ‘send the new audit data to an external IT entity’.</note>
            <aactivity>The evaluator shall examine the TSS to ensure it describes what happens when the local audit data store is full. The evaluator shall also examine the operational guidance to determine that it describes the relationship between the local audit data and the audit data that are sent to the audit log server. For example, when an audit event is generated, is it simultaneously sent to the external server and the local store, or is the local store used as a buffer and “cleared” periodically by sending the data to the audit server.<htm:br></htm:br>
              The evaluator shall perform operations that generate audit data and verify that this data is stored locally. The evaluator shall perform operations that generate audit data until the local storage space is exceeded and verifies that the TOE complies with the behavior defined in the ST for FAU_STG_EXT.1.2.</aactivity>
          </f-element>
        </f-component>
         </subsection>
      <subsection title="Cryptographic Support (FCS)" id="fcs1">
        <f-component id="FCS_CKM.1" name="Cryptographic Key Generation" status="threshold">
          <f-element id="FCS_CKM.1.1">
           <title> The TSF shall generate asymmetric cryptographic keys in accordance with a specified cryptographic key generation algorithm   
              <selectables linebreak="yes">
                <selectable>
                  RSA schemes using cryptographic key sizes of 2048-bit or greater that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.3;
                </selectable>
                <selectable>
                  <htm:b>ECC schemes</htm:b> using “NIST curves” P-256, P-384 and 
                  <selectables>
                    <selectable> P-521 </selectable>
                    <selectable> no other curves </selectable>
                  </selectables> 
                  that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.4
                </selectable>
                <selectable>
                  <htm:b>FFC schemes</htm:b> using cryptographic key sizes of 2048-bit or greater that meet the following: FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Appendix B.1
                </selectable>
              </selectables>. 
            </title>
            <note role="application"> The ST author selects all key generation schemes used for key establishment and device authentication. When key generation is used for key establishment, the schemes in FCS_CKM.2.1 and selected cryptographic protocols shall match the selection. When key generation is used for device authentication, the public key is expected to be associated with an X.509v3 certificate.<htm:br></htm:br>
              If the TOE acts as a receiver in the RSA key establishment scheme, the TOE does not need to implement RSA key generation.
            </note>
            <aactivity> The evaluator shall ensure that the TSS identifies the key sizes supported by the TOE. If the ST specifies more than one scheme, the evaluator shall examine the TSS to verify that it identifies the usage for each scheme.<htm:br></htm:br>
              The evaluator shall verify that the AGD guidance instructs the administrator how to configure the TOE to use the selected key generation scheme(s) and key size(s) for all uses defined in this PP.<htm:br></htm:br>
              Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br>
              <htm:b>Key Generation for FIPS PUB 186-4 RSA Schemes</htm:b><htm:br></htm:br> 
              The evaluator shall verify the implementation of RSA Key Generation by the TOE using the Key Generation test. This test verifies the ability of the TSF to correctly produce values for the key components including the public verification exponent e, the private prime factors p and q, the public modulus n and the calculation of the private signature exponent d.<htm:br></htm:br>
              Key Pair generation specifies 5 ways (or methods) to generate the primes p and q. These include:<htm:br></htm:br> 
              <htm:ul>
                <htm:li> Random Primes: 
                  <htm:ul>
                    <htm:li>Provable primes</htm:li>
                    <htm:li>Probable primes</htm:li>
                  </htm:ul>
                </htm:li>
                <htm:li> Primes with Conditions: 
                  <htm:ul>
                    <htm:li>Primes p1, p2, q1,q2, p and q shall all be provable primes</htm:li>
                    <htm:li>Primes p1, p2, q1, and q2 shall be provable primes and p and q shall be
                      probable primes</htm:li>
                    <htm:li>Primes p1, p2, q1,q2, p and q shall all be probable primes</htm:li>
                  </htm:ul>
                </htm:li>
              </htm:ul>
              To test the key generation method for the Random Provable primes method and for all the Primes 
              with Conditions methods, the evaluator shall seed the TSF key generation routine with sufficient 
              data to deterministically generate the RSA key pair. This includes the random seed(s), the 
              public exponent of the RSA key, and the desired key length. For each key length supported, the 
              evaluator shall have the TSF generate 25 key pairs. The evaluator shall verify the correctness 
              of the TSF’s implementation by comparing values generated by the TSF with those generated from a 
              known good implementation.
              <htm:b>Key Generation for Elliptic Curve Cryptography (ECC)</htm:b>
              <htm:p> FIPS 186-4 ECC Key Generation Test</htm:p>
              For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall require the implementation under test (IUT) to generate 10 private/public key pairs. The private key shall be generated using an approved random bit generator (RBG). To determine correctness, the evaluator shall submit the generated key pairs to the public key verification (PKV) function of a known good implementation.
              <htm:br/>
              <htm:p>FIPS 186-4 Public Key Verification (PKV) Test</htm:p> 
              For each supported NIST curve, i.e., P-256, P-384 and P-521, the evaluator shall generate 10 private/public key pairs using the key generation function of a known good implementation and modify five of the public key values so that they are incorrect, leaving five values unchanged (i.e., correct). The evaluator shall obtain in response a set of 10 PASS/FAIL values.
              <htm:b>Key Generation for Finite-Field Cryptography (FFC)</htm:b>
              The evaluator shall verify the implementation of the Parameters Generation and the Key Generation for FFC by the TOE using the Parameter Generation and Key Generation test. This test verifies the ability of the TSF to correctly produce values for the field prime p, the cryptographic prime q (dividing p-1), the cryptographic group generator g, and the calculation of the private key x and public key y.<htm:br></htm:br>
              The Parameter generation specifies 2 ways (or methods) to generate the cryptographic prime q and the field prime p:
              <htm:ul>
                <htm:li>Primes q and p shall both be provable primes</htm:li>
                <htm:li>Primes q and field prime p shall both be probable primes</htm:li>
              </htm:ul>
              and two ways to generate the cryptographic group generator g:
              <htm:ul>
                <htm:li>Generator g constructed through a verifiable process</htm:li>
                <htm:li>Generator g constructed through an unverifiable process.</htm:li>
              </htm:ul>
              The Key generation specifies 2 ways to generate the private key x:
              <htm:ul>
                <htm:li>len(q) bit output of RBG where  1 &#2264; x &#2264; q-1 <!-- the special characters 1 <=x <= q-1 --></htm:li>
                <htm:li>len(q) + 64 bit output of RBG, followed by a mod q-1 operation where 1 &#2264; x &#2264; q-1 <!-- 1<= x<=q-1. --></htm:li>
              </htm:ul>
              The security strength of the RBG shall be at least that of the security offered by the FFC parameter set.<htm:br></htm:br>
              To test the cryptographic and field prime generation method for the provable primes method and/or the group generator g for a verifiable process, the evaluator shall seed the TSF parameter generation routine with sufficient data to deterministically generate the parameter set.<htm:br></htm:br>
              For each key length supported, the evaluator shall have the TSF generate 25 parameter sets and key pairs. The evaluator shall verify the correctness of the TSF’s implementation by comparing values generated by the TSF with those generated from a known good implementation. Verification shall also confirm<htm:br></htm:br>
              <htm:ul>
                <htm:li>g != 0,1</htm:li>
                <htm:li>q divides p-1</htm:li>
                <htm:li>g^q mod p = 1</htm:li>
                <htm:li>g^x mod p = y</htm:li>
              </htm:ul>
              for each FFC parameter set and key pair.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_CKM.2" name="Cryptographic Key Establishment" status="threshold">
          <f-element id="FCS_CKM.2.1">
            <title>The TSF shall perform cryptographic key establishment in accordance with a specified cryptographic key establishment method:
              <selectables linebreak="yes">
                <selectable>RSA-based key establishment schemes that meets the following: NIST Special Publication 800-56B, “Recommendation for Pair-Wise Key Establishment Schemes Using Integer Factorization Cryptography”;
                </selectable>
                <selectable>Elliptic curve-based key establishment schemes that meets the following: NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”;
                </selectable>
                <selectable>Finite field-based key establishment schemes that meets the following: NIST Special Publication 800-56A, “Recommendation for Pair-Wise Key Establishment Schemes Using Discrete Logarithm Cryptography”
                </selectable>
              </selectables>
            </title>
            <note role="application">
              This is a refinement of the SFR FCS_CKM.2 to deal with key establishment rather than key distribution.<htm:br></htm:br>
              The ST author selects all key establishment schemes used for the selected cryptographic protocols.<htm:br></htm:br>
              The RSA-based key establishment schemes are described in Section 9 of NIST SP 800-56B; however, Section 9 relies on implementation of other sections in SP 800-56B. If the TOE acts as a receiver in the RSA key establishment scheme, the TOE does not need to implement RSA key generation.<htm:br></htm:br>
              The elliptic curves used for the key establishment scheme shall correlate with the curves specified in FCS_CKM.1.1.<htm:br></htm:br>
              The domain parameters used for the finite field-based key establishment scheme are specified by the key generation according to FCS_CKM.1.1.</note>
            <aactivity>The evaluator shall ensure that the supported key establishment schemes correspond to the key generation schemes identified in FCS_CKM.1.1. If the ST specifies more than one scheme, the evaluator shall examine the TSS to verify that it identifies the usage for each scheme.<htm:br></htm:br>
              The evaluator shall verify that the AGD guidance instructs the administrator how to configure the TOE to use the selected key establishment scheme(s).<htm:br></htm:br>
              The evaluator shall verify the implementation of the key establishment schemes of the supported by the TOE using the applicable tests below.<htm:br></htm:br>
              <htm:b>Key Establishment Schemes</htm:b><htm:br></htm:br>
              <htm:b>SP800-56A Key Establishment Schemes</htm:b><htm:br></htm:br>
              The evaluator shall verify a TOE's implementation of SP800-56A key agreement schemes using the following Function and Validity tests. These validation tests for each key agreement scheme verify that a TOE has implemented the components of the key agreement scheme according to the specifications in the Recommendation. These components include the calculation of the DLC primitives (the shared secret value Z) and the calculation of the derived keying material (DKM) via the Key Derivation Function (KDF). If key confirmation is supported, the evaluator shall also verify that the components of key confirmation have been implemented correctly, using the test procedures described below. This includes the parsing of the DKM, the generation of MACdata and the calculation of MACtag.<htm:br></htm:br>
              <htm:i>Function Test</htm:i><htm:br></htm:br>
              The Function test verifies the ability of the TOE to implement the key agreement schemes correctly. To conduct this test the evaluator shall generate or obtain test vectors from a known good implementation of the TOE supported schemes. For each supported key agreement scheme-key agreement role combination, KDF type, and, if supported, key confirmation role- key confirmation type combination, the tester shall generate 10 sets of test vectors. The data set consists of one set of domain parameter values (FFC) or the NIST approved curve (ECC) per 10 sets of public keys. These keys are static, ephemeral or both depending on the scheme being tested.<htm:br></htm:br>
              The evaluator shall obtain the DKM, the corresponding TOE’s public keys (static and/or ephemeral), the MAC tag(s), and any inputs used in the KDF, such as the Other Information field OI and TOE id fields.<htm:br></htm:br>
              If the TOE does not use a KDF defined in SP 800-56A, the evaluator shall obtain only the public keys and the hashed value of the shared secret.<htm:br></htm:br>
              The evaluator shall verify the correctness of the TSF’s implementation of a given scheme by using a known good implementation to calculate the shared secret value, derive the keying material DKM, and compare hashes or MAC tags generated from these values.<htm:br></htm:br>
              If key confirmation is supported, the TSF shall perform the above for each implemented approved MAC algorithm.<htm:br></htm:br>
              <htm:i>Validity Test</htm:i><htm:br></htm:br>
              The Validity test verifies the ability of the TOE to recognize another party’s valid and invalid key agreement results with or without key confirmation. To conduct this test, the evaluator shall obtain a list of the supporting cryptographic functions included in the SP800-56A key agreement implementation to determine which errors the TOE should be able to recognize. The evaluator generates a set of 24 (FFC) or 30 (ECC) test vectors consisting of data sets including domain parameter values or NIST approved curves, the evaluator’s public keys, the TOE’s public/private key pairs, MACTag, and any inputs used in the KDF, such as the other info and TOE id fields.<htm:br></htm:br>
              The evaluator shall inject an error in some of the test vectors to test that the TOE recognizes invalid key agreement results caused by the following fields being incorrect: the shared secret value Z, the DKM, the other information field OI, the data to be MACed, or the generated MACTag. If the TOE contains the full or partial (only ECC) public key validation, the evaluator will also individually inject errors in both parties’ static public keys, both parties’ ephemeral public keys and the TOE’s static private key to assure the TOE detects errors in the public key validation function and/or the partial key validation function (in ECC only). At least two of the test vectors shall remain unmodified and therefore should result in valid key agreement results (they should pass).<htm:br></htm:br>
              The TOE shall use these modified test vectors to emulate the key agreement scheme using the corresponding parameters. The evaluator shall compare the TOE’s results with the results using a known good implementation verifying that the TOE detects these errors.<htm:br></htm:br>
              <htm:b>SP800-56B Key Establishment Schemes</htm:b><htm:br></htm:br>
              The evaluator shall verify that the TSS describes whether the TOE acts as a sender, a recipient, or both for RSA-based key establishment schemes.<htm:br></htm:br>
              If the TOE acts as a sender, the following assurance activity shall be performed to ensure the proper operation of every TOE supported combination of RSA-based key establishment scheme:<htm:br></htm:br>
              <htm:ul>
                <htm:li>To conduct this test the evaluator shall generate or obtain test vectors from a known good implementation of the TOE supported schemes. For each combination of supported key establishment scheme and its options (with or without key confirmation if supported, for each supported key confirmation MAC function if key confirmation is supported, and for each supported mask generation function if KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test vector shall include the RSA public key, the plaintext keying material, any additional input parameters if applicable, the MacKey and MacTag if key confirmation is incorporated, and the outputted ciphertext. For each test vector, the evaluator shall perform a key establishment encryption operation on the TOE with the same inputs (in cases where key confirmation is incorporated, the test shall use the MacKey from the test vector instead of the randomly generated MacKey used in normal operation) and ensure that the outputted ciphertext is equivalent to the ciphertext in the test vector.</htm:li>
              </htm:ul>
              If the TOE acts as a receiver, the following assurance activities shall be performed to ensure the proper operation of every TOE supported combination of RSA-based key establishment scheme:<htm:br></htm:br>
              <htm:ul>
                <htm:li>To conduct this test the evaluator shall generate or obtain test vectors from a known good implementation of the TOE supported schemes. For each combination of supported key establishment scheme and its options (with our without key confirmation if supported, for each supported key confirmation MAC function if key confirmation is supported, and for each supported mask generation function if KTS-OAEP is supported), the tester shall generate 10 sets of test vectors. Each test vector shall include the RSA private key, the plaintext keying material (KeyData), any additional input parameters if applicable, the MacTag in cases where key confirmation is incorporated, and the outputted ciphertext. For each test vector, the evaluator shall perform the key establishment decryption operation on the TOE and ensure that the outputted plaintext keying material (KeyData) is equivalent to the plaintext keying material in the test vector. In cases where key confirmation is incorporated, the evaluator shall perform the key confirmation steps and ensure that the outputted MacTag is equivalent to the MacTag in the test vector.</htm:li>
                <htm:li>The evaluator shall ensure that the TSS describes how the TOE handles decryption errors. In accordance with NIST Special Publication 800-56B, the TOE shall not reveal the particular error that occurred, either through the contents of any outputted or logged error message or through timing variations. If KTS-OAEP is supported, the evaluator shall create separate contrived ciphertext values that trigger each of the three decryption error checks described in NIST Special Publication 800-56B section 7.2.2.3, ensure that each decryption attempt results in an error, and ensure that any outputted or logged error message is identical for each. If KTS-KEM-KWS is supported, the evaluator shall create separate contrived ciphertext values that trigger each of the three decryption error checks described in NIST Special Publication 800-56B section 7.2.3.3, ensure that each decryption attempt results in an error, and ensure that any outputted or logged error message is identical for each.</htm:li>
              </htm:ul>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_CKM_EXT.4" name="Cryptographic Key Destruction" status="threshold">
          <f-element id="FCS_CKM_EXT.4.1">
            <title>The TSF shall destroy cryptographic keys in accordance with the specified cryptographic key destruction methods:<htm:br></htm:br>
              <ul>
                <li>For volatile memory, the destruction shall be executed by a single direct overwrite 
               
              <selectables>
                <selectable>consisting of a pseudo-random pattern</selectable>
                <selectable>consisting of a repeating pattern of any static value</selectable>
              </selectables></li>
                <li>For non-volatile EEPROM, the destruction shall be executed by a single, direct overwrite 
              <selectables>
                <selectable>consisting of a pseudo random pattern</selectable>
                <selectable>consisting of a repeating pattern of any static value</selectable>
              </selectables> followed by a read-verify.</li>
                <li>For non-volatile flash memory that is not wear-leveled, the destruction shall be executed by 
              <selectables>
                <selectable>a single</selectable>
                <selectable>direct overwrite consisting of a repeating pattern of any static value</selectable>
                <selectable>a block erase</selectable>
              </selectables>
              followed by a read-verify.</li>
                <li>For non-volatile memory other than EEPROM and flash, the destruction shall be executed by overwriting three or more times with 
              <selectables>
                <selectable>a pseudo random pattern that is changed before each write</selectable>
                <selectable>a repeating pattern of static values that is changed before each write</selectable>
              </selectables>.</li>
              </ul>
              that meets the following: No standard.
            </title>
            <note role="application">
              The clearing indicated above applies to each intermediate storage area for plaintext key/cryptographic critical security parameter (i.e., any storage, such as memory buffers, that is included in the path of such data) upon the transfer of the key/cryptographic critical security parameter to another location.<htm:br></htm:br>
              Key storage areas in volatile memory can be overwritten with any value that renders the key(s) unrecoverable after the copy of the key is no longer needed in memory. It can be all zeros, all ones, or any other pattern or combination of values other than the value of the key itself.<htm:br></htm:br>
              Non-volatile flash memory is often implemented in assemblies that "wear-level" the memory. This implementation has the consequence that a software-directed read-verify after a software-directed erase does not result in the flash memory assembly examining the same physical memory locations, so there is be no security benefit from this action (the underlying controller on the flash memory often includes functions to verify writes at a level below that of the controlling software, reducing the risk of residual data being present). Some non-volatile flash memory can be configured so that it is not wear-leveled; in these cases the TOE must perform the read-verify.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall check to ensure the TSS lists each type of plaintext key material and its origin and storage location.<htm:br></htm:br>
              The evaluator shall verify that the TSS describes when each type of key material is cleared (for example, on system power off, on wipe function, on disconnection of trusted channels, when no longer needed by the trusted channel per the protocol, etc.).<htm:br></htm:br>
              For each software key clearing situation the evaluator shall repeat the following tests.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall utilize appropriate combinations of specialized operational environment and development tools (debuggers, simulators, etc.) to test that keys are cleared correctly, including all intermediate copies of the key that may have been created internally by the TOE during normal cryptographic processing with that key.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_COP.1(1)" name="Cryptographic Operation (AES Data Encryption/ Decryption)" status="threshold">
          <f-element id="FCS_COP.1.1(1)">
            <title>
              The TSF shall perform [encryption/decryption] in accordance with a specified cryptographic algorithm<htm:br></htm:br>
              <selectables linebreak="yes">
                <selectable>AES Key Wrap (KW) (as defined in NIST SP 800-38F)</selectable>
                <selectable>AES Key Wrap with Padding (KWP) (as defined in NIST SP 800-38F)</selectable>
                <selectable>AES-GCM (as defined in NIST SP 800-38D),</selectable>
                <selectable>AES-CCM (as defined in NIST SP 800-38C),</selectable>
                <selectable>AES-XTS (as defined in NIST SP 800-38E) mode,</selectable>
                <selectable>AES-CCMP-256 (as defined in NIST SP800-38C and IEEE 802.11ac-2013),</selectable>
                <selectable>AES-GCMP-256 (as defined in NIST SP800-38D and IEEE 802.11ac-2013),</selectable>
                <selectable>AES-CCMP (as defined in FIPS PUB 197, NIST SP 800-38C and IEEE 802.11-2012),</selectable>
                <selectable>AES-CBC (as defined in FIPS PUB 197, and NIST SP 800-38A) mode,</selectable>
                <selectable>AES-CTR (as defined in NIST SP 800-38A) mode</selectable>
              </selectables>
              and cryptographic key sizes 
              <selectables>
                <selectable>128-bit key sizes</selectable>
                <selectable>256-bit key sizes</selectable>
              </selectables>.
            </title>
            <note role="application">For the first selection of FCS_COP.1.1(1), the ST author should choose the mode or modes in which AES operates. For the second selection, the ST author should choose the key sizes that are supported by this functionality.</note>
            <aactivity>Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br>
              <htm:b><htm:u>AES-CBC Tests</htm:u></htm:b><htm:br></htm:br>
              <htm:b>AES-CBC Known Answer Tests</htm:b><htm:br></htm:br>             
              There are four Known Answer Tests (KATs), described below. In all KATs, the plaintext, ciphertext, and IV values shall be 128-bit blocks. The results from each test may either be obtained by the evaluator directly or by supplying the inputs to the implementer and receiving the results in response. To determine correctness, the evaluator shall compare the resulting values to those obtained by submitting the same inputs to a known good implementation.<htm:br></htm:br>
              <htm:b>KAT-1.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10 plaintext values and obtain the ciphertext value that results from AES-CBC encryption of the given plaintext using a key value of all zeros and an IV of all zeros. Five plaintext values shall be encrypted with a 128-bit all-zeros key, and the other five shall be encrypted with a 256-bit all-zeros key.<htm:br></htm:br>
              To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using 10 ciphertext values as input and AES-CBC decryption.<htm:br></htm:br>
              <htm:b>KAT-2.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply a set of 10 key values and obtain the ciphertext value that results from AES-CBC encryption of an all-zeros plaintext using the given key value and an IV of all zeros. Five of the keys shall be 128-bit keys, and the other five shall be 256-bit keys.<htm:br></htm:br>
              To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using an all-zero ciphertext value as input and AES-CBC decryption.<htm:br></htm:br>
              <htm:b>KAT-3.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply the two sets of key values described below and obtain the ciphertext value that results from AES encryption of an all-zeros plaintext using the given key value and an IV of all zeros. The first set of keys shall have 128 128-bit keys, and the second set shall have 256 256-bit keys. Key i in each set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N].<htm:br></htm:br>
              To test the decrypt functionality of AES-CBC, the evaluator shall supply the two sets of key and ciphertext value pairs described below and obtain the plaintext value that results from AES-CBC decryption of the given ciphertext using the given key and an IV of all zeros. The first set of key/ciphertext pairs shall have 128 128-bit key/ciphertext pairs, and the second set of key/ciphertext pairs shall have 256 256-bit key/ciphertext pairs. Key i in each set shall have the leftmost i bits be ones and the rightmost N-i bits be zeros, for i in [1,N]. The ciphertext value in each pair shall be the value that results in an all-zeros plaintext when decrypted with its corresponding key.<htm:br></htm:br>
              <htm:b>KAT-4.</htm:b>To test the encrypt functionality of AES-CBC, the evaluator shall supply the set of 128 plaintext values described below and obtain the two ciphertext values that result from AES-CBC encryption of the given plaintext using a 128-bit key value of all zeros with an IV of all zeros and using a 256-bit key value of all zeros with an IV of all zeros, respectively. Plaintext value i in each set shall have the leftmost i bits be ones and the rightmost 128-i bits be zeros, for i in [1,128<htm:br></htm:br>
              To test the decrypt functionality of AES-CBC, the evaluator shall perform the same test as for encrypt, using ciphertext values of the same form as the plaintext in the encrypt test as input and AES-CBC decryption.<htm:br></htm:br>
              <htm:b>AES-CBC Multi-Block Message Test</htm:b><htm:br></htm:br>
              The evaluator shall test the encrypt functionality by encrypting an i-block message where 1 &lt; i &#2264; <!--   1 < i <=10-->. The evaluator shall choose a key, an IV and plaintext message of length i blocks and encrypt the message, using the mode to be tested, with the chosen key and IV. The ciphertext shall be compared to the result of encrypting the same plaintext message with the same key and IV using a known good implementation.<htm:br></htm:br>
              The evaluator shall also test the decrypt functionality for each mode by decrypting an i-block message where 1 &lt; i &#2264; <!--   1 < i <=10 -->. The evaluator shall choose a key, an IV and a ciphertext message of length i blocks and decrypt the message, using the mode to be tested, with the chosen key and IV. The plaintext shall be compared to the result of decrypting the same ciphertext message with the same key and IV using a known good implementation.<htm:br></htm:br>
              <htm:b>AES-CBC Monte Carlo Tests</htm:b><htm:br></htm:br>
              The evaluator shall test the encrypt functionality using a set of 200 plaintext, IV, and key 3-tuples. 100 of these shall use 128 bit keys, and 100 shall use 256 bit keys. The plaintext and IV values shall be 128-bit blocks. For each 3-tuple, 1000 iterations shall be run as follows:<htm:br></htm:br>
              <!--  code -->
              <htm:pre>
              # Input: PT, IV, Key
              for i = 1 to 1000:
                if i == 1:
                      CT[1] = AES-CBC-Encrypt(Key, IV, PT)
                      PT = IV
                else:
                  CT[i] = AES-CBC-Encrypt(Key, PT) 
                  PT = CT[i-1]
              </htm:pre>
              <!-- end code -->
              The ciphertext computed in the 1000th iteration (i.e., CT[1000]) is the result for that trial. This result shall be compared to the result of running 1000 iterations with the same values using a known good implementation.<htm:br></htm:br>
              The evaluator shall test the decrypt functionality using the same test as for encrypt, exchanging CT and PT and replacing AES-CBC-Encrypt with AES-CBC-Decrypt.<htm:br></htm:br>
              <htm:b><htm:u>AES-CCM Tests</htm:u></htm:b><htm:br></htm:br>
              The evaluator shall test the generation-encryption and decryption-verification functionality of AES-CCM for the following input parameter and tag lengths:<htm:br></htm:br>
              <htm:b>128 bit and 256 bit keys</htm:b><htm:br></htm:br>
              <htm:b>Two payload lengths.</htm:b>One payload length shall be the shortest supported payload length, greater than or equal to zero bytes. The other payload length shall be the longest supported payload length, less than or equal to 32 bytes (256 bits).<htm:br></htm:br>
              <htm:b>Two or three associated data lengths.</htm:b>One associated data length shall be 0, if supported. One associated data length shall be the shortest supported payload length, greater than or equal to zero bytes. One associated data length shall be the longest supported payload length, less than or equal to 32 bytes (256 bits). 
              If the implementation supports an associated data length of  2<htm:sup>16</htm:sup> bytes, an associated data length of 2<htm:sup>16</htm:sup> bytes shall be tested.<htm:br></htm:br>
              <htm:b>Nonce lengths.</htm:b>All supported nonce lengths between 7 and 13 bytes, inclusive, shall be tested.<htm:br></htm:br>
              <htm:b>Tag lengths.</htm:b>All supported tag lengths of 4, 6, 8, 10, 12, 14 and 16 bytes shall be tested.<htm:br></htm:br>
              To test the generation-encryption functionality of AES-CCM, the evaluator shall perform the following four tests:<htm:br></htm:br>
              <testlist>
                <test>For EACH supported key and associated data length and ANY supported payload, nonce and tag length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.</test>
                <test>For EACH supported key and payload length and ANY supported associated data, nonce and tag length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.</test>
                <test>For EACH supported key and nonce length and ANY supported associated data, payload and tag length, the evaluator shall supply one key value and 10 associated data, payload and nonce value 3-tuples and obtain the resulting ciphertext.</test>
                <test>For EACH supported key and tag length and ANY supported associated data, payload and nonce length, the evaluator shall supply one key value, one nonce value and 10 pairs of associated data and payload values and obtain the resulting ciphertext.</test>
              </testlist>
              To determine correctness in each of the above tests, the evaluator shall compare the ciphertext with the result of generation-encryption of the same inputs with a known good implementation.<htm:br></htm:br>
              To test the decryption-verification functionality of AES-CCM, for EACH combination of supported associated data length, payload length, nonce length and tag length, the evaluator shall supply a key value and 15 nonce, associated data and ciphertext 3-tuples and obtain either a FAIL result or a PASS result with the decrypted payload. The evaluator shall supply 10 tuples that should FAIL and 5 that should PASS per set of 15.<htm:br></htm:br>
              Additionally, the evaluator shall use tests from the IEEE 802.11-02/362r6 document “Proposed Test vectors for IEEE 802.11 TGi”, dated September 10, 2002, Section 2.1 AES-CCMP Encapsulation Example and Section 2.2 Additional AES CCMP Test Vectors to further verify the IEEE 802.11-2007 implementation of AES-CCMP.<htm:br></htm:br>
              <htm:b><htm:u>AES-GCM Test</htm:u></htm:b><htm:br></htm:br>
              The evaluator shall test the authenticated encrypt functionality of AES-GCM for each combination of the following input parameter lengths:<htm:br></htm:br>
              <htm:b>128 bit and 256 bit keys</htm:b><htm:br></htm:br>
              <htm:b>Two plaintext lengths.</htm:b>One of the plaintext lengths shall be a non-zero integer multiple of 128 bits, if supported. The other plaintext length shall not be an integer multiple of 128 bits, if supported.<htm:br></htm:br>
              <htm:b>Three AAD lengths.</htm:b>One AAD length shall be 0, if supported. One AAD length shall be a non-zero integer multiple of 128 bits, if supported. One AAD length shall not be an integer multiple of 128 bits, if supported.<htm:br></htm:br>
              <htm:b>Two IV lengths.</htm:b>If 96 bit IV is supported, 96 bits shall be one of the two IV lengths tested.<htm:br></htm:br>
              The evaluator shall test the encrypt functionality using a set of 10 key, plaintext, AAD, and IV tuples for each combination of parameter lengths above and obtain the ciphertext value and tag that results from AES-GCM authenticated encrypt. Each supported tag length shall be tested at least once per set of 10. The IV value may be supplied by the evaluator or the implementation being tested, as long as it is known.<htm:br></htm:br>
              The evaluator shall test the decrypt functionality using a set of 10 key, ciphertext, tag, AAD, and IV 5-tuples for each combination of parameter lengths above and obtain a Pass/Fail result on authentication and the decrypted plaintext if Pass. The set shall include five tuples that Pass and five that Fail.<htm:br></htm:br>
              The results from each test may either be obtained by the evaluator directly or by supplying the inputs to the implementer and receiving the results in response. To determine correctness, the evaluator shall compare the resulting values to those obtained by submitting the same inputs to a known good implementation.<htm:br></htm:br>
              <htm:b><htm:u>XTS-AES Test</htm:u></htm:b><htm:br></htm:br>
              The evaluator shall test the encrypt functionality of XTS-AES for each combination of the following input parameter lengths:<htm:br></htm:br>
              <htm:b>256 bit (for AES-128) and 512 bit (for AES-256) keys</htm:b><htm:br></htm:br>
              <htm:b>Three data unit (i.e., plaintext) lengths.</htm:b>One of the data unit lengths shall be a non-zero integer multiple of 128 bits, if supported. One of the data unit lengths shall be an integer multiple of 128 bits, if supported. The third data unit length shall be either the longest supported data unit length or 216 bits, whichever is smaller.<htm:br></htm:br>
              using a set of 100 (key, plaintext and 128-bit random tweak value) 3-tuples and obtain the ciphertext that results from XTS-AES encrypt.<htm:br></htm:br>
              The evaluator may supply a data unit sequence number instead of the tweak value if the implementation supports it. The data unit sequence number is a base-10 number ranging between 0 and 255 that implementations convert to a tweak value internally.<htm:br></htm:br>
              The evaluator shall test the decrypt functionality of XTS-AES using the same test as for encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTS-AES decrypt.<htm:br></htm:br>
              <htm:b><htm:u>AES Key Wrap (AES-KW) and Key Wrap with Padding (AES-KWP) Test</htm:u></htm:b><htm:br></htm:br>
              The evaluator shall test the decrypt functionality of XTS-AES using the same test as for encrypt, replacing plaintext values with ciphertext values and XTS-AES encrypt with XTS-AES decrypt.<htm:br></htm:br>
              <htm:b>128 and 256 bit key encryption keys (KEKs)</htm:b><htm:br></htm:br>
              <htm:b>Three plaintext lengths.</htm:b>One of the plaintext lengths shall be two semi-blocks (128 bits). One of the plaintext lengths shall be three semi-blocks (192 bits). The third data unit length shall be the longest supported plaintext length less than or equal to 64 semi-blocks (4096 bits).<htm:br></htm:br>
              using a set of 100 key and plaintext pairs and obtain the ciphertext that results from AES-KW authenticated encryption. To determine correctness, the evaluator shall use the AES-KW authenticated-encryption function of a known good implementation.<htm:br></htm:br>
              The evaluator shall test the authenticated-decryption functionality of AES-KW using the same test as for authenticated-encryption, replacing plaintext values with ciphertext values and AES-KW authenticated-encryption with AES-KW authenticated-decryption.<htm:br></htm:br>
              The evaluator shall test the authenticated-encryption functionality of AES-KWP using the same test as for AES-KW authenticated-encryption with the following change in the three plaintext lengths:<htm:br></htm:br>
              One plaintext length shall be one octet. One plaintext length shall be 20 octets (160 bits).<htm:br></htm:br>
              One plaintext length shall be the longest supported plaintext length less than or equal to 512 octets (4096 bits).<htm:br></htm:br>
              The evaluator shall test the authenticated-decryption functionality of AES-KWP using the same test as for AES-KWP authenticated-encryption, replacing plaintext values with ciphertext values and AES-KWP authenticated-encryption with AES-KWP authenticated-decryption.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_COP.1(2)" name="Cryptographic Operation (Hashing)" status="threshold">
          <f-element id="FCS_COP.1.1(2)">
            <title>The TSF shall perform [cryptographic hashing] in accordance with a specified cryptographic algorithm 
              <selectables>
                <selectable>SHA-1</selectable>
                <selectable>SHA-256</selectable>
                <selectable>SHA-384</selectable>
                <selectable>SHA-512</selectable>
              </selectables> and message digest sizes 
              <selectables>
                <selectable>160</selectable>
                <selectable>256</selectable>
                <selectable>384</selectable>
                <selectable>512 bits</selectable>
              </selectables> that meet the following: [FIPS Pub 180-4].
            </title>
            <note role="application">
              Per NIST SP 800-131A, SHA-1 for generating digital signatures is no longer allowed, and SHA-1 for verification of digital signatures is strongly discouraged as there may be risk in accepting these signatures. It is expected that vendors will implement SHA-2 algorithms in accordance with SP 800-131A.<htm:br></htm:br>
              The intent of this requirement is to specify the hashing function. The hash selection shall support the message digest size selection. The hash selection should be consistent with the overall strength of the algorithm used (for example, SHA 256 for 128-bit keys).<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator checks the AGD documents to determine that any configuration that is required to be done to configure the functionality for the required hash sizes is present. The evaluator shall check that the association of the hash function with other TSF cryptographic functions (for example, the digital signature verification function) is documented in the TSS.<htm:br></htm:br>
              The TSF hashing functions can be implemented in one of two modes. The first mode is the byteoriented mode. In this mode the TSF only hashes messages that are an integral number of bytes in length; i.e., the length (in bits) of the message to be hashed is divisible by 8. The second mode is the bitoriented mode. In this mode the TSF hashes messages of arbitrary length. As there are different tests for each mode, an indication is given in the following sections for the bitoriented vs. the byteoriented testmacs.<htm:br></htm:br>
              The evaluator shall perform all of the following tests for each hash algorithm implemented by the TSF and used to satisfy the requirements of this PP.<htm:br></htm:br>
              Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br>
              <htm:i>Short Messages Test Bitoriented Mode</htm:i><htm:br></htm:br>
              The evaluators devise an input set consisting of m+1 messages, where m is the block length of the hash algorithm. The length of the messages range sequentially from 0 to m bits. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the TSF.<htm:br></htm:br>
              <htm:i>Short Messages Test Byteoriented Mode</htm:i><htm:br></htm:br>
              The evaluators devise an input set consisting of m/8+1 messages, where m is the block length of the hash algorithm. The length of the messages range sequentially from 0 to m/8 bytes, with each message being an integral number of bytes. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the TSF.<htm:br></htm:br>
              <htm:i>Selected Long Messages Test Bitoriented Mode</htm:i><htm:br></htm:br>
              The evaluators devise an input set consisting of m messages, where m is the block length of the hash algorithm. The length of the ith message is 512 + 99*i, where 1 &#2264; i &#2264; m <!--   1 ≤ i ≤ m -->. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the TSF.<htm:br></htm:br>
              <htm:i>Selected Long Messages Test Byteoriented Mode</htm:i><htm:br></htm:br>
              The evaluators devise an input set consisting of m/8 messages, where m is the block length of the hash algorithm. The length of the ith message is 512 + 8*99*i, where 1 &#2264; i &#2264; m/8 <!--   1 ≤ i ≤ m/8-->. The message text shall be pseudo-randomly generated. The evaluators compute the message digest for each of the messages and ensure that the correct result is produced when the messages are provided to the TSF.<htm:br></htm:br>
              <htm:i>Pseudo-randomly Generated Messages Test</htm:i><htm:br></htm:br>
              This test is for byteoriented implementations only. The evaluators randomly generate a seed that is n bits long, where n is the length of the message digest produced by the hash function to be tested. The evaluators then formulate a set of 100 messages and associated digests by following the algorithm provided in Figure 1 of [SHAVS]. The evaluators then ensure that the correct result is produced when the messages are provided to the TSF.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_COP.1(3)" name="Cryptographic Operation (Signature Algorithms)" status="threshold">
          <f-element id="FCS_COP.1.1(3)">
            <title>Refinement: The TSF shall perform [cryptographic signature services (generation and verification)] in accordance with a specified cryptographic algorithm
              <selectables linebreak="yes">
                <selectable>[RSA schemes] using cryptographic key sizes [of 2048-bit or greater] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 4]</selectable>
                <selectable>[ECDSA schemes] using [“NIST curves” P-256, P-384 and
                  <selectables>
                    <selectable>P-521</selectable>
                    <selectable>no other curves</selectable>
                  </selectables>] that meet the following: [FIPS PUB 186-4, “Digital Signature Standard (DSS)”, Section 5]
                </selectable>
              </selectables>.
            </title>
            <note role="application">The ST Author should choose the algorithm implemented to perform digital signatures; if more than one algorithm is available, this requirement should be iterated to specify the functionality. For the algorithm chosen, the ST author should make the appropriate assignments/selections to specify the parameters that are implemented for that algorithm.</note>
            <aactivity>Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.
              <htm:b>ECDSA Algorithm Tests</htm:b><htm:br></htm:br>
              <htm:b><htm:i>ECDSA FIPS 186-4 Signature Generation Test</htm:i></htm:b><htm:br></htm:br>
              For each supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator shall generate 10 1024-bit long messages and obtain for each message a public key and the resulting signature values R and S. To determine correctness, the evaluator shall use the signature verification function of a known good implementation.<htm:br></htm:br>
              <htm:b><htm:i>ECDSA FIPS 186-4 Signature Verification Test</htm:i></htm:b><htm:br></htm:br>
              For each supported NIST curve (i.e., P-256, P-384 and P-521) and SHA function pair, the evaluator shall generate a set of 10 1024-bit message, public key and signature tuples and modify one of the values (message, public key or signature) in five of the 10 tuples. The evaluator shall obtain in response a set of 10 PASS/FAIL values.<htm:br></htm:br>
              <htm:b>RSA Signature Algorithm Tests</htm:b><htm:br></htm:br>
              <htm:b><htm:i>Signature Generation Test</htm:i></htm:b><htm:br></htm:br>
              The evaluator shall verify the implementation of RSA Signature Generation by the TOE using the Signature Generation Test. To conduct this test the evaluator shall generate or obtain 10 messages from a trusted reference implementation for each modulus size/SHA combination supported by the TSF. The evaluator shall have the TOE use their private key and modulus value to sign these messages.<htm:br></htm:br>
              The evaluator shall verify the correctness of the TSF’s signature using a known good implementation and the associated public keys to verify the signatures.<htm:br></htm:br>
              <htm:b><htm:i>Signature Verification Test</htm:i></htm:b><htm:br></htm:br>
              The evaluator shall perform the Signature Verification test to verify the ability of the TOE to recognize another party’s valid and invalid signatures. The evaluator shall inject errors into the test vectors produced during the Signature Verification Test by introducing errors in some of the public keys e, messages, IR format, and/or signatures. The TOE attempts to verify the signatures and returns success or failure.<htm:br></htm:br>
              The evaluator shall use these test vectors to emulate the signature verification test using the corresponding parameters and verify that the TOE detects these errors.<htm:br></htm:br>
           </aactivity>
          </f-element>
        </f-component>       
        <f-component id="FCS_COP.1(4)" name="Cryptographic Operation (Keyed Hash algorithms)" status="threshold">
          <f-element id="FCS_COP.1.1(4)">
            <title>The TSF shall perform [keyed-hash message authentication] in accordance with a specified cryptographic algorithm 
              <selectables>
                <selectable>HMAC-SHA-1</selectable>
                <selectable>HMAC-SHA-256</selectable>
                <selectable>HMAC-SHA-384</selectable>
                <selectable>HMAC-SHA-512</selectable>
              </selectables>
              and cryptographic key sizes 
              <assignable>key size (in bits) used in HMAC</assignable> and message digest sizes 
              <selectables>
                <selectable>160</selectable>
                <selectable>256</selectable>
                <selectable>384</selectable>
                <selectable>512 bits</selectable>
              </selectables>
              that meet the following: 
              [<htm:b><htm:i>FIPS Pub 198-1, "The Keyed-Hash Message Authentication Code, and FIPS Pub 180-4, “Secure Hash Standard</htm:i></htm:b>].
            </title>
            <note role="application">The selection in this requirement must be consistent with the key size specified for the size of the keys used in conjunction with the keyed-hash message authentication.</note>
            <aactivity>
              The evaluator shall examine the TSS to ensure that it specifies the following values used by the HMAC function: key length, hash function used, block size, and output MAC length used.<htm:br></htm:br>
              Assurance Activity Note: The following tests require the developer to provide access to a test platform that provides the evaluator with tools that are typically not found on factory products.<htm:br></htm:br>
              For each of the supported parameter sets, the evaluator shall compose 15 sets of test data. Each set shall consist of a key and message data. The evaluator shall have the TSF generate HMAC tags for these sets of test data. The resulting MAC tags shall be compared to the result of generating HMAC tags with the same key and IV using a known good implementation.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>        
        <f-component id="FCS_RBG_EXT.1" name="Extended: Cryptographic Operation (Random Bit Generation)" status="threshold">
          <f-element id="FCS_RBG_EXT.1.1">
            <title>The TSF shall perform all deterministic random bit generation services in accordance with NIST Special Publication 800-90A using 
              <selectables>
                <selectable>Hash_DRBG (any)</selectable>
                <selectable>HMAC_DRBG (any)</selectable>
                <selectable>CTR_DRBG (AES)</selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FCS_RBG_EXT.1.2">
            <title>The deterministic RBG shall be seeded by an entropy source that accumulates entropy from 
              <selectables>
                <selectable>a software-based noise source</selectable>
                <selectable>a hardware-based noise source</selectable>
                </selectables>
                  with a minimum of
                  <selectables>
                    <selectable>128 bits</selectable>
                    <selectable>192 bits</selectable>
                    <selectable>256 bits</selectable>
                  </selectables> of entropy at least equal to the greatest security strength according to NIST SP 800-57, of the keys and hashes that it will generate.
            </title>
            <note role="application">
              NIST SP 800-90A contains three different methods of generating random numbers; each of these, in turn, depends on underlying cryptographic primitives (hash functions/ciphers). The ST author will select the function used, and include the specific underlying cryptographic primitives used in the requirement. While any of the identified hash functions (SHA-1, SHA-224, SHA-256, SHA-384, SHA-512) are allowed for Hash_DRBG or HMAC_DRBG, only AES-based implementations for CTR_DRBG are allowed.<htm:br></htm:br>
              If the key length for the AES implementation used here is different than that used to encrypt the user data, then FCS_COP.1 may have to be adjusted or iterated to reflect the different key length. For the selection in FCS_RBG_EXT.1.2, the ST author selects the minimum number of bits of entropy that is used to seed the RBG.<htm:br></htm:br>
            </note>
            <aactivity>
              Documentation shall be produced—and the evaluator shall perform the activities—in accordance with Annex E, Entropy Documentation and Assessment.<htm:br></htm:br>
              The evaluator shall also perform the following tests, depending on the standard to which the RBG conforms.<htm:br></htm:br>
              The evaluator shall perform 15 trials for the RBG implementation. If the RBG is configurable, the evaluator shall perform 15 trials for each configuration. The evaluator shall also confirm that the operational guidance contains appropriate instructions for configuring the RBG functionality.<htm:br></htm:br>
              If the RBG has prediction resistance enabled, each trial consists of (1) instantiate drbg, (2) generate the first block of random bits (3) generate a second block of random bits (4) uninstantiate. The evaluator verifies that the second block of random bits is the expected value. The evaluator shall generate eight input values for each trial. The first is a count (0 – 14). The next three are entropy input, nonce, and personalization string for the instantiate operation. The next two are additional input and entropy input for the first call to generate. The final two are additional input and entropy input for the second call to generate. These values are randomly generated. “generate one block of random bits” means to generate random bits with number of returned bits equal to the Output Block Length (as defined in NIST SP 800-90A).<htm:br></htm:br>
              If the RBG does not have prediction resistance, each trial consists of (1) instantiate drbg, (2) generate the first block of random bits (3) reseed, (4) generate a second block of random bits (5) uninstantiate. The evaluator verifies that the second block of random bits is the expected value. The evaluator shall generate eight input values for each trial. The first is a count (0 – 14). The next three are entropy input, nonce, and personalization string for the instantiate operation. The fifth value is additional input to the first call to generate. The sixth and seventh are additional input and entropy input to the call to re-seed. The final value is additional input to the second generate call.<htm:br></htm:br>
              The following paragraphs contain more information on some of the input values to be generated/selected by the evaluator.<htm:br></htm:br>
              <htm:ul>
                <htm:li><htm:i><htm:b>Entropy input:</htm:b></htm:i> the length of the entropy input value must equal the seed length.</htm:li>
                <htm:li><htm:i><htm:b>Nonce:</htm:b></htm:i> If a nonce is supported (CTR_DRBG with no df does not use a nonce), the nonce bit length is one-half the seed length.</htm:li>
                <htm:li><htm:i><htm:b>Personalization string:</htm:b></htm:i> The length of the personalization string must be &#2264; <!--   <= --> seed length. If the implementation only supports one personalization string length, then the same length can be used for both values. If more than one string length is support, the evaluator shall use personalization strings of two different lengths. If the implementation does not use a personalization string, no value needs to be supplied.</htm:li>
                <htm:li><htm:i><htm:b>Additional input:</htm:b></htm:i> the additional input bit lengths have the same defaults and restrictions as the personalization string lengths.</htm:li>
              </htm:ul>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_ENT_EXT.1" name="Extended: Entropy for Virtual Machines" status="threshold">
          <f-element id="FCS_ENT_EXT.1.1">
            <title>The TSF shall provide a mechanism to make available to VMs entropy that meets FCS_RBG_EXT.1 through 
              <selectables>
                <selectable>Hypercall interface</selectable>
                <selectable>virtual device interface</selectable>
                <selectable>passthrough access to hardware entropy source</selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FCS_ENT_EXT.1.2">
            <title>The TSF shall provide independent entropy across multiple VMs.
            </title>
            <note role="application">
            
              This requirement ensures that sufficient entropy is available to any VM that requires it. The entropy need not provide high-quality entropy for every possible method that a VM might acquire it. The VMM must, however, provide some means for VMs to get sufficient entropy. For example, the VMM can provide an interface that returns entropy to a Guest VM. Alternatively, the VMM could provide pass-through access to entropy sources provided by the host platform.<htm:br></htm:br>
              This requirement allows for three general ways of providing entropy to guests: 1) The VS can provide a Hypercall accessible to VM-aware guests, 2) access to a virtualized device that provides entropy, or 3) pass-through access to a hardware entropy source (including a source of random numbers). In all cases, it is possible that the guest is made VM-aware through installation of software or drivers. For the second and third cases, it is possible that the guest could be VM-unaware. There is no requirement that the TOE provide entropy sources as expected by VM-unaware guests. That is, the TOE does not have to anticipate every way a guest might try to acquire entropy as long as it supplies a mechanism that can be used by VM-aware guests, or provides access to a standard mechanism that a VM-unaware guest would use.<htm:br></htm:br>
              The ST author should select “Hypercall interface” if the TSF provides an API function through which guest-resident software can obtain entropy or random numbers. The ST author should select “virtual device interface” if the TSF presents a virtual device interface to the Guest OS through which it can obtain entropy or random numbers. Such an interface could present a virtualized real device, such as a TPM, that can be accessed by VM-unaware guests, or a virtualized fictional device that would require the Guest OS to be VM-aware. The ST author should select “passthrough access to hardware entropy source” if the TSF permits Guest VMs to have direct access to hardware entropy or random number source on the platform. The ST author should select all items that are appropriate.<htm:br></htm:br>
              For FCS_ENT_EXT.1.2, the VMM must ensure that the provision of entropy to one VM cannot affect the quality of entropy provided to another VM on the same platform.<htm:br></htm:br></note>
            <aactivity>The evaluator shall verify that the TSS describes how the TOE provides entropy to Guest VMs, and how to access the interface to acquire entropy or random numbers. The evaluator shall verify that the TSS describes the mechanisms for ensuring that one VM does not affect the entropy acquired by another VM. The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall invoke entropy from each Guest VM. The evaluator shall verify that each VM acquires values from the interface.</test>
                <test>The evaluator shall invoke entropy from multiple VMs as nearly simultaneously as practicable. The evaluator shall verify that the entropy used in one VM is not identical to that invoked from the other VMs.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_HTTPS_EXT.1" name="HTTPS Protocol"  status="sel-based">
          <f-element id="FCS_HTTPS_EXT.1.1">
            <title>The TSF shall implement the HTTPS protocol that complies with RFC 2818.
            </title>
            <note role="application">The ST author must provide enough detail to determine how the implementation is complying with the standard(s) identified; this can be done either by adding elements to this component, or by additional detail in the TSS.</note>
          </f-element>
          <f-element id="FCS_HTTPS_EXT.1.2">
            <title>The TSF shall implement HTTPS using TLS.
            </title>
            <aactivity>The evaluator shall check the TSS to ensure that it is clear on how HTTPS uses TLS to establish an administrative session, focusing on any client authentication required by the TLS protocol vs. security administrator authentication which may be done at a different level of the processing stack. Testing for this activity is done as part of the TLS testing; this may result in additional testing if the TLS tests are done at the TLS protocol level.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_IPSEC_EXT.1" name="IPsec Protocol"  status="sel-based">
          <f-element id="FCS_IPSEC_EXT.1.1">
            <title>The TSF shall implement the IPsec architecture as specified in RFC 4301.
            </title>
            <note role="application">
              RFC 4301 calls for an IPsec implementation to protect IP traffic through the use of a Security Policy Database (SPD). The SPD is used to define how IP packets are to be handled: PROTECT the packet (e.g., encrypt the packet), BYPASS the IPsec services (e.g., no encryption), or DISCARD the packet (e.g., drop the packet). The SPD can be implemented in various ways, including router access control lists, firewall rulesets, a “traditional” SPD, etc. Regardless of the implementation details, there is a notion of a “rule” that a packet is “matched” against and a resulting action that takes place.<htm:br></htm:br>
              While there must be a means to order the rules, a general approach to ordering is not mandated, as long as the SPD can distinguish the IP packets and apply the rules accordingly. There may be multiple SPDs (one for each network interface), but this is not required.</note>
            <aactivity>
              The evaluator shall examine the TSS and determine that it describes what takes place when a packet is processed by the TOE, e.g., the algorithm used to process the packet. The TSS describes how the SPD is implemented and the rules for processing both inbound and outbound packets in terms of the IPsec policy. The TSS describes the rules that are available and the resulting actions available after matching a rule. The TSS describes how those rules and actions form the SPD in terms of the BYPASS (e.g., no encryption), DISCARD (e.g., drop the packet), and PROTECT (e.g., encrypt the packet) actions defined in RFC 4301.<htm:br></htm:br>
              As noted in section 4.4.1 of RFC 4301, the processing of entries in the SPD is non-trivial and the evaluator shall determine that the description in the TSS is sufficient to determine which rules will be applied given the rule structure implemented by the TOE. For example, if the TOE allows specification of ranges, conditional rules, etc., the evaluator shall determine that the description of rule processing (for both inbound and outbound packets) is sufficient to determine the action that will be applied, especially in the case where two different rules may apply. This description shall cover both the initial packets (that is, no SA is established on the interface or for that particular packet) as well as packets that are part of an established SA.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall examine the operational guidance to verify it instructs the Administrator how to construct entries into the SPD that specify a rule for processing a packet. The description includes all three cases – a rule that ensures packets are encrypted/decrypted, dropped, and flow through the TOE without being encrypted. The evaluator shall determine that the description in the operational guidance is consistent with the description in the TSS, and that the level of detail in the operational guidance is sufficient to allow the administrator to set up the SPD in an unambiguous fashion. This includes a discussion of how ordering of rules impacts the processing of an IP packet.<htm:br></htm:br>
              The evaluator uses the operational guidance to configure the TOE to carry out the following tests:<htm:br> </htm:br>
              <testlist>
                <test>The evaluator shall configure the SPD such that there is a rule for dropping a packet, encrypting a packet, and allowing a packet to flow in plaintext. The selectors used in the construction of the rule shall be different such that the evaluator can generate a packet and send packets to the gateway with the appropriate fields (fields that are used by the rule - e.g., the IP addresses, TCP/UDP ports) in the packet header. The evaluator performs both positive and negative test cases for each type of rule (e.g. a packet that matches the rule and another that does not match the rule). The evaluator observes via the audit trail, and packet captures that the TOE exhibited the expected behavior: appropriate packets were dropped, allowed to flow without modification, encrypted by the IPsec implementation.</test>
                <test>The evaluator shall devise several tests that cover a variety of scenarios for packet processing. As with Test 1, the evaluator ensures both positive and negative test cases are constructed. These scenarios shall exercise the range of possibilities for SPD entries and processing modes as outlined in the TSS and operational guidance. Potential areas to cover include rules with overlapping ranges and conflicting entries, inbound and outbound packets, and packets that establish SAs as well as packets that belong to established SAs. The evaluator shall verify, via the audit trail and packet captures, for each scenario that the expected behavior is exhibited, and is consistent with both the TSS and the operational guidance.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.2">
            <title>The TSF shall have a nominal, final entry in the SPD that matches anything that is otherwise unmatched, and discards it.<htm:br></htm:br>
              </title>
            <aactivity>The assurance activity for this element is performed in conjunction with the activities for FCS_IPSEC_EXT.1.1.<htm:br></htm:br>
              The evaluator uses the operational guidance to configure the TOE to carry out the following tests:<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall configure the SPD such that there is a rule for dropping a packet, encrypting a packet, and allowing a packet to flow in plaintext. The evaluator may use the SPD that was created for verification of FCS_IPSEC_EXT.1.1. The evaluator shall construct a network packet that matches the rule to allow the packet to flow in plaintext and send that packet. The evaluator should observe that the network packet is passed to the proper destination interface with no modification. The evaluator shall then modify a field in the packet header; such that it no longer matches the evaluator-created entries (there may be a “TOE/platform created” final entry that discards packets that do not match any previous entries). The evaluator sends the packet, and observes that the packet was dropped.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.3">
            <title>The TSF shall implement transport mode and 
              <selectables>
                <selectable>tunnel mode</selectable>
                <selectable>no other mode</selectable>
              </selectables>
            </title>
            <aactivity>The evaluator checks the TSS to ensure it states that the VPN can be established to operate in tunnel mode and/or transport mode (as identified in FCS_IPSEC_EXT.1.3).
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall confirm that the operational guidance contains instructions on how to configure the connection in each mode selected.<htm:br></htm:br>
              The evaluator shall perform the following test(s) based on the selections chosen:<htm:br></htm:br>
              <testlist>
                <test>(conditional): If tunnel mode is selected, the evaluator uses the operational guidance to configure the TOE/platform to operate in tunnel mode and also configures a VPN peer to operate in tunnel mode. The evaluator configures the TOE/platform and the VPN peer to use any of the allowable cryptographic algorithms, authentication methods, etc. to ensure an allowable SA can be negotiated. The evaluator shall then initiate a connection from the TOE/Platform to the VPN peer. The evaluator observes (for example, in the audit trail and the captured packets) that a successful connection was established using the tunnel mode.</test>
                <test>The evaluator uses the operational guidance to configure the TOE/platform to operate in transport mode and also configures a VPN peer to operate in transport mode. The evaluator configures the TOE/platform and the VPN peer to use any of the allowed cryptographic algorithms, authentication methods, etc. to ensure an allowable SA can be negotiated. The evaluator then initiates a connection from the TOE/platform to connect to the VPN peer. The evaluator observes (for example, in the audit trail and the captured packets) that a successful connection was established using the transport mode.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.4">
            <title>The TSF shall implement the IPsec protocol ESP as defined by RFC 4303 using the cryptographic algorithms AES-CBC-128, AES-CBC-256 (both specified by RFC 3602) and 
              <selectables>
                <selectable>AES-GCM-128 (specified in RFC 4106)</selectable>
                <selectable>AES-GCM-256 (specified in RFC 4106)</selectable>
                <selectable>no other algorithms</selectable>
              </selectables> together with a Secure Hash Algorithm (SHA)-based HMAC.
            </title>
            <aactivity>The evaluator shall examine the TSS to verify that the algorithms AES-CBC-128 and AES-CBC-256 are implemented. If the ST author has selected either AES-GCM-128 or AES-GCM-256 in the requirement, then the evaluator verifies the TSS describes these as well. In addition, the evaluator ensures that the SHA-based HMAC algorithm conforms to the algorithms specified in FCS_COP.1(4) Cryptographic Operations (for keyed-hash message authentication).
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator checks the operational guidance to ensure it provides instructions on how to configure the TOE/platform to use the algorithms, and if either AES-GCM-128 or AES-GCM-256 have been selected the guidance instructs how to use these as well.
              <testlist>
                <test>The evaluator shall configure the TOE/platform as indicated in the operational guidance configuring the TOE/platform to use each of the supported algorithms, attempt to establish a connection using ESP, and verify that the attempt succeeds.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.5">
            <title>The TSF shall implement the protocol: 
              <selectables linebreak="yes">
                <selectable>
                  IKEv1 as defined in RFCs 2407, 2408, 2409, RFC 4109,
                  <selectables>
                    <selectable>no other RFCs for extended sequence numbers</selectable>
                    <selectable>RFC 4304 for extended sequence numbers</selectable>
                  </selectables>, and
                  <selectables>
                    <selectable>no other RFCs for hash functions</selectable>
                    <selectable>RFC 4868 for hash functions</selectable>
                  </selectables>
                </selectable>
                <selectable>
                  IKEv2 as defined in RFC 5996 and
                  <selectables>
                    <selectable>with no support for NAT traversal</selectable>
                    <selectable>with mandatory support for NAT traversal as specified in RFC 5996, section 2.23</selectable>
                  </selectables>, and
                  <selectables>
                    <selectable>no other RFCs for hash functions</selectable>
                    <selectable>RFC 4868 for hash functions</selectable>
                  </selectables>
                </selectable>
              </selectables>.
            </title>
            <note role="application">If the TOE implements SHA-2 hash algorithms for IKEv1 or IKEv2, the ST author shall select RFC 4868. If the ST author selects IKEv1, FCS_IPSEC_EXT.1.15 must also be included in the ST.</note>
            <aactivity>The evaluator shall examine the TSS to verify that IKEv1 and/or IKEv2 are implemented.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall check the operational guidance to ensure it instructs the administrator how to configure the TOE/platform to use IKEv1 and/or IKEv2 (as selected), and uses the guidance to configure the TOE/platform to perform NAT traversal for the following test (if selected).<htm:br></htm:br>
              Tests are performed in conjunction with the other IPsec evaluation activities.
              <testlist>
                <test>(conditional): The evaluator shall configure the TOE/platform so that it will perform NAT traversal processing as described in the TSS and RFC 5996, section 2.23. The evaluator shall initiate an IPsec connection and determine that the NAT is successfully traversed.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.6">
            <title>The TSF shall ensure the encrypted payload in the 
              <selectables>
                <selectable>IKEv1</selectable>
                <selectable>IKEv2</selectable>
              </selectables> protocol uses the cryptographic algorithms AES-CBC-128, AES-CBC-256 as specified in RFC 3602 and 
              <selectables>
                <selectable>AES-GCM-128</selectable>
                <selectable>AES-GCM-256 as specified in RFC 5282</selectable>
                <selectable>no other algorithm</selectable>
              </selectables>.
            </title>
            <note role="application">AES-GCM-128 and AES-GCM-256 may only be selected if IKEv2 is also selected, as there is no RFC defining AES-GCM for IKEv1.</note>
            <aactivity>The evaluator shall ensure the TSS identifies the algorithms used for encrypting the IKEv1 and/or IKEv2 payload, and that the algorithms AES-CBC-128, AES-CBC-256 are specified, and if others are chosen in the selection of the requirement, those are included in the TSS discussion.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator ensures that the operational guidance describes the configuration of the mandated algorithms, as well as any additional algorithms selected in the requirement. The guidance is then used to configure the TOE/platform to perform the following test for each ciphersuite selected.
              <testlist>
                <test>The evaluator shall configure the TOE/platform to use the ciphersuite under test to encrypt the IKEv1 and/or IKEv2 payload and establish a connection with a peer device, which is configured to only accept the payload encrypted using the indicated ciphersuite. The evaluator will confirm the algorithm was that used in the negotiation.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.7">
            <title>The TSF shall ensure that 
              <selectables linebreak="yes">
                <selectable>
                  IKEv1 Phase 1 SA lifetimes can be configured by an Security Administrator based on 
              <selectables linebreak="yes">
                <selectable>number of packets/number of bytes</selectable>
                <selectable>length of time, where the time values can configured within 
                  <assignable>integer range including 24</assignable> hours;</selectable>
              </selectables>
                </selectable>
                <selectable>
                  IKEv2 SA lifetimes can be configured by an Security Administrator based on 
              <selectables linebreak="yes">
                <selectable>number of packets/number of bytes</selectable>
                <selectable>length of time, where the time values can configured within 
                  <assignable>integer range including 24</assignable> hours</selectable>
              </selectables>
                </selectable>
              </selectables>.
            </title>
            <note role="application">The ST author chooses either the IKEv1 requirements or IKEv2 requirements (or both, depending on the selection in FCS_IPSEC_EXT.1.5). The ST author chooses either packet/volume-based lifetimes or time-based lifetimes. This requirement must be accomplished by providing Security Administrator-configurable lifetimes (with appropriate instructions in documents mandated by AGD_OPE). Hardcoded limits are not acceptable. In general, instructions for setting the parameters of the implementation, including lifetime of the SAs, should be included in the operational guidance generated for AGD_OPE.</note>
            <aactivity>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that the values for SA lifetimes can be configured and that the instructions for doing so are located in the operational guidance. If time-based limits are supported, the evaluator ensures that the Administrator is able to configure Phase 1 SA values for 24 hours. Currently there are no values mandated for the number of packets or number of bytes, the evaluator just ensures that this can be configured if selected in the requirement.<htm:br></htm:br>
              When testing this functionality, the evaluator needs to ensure that both sides are configured appropriately. From the RFC “A difference between IKEv1 and IKEv2 is that in IKEv1 SA lifetimes were negotiated. In IKEv2, each end of the SA is responsible for enforcing its own lifetime policy on the SA and rekeying the SA when necessary. If the two ends have different lifetime policies, the end with the shorter lifetime will end up always being the one to request the rekeying. If the two ends have the same lifetime policies, it is possible that both will initiate a rekeying at the same time (which will result in redundant SAs). To reduce the probability of this happening, the timing of rekeying requests SHOULD be jittered.”<htm:br></htm:br>
              Each of the following tests shall be performed for each version of IKE selected in the FCS_IPSEC_EXT.1.5 protocol selection:<htm:br></htm:br>
              <testlist>
                <test>(Conditional): The evaluator shall configure a maximum lifetime in terms of the number of packets (or bytes) allowed following the operational guidance. The evaluator shall configure a test peer with a packet/byte lifetime that exceeds the lifetime of the TOE. The evaluator shall establish an SA between the TOE and the test peer, and determine that once the allowed number of packets (or bytes) through this SA is exceeded, a new SA is negotiated. The evaluator shall verify that the TOE initiates a Phase 1 negotiation.</test>
                <test>(Conditional): The evaluator shall configure a maximum lifetime of 24 hours for the Phase 1 SA following the operational guidance. The evaluator shall configure a test peer with a lifetime that exceeds the lifetime of the TOE. The evaluator shall establish an SA between the TOE and the test peer, maintain the Phase 1 SA for 24 hours, and determine that once 24 hours has elapsed, a new Phase 1 SA is negotiated. The evaluator shall verify that the TOE initiates a Phase 1 negotiation.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.8">
            <title>The TSF shall ensure that 
              <selectables linebreak="yes">
                <selectable>
                  IKEv1 Phase 2 SA lifetimes can be configured by a Security Administrator based on
                  <selectables linebreak="yes">
                    <selectable>number of packets/number of bytes</selectable>
                    <selectable>length of time, where the time values can be configured within 
                      <assignable>integer range including 8</assignable> hours</selectable>
              </selectables>
                </selectable>
                <selectable>
                  IKEv2 Child SA lifetimes can be configured by a Security Administrator based on 
              <selectables linebreak="yes">
                <selectable>number of packets/number of bytes</selectable>
                <selectable>length of time, where the time values can be configured within 
                  <assignable>integer range including 8</assignable> hours</selectable>
              </selectables>
                </selectable>
              </selectables>.
            </title>
            <note role="application">The ST author chooses either the IKEv1 requirements or IKEv2 requirements (or both, depending on the selection in FCS_IPSEC_EXT.1.5). The ST author chooses either packet/volume-based lifetimes or time-based lifetimes. This requirement must be accomplished by providing Security Administrator-configurable lifetimes (with appropriate instructions in documents mandated by AGD_OPE). Hardcoded limits are not acceptable. In general, instructions for setting the parameters of the implementation, including lifetime of the SAs, should be included in the operational guidance generated for AGD_OPE.</note>
            <aactivity>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that the values for SA lifetimes can be configured and that the instructions for doing so are located in the operational guidance. If time-based limits are supported, the evaluator ensures that the Administrator is able to configure Phase 2 SA values for 8 hours. Currently there are no values mandated for the number of packets or number of bytes, the evaluator just ensures that this can be configured if selected in the requirement.<htm:br></htm:br>
              When testing this functionality, the evaluator needs to ensure that both sides are configured appropriately. From the RFC “A difference between IKEv1 and IKEv2 is that in IKEv1 SA lifetimes were negotiated. In IKEv2, each end of the SA is responsible for enforcing its own lifetime policy on the SA and rekeying the SA when necessary. If the two ends have different lifetime policies, the end with the shorter lifetime will end up always being the one to request the rekeying. If the two ends have the same lifetime policies, it is possible that both will initiate a rekeying at the same time (which will result in redundant SAs). To reduce the probability of this happening, the timing of rekeying requests SHOULD be jittered.”
              Each of the following tests shall be performed for each version of IKE selected in the FCS_IPSEC_EXT.1.5 protocol selection:<htm:br></htm:br>
              <testlist>
               <test>(Conditional): The evaluator shall configure a maximum lifetime in terms of the number of packets (or bytes) allowed following the operational guidance. The evaluator shall configure a test peer with a packet/byte lifetime that exceeds the lifetime of the TOE. The evaluator shall establish an SA between the TOE and the test peer, and determine that once the allowed number of packets (or bytes) through this SA is exceeded, a new SA is negotiated. The evaluator shall verify that the TOE initiates a Phase 2 negotiation.</test>
                <test>(Conditional): The evaluator shall configure a maximum lifetime of 8 hours for the Phase 2 SA following the operational guidance. The evaluator shall configure a test peer with a lifetime that exceeds the lifetime of the TOE. The evaluator shall establish an SA between the TOE and the test peer, maintain the Phase 1 SA for 8 hours, and determine that once 8 hours has elapsed, a new Phase 2 SA is negotiated. The evaluator shall verify that the TOE initiates a Phase 2 negotiation.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.9">
            <title>The TSF shall generate the secret value x used in the IKE Diffie-Hellman key exchange (“x” in g^x mod p) using the random bit generator specified in FCS_RBG_EXT.1, and having a length of at least 
              <assignable>(one or more) number(s) of bits that is at least twice the security strength of the negotiated Diffie-Hellman group</assignable> bits.
            </title>
            <note role="application">
              For DH groups 19 and 20, the "x" value is the point multiplier for the generator point G.<htm:br></htm:br>
              Since the implementation may allow different Diffie-Hellman groups to be negotiated for use in forming the SAs, the assignment in FCS_IPSEC_EXT.1. may contain multiple values. For each DH group supported, the ST author consults Table 2 in NIST SP 800-57 “Recommendation for Key Management –Part 1: General” to determine the security strength (“bits of security”) associated with the DH group. Each unique value is then used to fill in the assignment. For example, suppose the implementation supports DH group 14 (2048-bit MODP) and group 20 (ECDH using NIST curve P-384). From Table 2, the bits of security value for group 14 is 112, and for group 20 it is 192.
            </note>
            <aactivity>The evaluator shall check to ensure that, for each DH group supported, the TSS describes the process for generating "x" (as defined in FCS_IPSEC_EXT.1.). The evaluator shall verify that the TSS indicates that the random number generated that meets the requirements in this PP is used, and that the length of "x" meets the stipulations in the requirement.
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.10">
            <title>The TSF shall generate nonces used in 
              <selectables>
                <selectable>IKEv1</selectable>
                <selectable>IKEv2</selectable>
              </selectables> exchanges of length 
              <selectables linebreak="yes">
                <selectable><assignable>security strength associated with the negotiated Diffie-Hellman group</assignable></selectable>
                <selectable>at least 128 bits in size and at least half the output size of the negotiated pseudorandom function (PRF) hash</selectable>
              </selectables> .
            </title>
            <note role="application">
              The ST author must select the second option for nonce lengths if IKEv2 is also selected (as this is mandated in RFC 5996). The ST author may select either option for IKEv1.<htm:br></htm:br>
              For the first option for nonce lengths, since the implementation may allow different Diffie-Hellman groups to be negotiated for use in forming the SAs, the assignment in FCS_IPSEC_EXT.1. may contain multiple values. For each DH group supported, the ST author consults Table 2 in NIST SP 800-57 “Recommendation for Key Management –Part 1: General” to determine the security strength (“bits of security”) associated with the DH group. Each unique value is then used to fill in the assignment. For example, suppose the implementation supports DH group 14 (2048-bit MODP) and group 20 (ECDH using NIST curve P-384). From Table 2, the bits of security value for group 14 is 112, and for group 20 it is 192.<htm:br></htm:br>
              Because nonces may be exchanged before the DH group is negotiated, the nonce used should be large enough to support all TOE-chosen proposals in the exchange.
            </note>
            <aactivity>
              <testlist>
                <test>(conditional) If the first selection is chosen, the evaluator shall check to ensure that, for each DH group supported, the TSS describes the process for generating each nonce. The evaluator shall verify that the TSS indicates that the random number generated that meets the requirements in this PP is used, and that the length of the nonces meet the stipulations in the requirement.</test>
                <test>(conditional) If the second selection is chosen, the evaluator shall check to ensure that, for each PRF hash supported, the TSS describes the process for generating each nonce. The evaluator shall verify that the TSS indicates that the random number generated that meets the requirements in this PP is used, and that the length of the nonces meet the stipulations in the requirement.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.11">
            <title>The TSF shall ensure that all IKE protocols implement DH Groups 14 (2048-bit MODP), and 
              <selectables>
                <selectable>19 (256-bit Random ECP)</selectable>
                <selectable>5 (1536-bit MODP)</selectable>
                <selectable>24 (2048-bit MODP with 256-bit POS)</selectable>
                <selectable>20 (384-bit Random ECP)</selectable>
                <selectable>no other DH groups</selectable>
              </selectables>.
            </title>
            <note role="application"> </note>
            <aactivity>The selection is used to specify additional DH groups supported. This applies to IKEv1 and IKEv2 exchanges. It should be noted that if any additional DH groups are specified, they must comply with the requirements (in terms of the ephemeral keys that are established) listed in FCS_CKM.1.
              <testlist>
                <test>For each supported DH group, the evaluator shall test to ensure that all supported IKE protocols can be successfully completed using that particular DH group.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.12">
            <title>The TSF shall be able to ensure by default that the strength of the symmetric algorithm (in terms of the number of bits in the key) negotiated to protect the 
              <selectables>
                <selectable>IKEv1 Phase 1</selectable>
                <selectable>IKEv2 IKE_SA</selectable>
              </selectables> connection is greater than or equal to the strength of the symmetric algorithm (in terms of the number of bits in the key) negotiated to protect the 
              <selectables>
                <selectable>IKEv1 Phase 2</selectable>
                <selectable>IKEv2 CHILD_SA</selectable>
              </selectables> connection.
            </title>
            <note role="application">The ST author chooses either or both of the IKE selections based on what is implemented by the TOE. Obviously, the IKE version(s) chosen should be consistent not only in this element, but with other choices for other elements in this component. While it is acceptable for this capability to be configurable, the default configuration in the evaluated configuration (either "out of the box" or by configuration guidance in the AGD documentation) must enable this functionality.</note>
            <aactivity>The evaluator shall check that the TSS describes the potential strengths (in terms of the number of bits in the symmetric key) of the algorithms that are allowed for the IKE and ESP exchanges. The TSS shall also describe the checks that are done when negotiating IKEv1 Phase 2 and/or IKEv2 CHILD_SA suites to ensure that the strength (in terms of the number of bits of key in the symmetric algorithm) of the negotiated algorithm is less than or equal to that of the IKE SA this is protecting the negotiation.
              <testlist>The evaluator simply follows the guidance to configure the TOE/platform to perform the following tests.
                <test>This test shall be performed for each version of IKE supported. The evaluator shall successfully negotiate an IPsec connection using each of the supported algorithms and hash functions identified in the requirements.</test>
                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an SA for ESP that selects an encryption algorithm with more strength than that being used for the IKE SA (i.e., symmetric algorithm with a key size larger than that being used for the IKE SA). Such attempts should fail.</test>
                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an IKE SA using an algorithm that is not one of the supported algorithms and hash functions identified in the requirements. Such an attempt should fail.</test>
                <test>This test shall be performed for each version of IKE supported. The evaluator shall attempt to establish an SA for ESP (assumes the proper parameters where used to establish the IKE SA) that selects an encryption algorithm that is not identified in FCS_IPSEC_EXT.1.4. Such an attempt should fail.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.13">
            <title>The TSF shall ensure that all IKE protocols perform peer authentication using a 
              <selectables>
                <selectable>RSA</selectable>
                <selectable>ECDSA</selectable>
              </selectables> that use X.509v3 certificates that conform to RFC 4945 and 
              <selectables>
                <selectable>Pre-shared Keys</selectable>
                <selectable>no other method</selectable>
              </selectables>.
            </title>
            <note role="application">At least one public-key-based Peer Authentication method is required in order to conform to this PP; one or more of the public key schemes is chosen by the ST author to reflect what is implemented. The ST author also ensures that appropriate FCS requirements reflecting the algorithms used (and key generation capabilities, if provided) are listed to support those methods. Note that the TSS will elaborate on the way in which these algorithms are to be used (for example, 2409 specifies three authentication methods using public keys; each one supported will be described in the TSS).</note>
            <aactivity>
              The evaluator ensures that the TSS identifies RSA and/or ECDSA as being used to perform peer authentication. The description shall be consistent with the algorithms as specified in FCS_COP.1(2) Cryptographic Operations (for cryptographic signature).<htm:br></htm:br>
              If pre-shared keys are chosen in the selection, the evaluator shall check to ensure that the TSS describes how pre-shared keys are established and used in authentication of IPsec connections. The evaluator shall check that the operational guidance describes how pre-shared keys are to be generated and established. The description in the TSS and the operational guidance shall also indicate how pre-shared key establishment is accomplished for TOEs that can generate a pre-shared key as well as TOEs that simply use a pre-shared key.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator ensures the operational guidance describes how to set up the TOE to use certificates with RSA and/or ECDSA signatures and public keys.<htm:br></htm:br>
              In order to construct the environment and configure the TOE for the following tests, the evaluator will ensure that the operational guidance describes how to configure the TOE to connect to a trusted CA, and ensure a valid certificate for that CA is loaded into the TOE and marked “trusted”.<htm:br></htm:br>
              For efficiency sake, the testing that is performed may be combined with the testing for FIA_X509_EXT.1, FIA_X509_EXT.2 (for IPsec connections), and FCS_IPSEC_EXT.1.1. The following tests shall be repeated for each peer authentication selected in the FCS_IPSEC_EXT.1.1 selection above:
              <testlist>
                <test>The evaluator shall configure the TOE to use a private key and associated certificate signed by a trusted CA and shall establish an IPsec connection with the peer.</test>
                <test>[conditional]: The evaluator shall generate a pre-shared key off-TOE and use it, as indicated in the operational guidance, to establish an IPsec connection with the peer.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.14">
            <title>The TSF shall establish a trusted channel only to peers with valid certificates.
            </title>
            <note role="application">Supported peer certificate algorithms are the same as FCS_IPSEC_EXT.1.1.</note>
            <aactivity>The evaluator shall verify that the TSS describes how the DN in the certificate is compared to the expected DN.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall ensure that the operational guidance includes configuration of the expected DN for the connection.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall, if necessary, configure the expected DN according to the operational guidance. The evaluator shall send a peer certificate signed by a trusted CA with a DN that does not match an expected DN and verify that the TOE denies the connection.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_IPSEC_EXT.1.15">
            <title>(selection-based) The TSF shall ensure that IKEv1 Phase 1 exchanges use only main mode.
            </title>
            <note role="application">FCS_IPSEC_EXT.1.15 is applicable only if IKEv1 is selected in FCS_IPSEC_EXT.1.5.</note>
            <aactivity>The evaluator shall examine the TSS to ensure that, in the description of the IPsec protocol, it states that aggressive mode is not used for IKEv1 Phase 1 exchanges, and that only main mode is used. It may be that this is a configurable option.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              If the mode requires configuration of the TOE/platform prior to its operation, the evaluator shall check the operational guidance to ensure that instructions for this configuration are contained within that guidance.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall configure the TOE/platform as indicated in the operational guidance, and attempt to establish a connection using an IKEv1 Phase 1 connection in aggressive mode. This attempt should fail. The evaluator should then show that main mode exchanges are supported.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_SSHC_EXT.1" name="SSH Client Protocol" status="sel-based">
        <f-element id="FCS_SSHC_EXT.1.1">
          <title>The TSF shall implement the SSH protocol that complies with RFCs 4251, 4252, 4253, 4254, and 
            <selectables>
              <selectable>5647</selectable>
              <selectable>5656</selectable>
              <selectable>6187</selectable>
              <selectable>6668</selectable>
              <selectable>no other RFCs</selectable>
              </selectables>.</title>
          <note role="application">The ST author selects which of the additional RFCs to which conformance is being claimed. Note that these need to be consistent with selections in later elements of this component (e.g., cryptographic algorithms permitted). RFC 4253 indicates that certain cryptographic algorithms are “REQUIRED”. This means that the implementation must include support, not that the algorithms must be enabled for use. Ensuring that algorithms indicated as “REQUIRED” but not listed in the later elements of this component are implemented is out of scope of the assurance activity for this requirement.</note>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.2">
          <title>The TSF shall ensure that the SSH protocol implementation supports the following authentication methods as described in RFC 4252: public key-based, password-based.</title>
          <aactivity>
            The evaluator shall check to ensure that the TSS contains a description of the public key algorithms that are acceptable for use for authentication, that this list conforms to FCS_SSHC_EXT.1.5, and ensure that password-based authentication methods are also allowed.<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall, for each public key algorithm supported, show that the TOE supports the use of that public key algorithm to authenticate a user connection to an SSH server. Any configuration activities required to support this test shall be performed according to instructions in the operational guidance.</test>
              <test>Using the operational guidance, the evaluator shall configure the TOE to perform password-based authentication to an SSH server, and demonstrate that a user can be successfully authenticated by the TOE to an SSH server using a password as an authenticator.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.3">
          <title>The TSF shall ensure that, as described in RFC 4253, packets greater than 
            <assignable>number of bytes</assignable> bytes in an SSH transport connection are dropped.</title>
          <note role="application">RFC 4253 provides for the acceptance of “large packets” with the caveat that the packets should be of “reasonable length” or dropped. The assignment should be filled in by the ST author with the maximum packet size accepted, thus defining “reasonable length” for the TOE.</note>
          <aactivity>The evaluator shall check that the TSS describes how “large packets” in terms of RFC 4253 are detected and handled.<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall demonstrate that if the TOE receives a packet larger than that specified in this component, that packet is dropped.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.4">
          <title>The TSF shall ensure that the SSH transport implementation uses the following encryption algorithms and rejects all other encryption algorithms: aes128-cbc, aes256-cbc, 
            <selectables>
              <selectable>AEAD_AES_128_GCM</selectable>
              <selectable>AEAD_AES_256_GCM</selectable>
              <selectable>no other algorithms</selectable>
              </selectables>.</title>
          <note role="application">RFC 5647 specifies the use of the AEAD_AES_128_GCM and AEAD_AES_256_GCM algorithms in SSH. As described in RFC 5647, AEAD_AES_128_GCM and AEAD_AES_256_GCM can only be chosen as encryption algorithms when the same algorithm is being used as the MAC algorithm. In the assignment, the ST author can select the AES-GCM algorithms, or "no other algorithms" if AES-GCM is not supported. If AES-GCM is selected, there should be corresponding FCS_COP entries in the ST.</note>
          <aactivity>The evaluator shall check the description of the implementation of this protocol in the TSS to ensure that optional characteristics are specified, and the encryption algorithms supported are specified as well. The evaluator shall check the TSS to ensure that the encryption algorithms specified are identical to those listed for this component.<htm:br></htm:br>
            <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
            The evaluator shall also check the operational guidance to ensure that it contains instructions on configuring the TOE so that SSH conforms to the description in the TSS (for instance, the set of algorithms advertised by the TOE may have to be restricted to meet the requirements).<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall establish a SSH connection using each of the encryption algorithms specified by the requirement. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
              <test>The evaluator shall configure an SSH server to only allow the 3des-cbc encryption algorithm and no other encryption algorithms. The evaluator shall attempt to establish an SSH connection from the TOE to the SSH server and observe that the connection is rejected.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.5">
          <title>The TSF shall ensure that the SSH transport implementation uses 
            <selectables>
              <selectable>ssh-rsa</selectable>
              <selectable>ecdsa-sha2-nistp256</selectable>
              </selectables> and 
            <selectables>
              <selectable>ecdsa-sha2-nistp384</selectable>
              <selectable>x509v3-ecdsa-sha2-nistp256</selectable>
              <selectable>x509v3-ecdsa-sha2-nistp384</selectable>
              <selectable>no other public key algorithms</selectable>
              </selectables> as its public key algorithm(s) and rejects all other public key algorithms.</title>
          <note role="application">Implementations that select only ssh-rsa will not achieve the 112-bit security strength in the digital signature generation for SSH authentication as is recommended in NIST SP 800-131A. Future versions of this profile may remove ssh-rsa as a selection. If x509v3-ecdsa-sha2-nistp256 or x509v3-ecdsa-sha2-nistp384 are selected, then the list of trusted certification authorities must be selected in FCS_SSHC_EXT.1.9.</note>
          <aactivity>The evaluator shall check the description of the implementation of this protocol in the TSS to ensure that optional characteristics are specified, and the public key algorithms supported are specified as well. The evaluator shall check the TSS to ensure that the public key algorithms specified are identical to those listed for this component.<htm:br></htm:br>
            <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
            The evaluator shall also check the operational guidance to ensure that it contains instructions on configuring the TOE so that SSH conforms to the description in the TSS (for instance, the set of algorithms advertised by the TOE may have to be restricted to meet the requirements).<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall establish a SSH connection using each of the public key algorithms specified by the requirement to authenticate an SSH server to the TOE. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
              <test>The evaluator shall configure an SSH server to only allow the ssh-dsa public key algorithm and no other public key algorithms. The evaluator shall attempt to establish an SSH connection from the TOE to the SSH server and observe that the connection is rejected.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.6">
          <title>The TSF shall ensure that the SSH transport implementation uses 
            <selectables>
              <selectable>hmac-sha1</selectable>
              <selectable>hmac-sha1-96</selectable>
              <selectable>hmac-sha2-256</selectable>
              <selectable>hmac-sha2-512</selectable>
              </selectables> and 
            <selectables>
              <selectable>AEAD_AES_128_GCM</selectable>
              <selectable>AEAD_AES_256_GCM</selectable>
              <selectable>no other MAC algorithms</selectable>
              </selectables> as its data integrity MAC algorithm(s) and rejects all other MAC algorithm(s).</title>
          <note role="application">RFC 5647 specifies the use of the AEAD_AES_128_GCM and AEAD_AES_256_GCM algorithms in SSH. As described in RFC 5647, AEAD_AES_128_GCM and AEAD_AES_256_GCM can only be chosen as MAC algorithms when the same algorithm is being used as the encryption algorithm. RFC 6668 specifies the use of the sha2 algorithms in SSH.</note>
          <aactivity>The evaluator shall check the TSS to ensure that it lists the supported data integrity algorithms, and that that list corresponds to the list in this component.<htm:br></htm:br>
            <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
            The evaluator shall also check the operational guidance to ensure that it contains instructions to the administrator on how to ensure that only the allowed data integrity algorithms are used in SSH connections with the TOE (specifically, that the “none” MAC algorithm is not allowed).<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall establish a SSH connection using each of the integrity algorithms specified by the requirement. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
              <test>The evaluator shall configure an SSH server to only allow the “none” MAC algorithm. The evaluator shall attempt to connect from the TOE to the SSH server and observe that the attempt fails.</test>
              <test>The evaluator shall configure an SSH server to only allow the hmac-md5 MAC algorithm. The evaluator shall attempt to connect from the TOE to the SSH server and observe that the attempt fails.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.7">
          <title>The evaluator shall configure an SSH server to only allow the hmac-md5 MAC algorithm. The evaluator shall attempt to connect from the TOE to the SSH server and observe that the attempt fails.</title>
          <aactivity>The evaluator shall check the TSS to ensure that it lists the supported key exchange algorithms, and that that list corresponds to the list in this component.<htm:br></htm:br>
            <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
            The evaluator shall also check the operational guidance to ensure that it contains instructions to the administrator on how to ensure that only the allowed key exchange algorithms are used in SSH connections with the TOE.<htm:br></htm:br>
            <testlist>
              <test>The evaluator shall configure an SSH server to only allow the diffie-hellman-group1-sha1 key exchange. The evaluator shall attempt to connect from the TOE to the SSH server and observe that the attempt fails.</test>
              <test>The evaluator shall configure an SSH server to permit all allowed key exchange methods. The evaluator shall attempt to connect from the TOE to the SSH server using each allowed key exchange method, and observe that each attempt succeeds.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.8">
          <title>The TSF shall ensure that the SSH connection be rekeyed after no more than 2^28 packets have been transmitted using that key.</title>
          <aactivity>
            <testlist>
              <test>The evaluator shall configure the TOE to create a log entry when a rekey occurs. The evaluator shall connect to the TOE with an SSH client and cause 2^28 packets to be transmitted from the client to the TOE, and subsequently review the audit log to ensure that a rekey occurred.</test>
            </testlist>
          </aactivity>
        </f-element>
        <f-element id="FCS_SSHC_EXT.1.9">
          <title>The TSF shall ensure that the SSH client authenticates the identity of the SSH server using a local database associating each host name with its corresponding public key or
            <selectables >
              <selectable>a list of trusted certification authorities</selectable>
              <selectable>no other methods</selectable>
              </selectables> as described in RFC 4251 section 4.1.</title>
          <note role="application">The list of trusted certification authorities can only be selected if x509v3-ecdsa-sha2-nistp256 or x509v3-ecdsa-sha2-nistp384 are selected in FCS_SSHC_EXT.1.5.</note>
          <aactivity>
            <testlist>
              <test>The evaluator shall delete all entries in the TOE’s list of recognized SSH server host keys and, if selected, all entries in the TOE’s list of trusted certification authorities. The evaluator shall initiate a connection from the TOE to an SSH server. The evaluator shall ensure that the TOE either rejects the connection or displays the SSH server’s public key (either the key bytes themselves or a hash of the key using any allowed hash algorithm) and prompts the user to accept or deny the key before continuing the connection.</test>
              <test>The evaluator shall add an entry associating a host name with a public key into the TOE’s local database. The evaluator shall replace, on the corresponding SSH server, the server’s host key with a different host key. The evaluator shall initiate a connection from the TOE to the SSH server using password-based authentication, shall ensure that the TOE rejects the connection, and shall ensure that the password was not transmitted to the SSH server (for example, by instrumenting the SSH server with a debugging capability to output received passwords).</test>
            </testlist>
          </aactivity>
        </f-element>
        </f-component>
        <f-component id="FCS_SSHS_EXT.1" name="SSH Server Protocol" status="sel-based">
          <f-element id="FCS_SSHS_EXT.1.1">
            <title> The TSF shall implement the SSH protocol that complies with RFCs 4251, 4252, 4253, 4254, and 
              <selectables>
                <selectable>5647</selectable>
                <selectable>5656</selectable>
                <selectable>6187</selectable>
                <selectable>6668</selectable>
                <selectable>no other RFCs</selectable>
              </selectables>.</title>
            <note role="application">The ST author selects which of the additional RFCs to which conformance is being claimed. Note that these need to be consistent with selections in later elements of this component (e.g., cryptographic algorithms permitted). RFC 4253 indicates that certain cryptographic algorithms are “REQUIRED”. This means that the implementation must include support, not that the algorithms must be enabled for use. Ensuring that algorithms indicated as “REQUIRED” but not listed in the later elements of this component are implemented is out of scope of the assurance activity for this requirement.</note>  
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.2">
            <title>The TSF shall ensure that the SSH protocol implementation supports the following authentication methods as described in RFC 4252: public key-based, password-based.</title>
            <aactivity>The evaluator shall check to ensure that the TSS contains a description of the public key algorithms that are acceptable for use for authentication, that this list conforms to FCS_SSHS_EXT.1.5, and ensure that password-based authentication methods are also allowed.
              <testlist>
                <test>The evaluator shall, for each public key algorithm supported, show that the TOE supports the use of that public key algorithm to authenticate a user connection. Any configuration activities required to support this test shall be performed according to instructions in the operational guidance.</test>
                <test>The evaluator shall choose one public key algorithm supported by the TOE. The evaluator shall generate a new key pair for that algorithm without configuring the TOE to recognize the public key for authentication. The evaluator shall use an SSH client to attempt to connect to the TOE with the new key pair and demonstrate that authentication fails.</test>
                <test>Using the operational guidance, the evaluator shall configure the TOE to accept password-based authentication, and demonstrate that a user can be successfully authenticated to the TOE over SSH using a password as an authenticator.</test>
                <test>The evaluator shall use an SSH client, enter an incorrect password to attempt to authenticate to the TOE, and demonstrate that the authentication fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.3">
            <title>The TSF shall ensure that, as described in RFC 4253, packets greater than 
              <assignable>number of bytes</assignable> bytes in an SSH transport connection are dropped.</title>
            <note role="application">RFC 4253 provides for the acceptance of “large packets” with the caveat that the packets should be of “reasonable length” or dropped. The assignment should be filled in by the ST author with the maximum packet size accepted, thus defining “reasonable length” for the TOE.</note>
            <aactivity>The evaluator shall check that the TSS describes how “large packets” in terms of RFC 4253 are detected and handled.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall demonstrate that if the TOE receives a packet larger than that specified in this component, that packet is dropped.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.4">
            <title>The TSF shall ensure that the SSH transport implementation uses the following encryption algorithms and rejects all other encryption algorithms: aes128-cbc, aes256-cbc, 
              <selectables>
                <selectable>AEAD_AES_128_GCM</selectable>
                <selectable>AEAD_AES_256_GCM</selectable>
                <selectable>no other algorithms</selectable>
              </selectables>.</title>
            <note role="application">RFC 5647 specifies the use of the AEAD_AES_128_GCM and AEAD_AES_256_GCM algorithms in SSH. As described in RFC 5647, AEAD_AES_128_GCM and AEAD_AES_256_GCM can only be chosen as encryption algorithms when the same algorithm is being used as the MAC algorithm. In the assignment, the ST author can select the AES-GCM algorithms, or "no other algorithms" if AES-GCM is not supported. If AES-GCM is selected, there should be corresponding FCS_COP entries in the ST.</note>
            <aactivity>The evaluator shall check the description of the implementation of this protocol in the TSS to ensure that optional characteristics are specified, and the encryption algorithms supported are specified as well. The evaluator shall check the TSS to ensure that the encryption algorithms specified are identical to those listed for this component.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall also check the operational guidance to ensure that it contains instructions on configuring the TOE so that SSH conforms to the description in the TSS (for instance, the set of algorithms advertised by the TOE may have to be restricted to meet the requirements).<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall establish a SSH connection using each of the encryption algorithms specified by the requirement. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
                <test>The evaluator shall configure an SSH client to only allow the 3des-cbc encryption algorithm and no other encryption algorithms. The evaluator shall attempt to establish an SSH connection from the SSH client to the TOE and observe that the connection is rejected.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.5">
            <title>The TSF shall ensure that the SSH transport implementation uses 
              linebreak="yes"<selectables>
                <selectable>ssh-rsa</selectable>
                <selectable>ecdsa-sha2-nistp256</selectable>
              </selectables>  and 
              <selectables>
                <selectable>ecdsa-sha2-nistp384</selectable>
                <selectable>x509v3-ecdsa-sha2-nistp256</selectable>
                <selectable>x509v3-ecdsa-sha2-nistp384</selectable>
                <selectable>no other public key algorithms</selectable>
              </selectables> as its public key algorithm(s) and rejects all other public key algorithms.</title>
            <note role="application">Implementations that select only ssh-rsa will not achieve the 112-bit security strength in the digital signature generation for SSH authentication as is recommended in NIST SP 800-131A. Future versions of this profile may remove ssh-rsa as a selection.</note>
            <aactivity>The evaluator shall check the description of the implementation of this protocol in the TSS to ensure that optional characteristics are specified, and the public key algorithms supported are specified as well. The evaluator shall check the TSS to ensure that the public key algorithms specified are identical to those listed for this component.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall also check the operational guidance to ensure that it contains instructions on configuring the TOE so that SSH conforms to the description in the TSS (for instance, the set of algorithms advertised by the TOE may have to be restricted to meet the requirements).<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall establish a SSH connection using each of the public key algorithms specified by the requirement to authenticate the TOE to an SSH client. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
                <test>The evaluator shall configure an SSH client to only allow the ssh-dsa public key algorithm and no other public key algorithms. The evaluator shall attempt to establish an SSH connection from the SSH client to the TOE and observe that the connection is rejected.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.6">
            <title>The TSF shall ensure that the SSH transport implementation uses 
              <selectables>
                <selectable>hmac-sha1</selectable>
                <selectable>hmac-sha1-96</selectable>
                <selectable>hmac-sha2-256</selectable>
                <selectable>hmac-sha2-512</selectable>
              </selectables> and 
              <selectables>
                <selectable>AEAD_AES_128_GCM</selectable>
                <selectable>AEAD_AES_256_GCM</selectable>
                <selectable>no other MAC algorithms</selectable>
              </selectables> as its MAC algorithm(s) and rejects all other MAC algorithm(s).</title>
            <note role="application">RFC 5647 specifies the use of the AEAD_AES_128_GCM and AEAD_AES_256_GCM algorithms in SSH. As described in RFC 5647, AEAD_AES_128_GCM and AEAD_AES_256_GCM can only be chosen as MAC algorithms when the same algorithm is being used as the encryption algorithm. RFC 6668 specifies the use of the sha2 algorithms in SSH.</note>
            <aactivity>The evaluator shall check the TSS to ensure that it lists the supported data integrity algorithms, and that that list corresponds to the list in this component.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall also check the operational guidance to ensure that it contains instructions to the administrator on how to ensure that only the allowed data integrity algorithms are used in SSH connections with the TOE (specifically, that the “none” MAC algorithm is not allowed).<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall establish a SSH connection using each of the integrity algorithms specified by the requirement. It is sufficient to observe (on the wire) the successful negotiation of the algorithm to satisfy the intent of the test.</test>
                <test>The evaluator shall configure an SSH client to only allow the “none” MAC algorithm. The evaluator shall attempt to connect from the SSH client to the TOE and observe that the attempt fails.</test>
                <test>The evaluator shall configure an SSH client to only allow the hmac-md5 MAC algorithm. The evaluator shall attempt to connect from the SSH client to the TOE and observe that the attempt fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.7">
            <title>The TSF shall ensure that 
              <selectables>
                <selectable>diffie-hellman-group14-sha1</selectable>
                <selectable>ecdh-sha2-nistp256</selectable>
              </selectables> and 
              <selectables>
                <selectable>ecdh-sha2-nistp384</selectable>
                <selectable>ecdh-sha2-nistp521</selectable>
                <selectable>no other methods</selectable>
              </selectables> are the only allowed key exchange methods used for the SSH protocol.</title>
            <aactivity>The evaluator shall check the TSS to ensure that it lists the supported key exchange algorithms, and that that list corresponds to the list in this component.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall also check the operational guidance to ensure that it contains instructions to the administrator on how to ensure that only the allowed key exchange algorithms are used in SSH connections with the TOE.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall configure an SSH client to only allow the diffie-hellman-group1-sha1 key exchange. The evaluator shall attempt to connect from the SSH client to the TOE and observe that the attempt fails.</test>
                <test>For each allowed key exchange method, the evaluator shall configure an SSH client to only allow that method for key exchange, attempt to connect from the client to the TOE, and observe that the attempt succeeds.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_SSHS_EXT.1.8">
            <title>The TSF shall ensure that the SSH connection be rekeyed after no more than 2^28 packets have been transmitted using that key.</title>
            <aactivity>
              <testlist>
                <test>The evaluator shall configure the TOE to create a log entry when a rekey occurs. The evaluator shall connect to the TOE with an SSH client and cause 2^28 packets to be transmitted from the client to the TOE, and subsequently review the audit log to ensure that a rekey occurred.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
        <f-component id="FCS_TLSC_EXT.1 TLS" name="Client Protocol" status="sel-based">
          <f-element id="FCS_TLSC_EXT.1.1">
            <title>The TSF shall implement 
              <selectables>
                <selectable>TLS 1.2 (RFC 5246)</selectable>
                <selectable>TLS 1.1 (RFC 4346)</selectable>
              </selectables> supporting the following ciphersuites: 
              <ul>
                <li>Mandatory Ciphersuites:<htm:br></htm:br>
                    <ul>
                      <li>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 3268</li>
                    </ul>
                </li>
                <li>
                  Optional Ciphersuites:<htm:br></htm:br>
                  <selectables linebreak="yes">
                    <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 3268</selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 3268</selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 3268</selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA as defined in RFC 4492</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA as defined in RFC 4492</selectable>
                    <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246</selectable>
                    <selectable>TLS_RSA_WITH_AES_256_CBC_ SHA256 as defined in RFC 5246</selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_ SHA256 as defined in RFC 5246</selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_ SHA256 as defined in RFC 5246</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289</selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289</selectable>
                    <selectable>no other ciphersuite</selectable>
                  </selectables>.
                </li>
              </ul>
            </title>
            <note role="application">
              The ciphersuites to be tested in the evaluated configuration are limited by this requirement. The ST author should select the optional ciphersuites that are supported; if there are no ciphersuites supported other than the mandatory suites, then “None” should be selected. It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. The Suite B algorithms listed above (RFC 6460) are the preferred algorithms for implementation. TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.<htm:br></htm:br>
              These requirements will be revisited as new TLS versions are standardized by the IETF.<htm:br></htm:br>
              If any ciphersuites are selected using ECDHE, then FCS_TLSC_EXT.1.5 is required.<htm:br></htm:br>
              In a future version of this PP TLS v1.2 will be required for all TOEs.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator shall check the description of the implementation of this protocol in the TSS to ensure that the ciphersuites supported are specified. The evaluator shall check the TSS to ensure that the ciphersuites specified include those listed for this component.<htm:br></htm:br>
              
              <testlist>
                <test>The evaluator shall establish a TLS connection using each of the ciphersuites specified by the requirement. This connection may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session. It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).</test>
                <test>The evaluator shall attempt to establish the connection using a server with a server certificate that contains the Server Authentication purpose in the extendedKeyUsage field and verify that a connection is established. The evaluator will then verify that the client rejects an otherwise valid server certificate that lacks the Server Authentication purpose in the extendedKeyUsage field and a connection is not established. Ideally, the two certificates should be identical except for the extendedKeyUsage field.</test>
                <test>The evaluator shall send a server certificate in the TLS connection that the does not match the server-selected ciphersuite (for example, send a ECDSA certificate while using the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite or send a RSA certificate while using one of the ECDSA ciphersuites.) The evaluator shall verify that the TOE disconnects after receiving the server’s Certificate handshake message.</test>
                <test>The evaluator shall configure the server to select the TLS_NULL_WITH_NULL_NULL ciphersuite and verify that the client denies the connection.</test>
                <test>
                  The evaluator perform the following modifications to the traffic:
                  <ul>
                    <li>Change the TLS version selected by the server in the Server Hello to a non-supported TLS version (for example 1.3 represented by the two bytes 03 04) and verify that the client rejects the connection.</li>
                    <li>Modify at least one byte in the server’s nonce in the Server Hello handshake message, and verify that the client rejects the Server Key Exchange handshake message (if using a DHE or ECDHE ciphersuite) or that the server denies the client’s Finished handshake message.</li>
                    <li>Modify the server’s selected ciphersuite in the Server Hello handshake message to be a ciphersuite not presented in the Client Hello handshake message. The evaluator shall verify that the client rejects the connection after receiving the Server Hello.</li>
                        <li>Modify the signature block in the Server’s Key Exchange handshake message, and verify that the client rejects the connection after receiving the Server Key Exchange message.</li>
                        <li>Modify a byte in the Server Finished handshake message, and verify that the client sends a fatal alert upon receipt and does not send any application data.</li>
                        <li>Send a garbled message from the Server after the Server has issued the ChangeCipherSpec message and verify that the client denies the connection.</li>
                  </ul>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSC_EXT.1.2">
            <title>The TSF shall verify that the presented identifier matches the reference identifier according to RFC 6125.</title>
            <note role="application">The rules for verification of identify are described in Section 6 of RFC 6125. The reference identifier is established by the user (e.g. entering a URL into a web browser or clicking a link), by configuration (e.g. configuring the name of a mail server or authentication server), or by an application (e.g. a parameter of an API) depending on the application service. Based on a singular reference identifier’s source domain and application service type (e.g. HTTP, SIP, LDAP), the client establishes all reference identifiers which are acceptable, such as a Common Name for the Subject Name field of the certificate and a (case-insensitive) DNS name, URI name, and Service Name for the Subject Alternative Name field. The client then compares this list of all acceptable reference identifiers to the presented identifiers in the TLS server’s certificate.<htm:br></htm:br>
              The preferred method for verification is the Subject Alternative Name using DNS names, URI names, or Service Names. Verification using the Common Name is required for the purposes of backwards compatibility. Additionally, support for use of IP addresses in the Subject Name or Subject Alternative name is discouraged as against best practices but may be implemented. Finally, the client should avoid constructing reference identifiers using wildcards. However, if the presented identifiers include wildcards, the client must follow the best practices regarding matching; these best practices are captured in the assurance activity.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator shall ensure that the TSS describes the client’s method of establishing all reference identifiers from the administrator/application-configured reference identifier, including which types of reference identifiers are supported (e.g Common Name, DNS Name, URI Name, Service Name, or other application-specific Subject Alternative Names) and whether IP addresses and wildcards are supported. The evaluator shall ensure that this description identifies whether and the manner in which certificate pinning is supported or used by the TOE.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall configure the reference identifier according to the AGD guidance and perform the following tests during a TLS connection:
              <testlist>
                <test>The evaluator shall present a server certificate that does not contain an identifier in either the Subject Alternative Name (SAN) or Common Name (CN) that matches the reference identifier. The evaluator shall verify that the connection fails.</test>
                <test>The evaluator shall present a server certificate that contains a CN that matches the reference identifier, contains the SAN extension, but does not contain an identifier in the SAN that matches the reference identifier. The evaluator shall verify that the connection fails. The evaluator shall repeat this test for each supported SAN type.</test>
                <test>The evaluator shall present a server certificate that contains a CN that matches the reference identifier and does not contain the SAN extension. The evaluator shall verify that the connection succeeds.</test>
                <test>The evaluator shall present a server certificate that contains a CN that does not match the reference identifier but does contain an identifier in the SAN that matches. The evaluator shall verify that the connection succeeds.</test>
                <test>The evaluator shall perform the following wildcard tests with each supported type of reference identifier:<htm:br></htm:br>
                <ul>
                  <li>The evaluator shall present a server certificate containing a wildcard that is not in the left-most label of the presented identifier (e.g. foo.*.example.com) and verify that the connection fails.</li>
                  <li>The evaluator shall present a server certificate containing a wildcard in the left-most label (e.g. *.example.com). The evaluator shall configure the reference identifier with a single left-most label (e.g. foo.example.com) and verify that the connection succeeds. The evaluator shall configure the reference identifier without a left-most label as in the certificate (e.g. example.com) and verify that the connection fails. The evaluator shall configure the reference identifier with two left-most labels (e.g. bar.foo.example.come) and verify that the connection fails.</li>
                </ul>
                </test>
                <test>[conditional] If URI or Service name reference identifiers are supported, the evaluator shall configure the DNS name and the service identifier. The evaluator shall present a server certificate containing the correct DNS name and service identifier in the URIName or SRVName fields of the SAN and verify that the connection succeeds. The evaluator shall repeat this test with the wrong service identifier (but correct DNS name) and verify that the connection fails.</test>
                <test>[conditional] If pinned certificates are supported the evaluator shall present a certificate that does not match the pinned certificate and verify that the connection fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSC_EXT.1.3">
            <title>The TSF shall establish a trusted channel only if the peer certificate is valid.</title>
            <note role="application">Validity is determined by the identifier verification, certificate path, the expiration date, and the revocation status in accordance with RFC 5280. Certificate validity shall be tested in accordance with testing performed for FIA_X509_EXT.1.</note>
            <aactivity>
              <testlist>
                <test>The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. Using the administrative guidance, the evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSC_EXT.1.4">
            <title>The TSF shall support mutual authentication using X.509v3 certificates.</title>
            <note role="application">If TLS is used for FPT_ITC.1, then this component is required.<htm:br></htm:br>
              The use of X.509v3 certificates for TLS is addressed in FIA_X509_EXT.2.1. This requirement adds that this use must include the client must be capable of presenting a certificate to a TLS server for TLS mutual authentication.
            </note>
            <aactivity>The evaluator shall ensure that the TSS description required per FIA_X509_EXT.2.1 includes the use of client-side certificates for TLS mutual authentication.<htm:br></htm:br>

              <testlist>
                <test>The evaluator shall perform the following modification to the traffic:
                <ul>
                  <li>Configure the server to require mutual authentication and then modify a byte in a CA field in the Server’s Certificate Request handshake message. The modified CA field shall not be the CA used to sign the client’s certificate. The evaluator shall verify the connection is unsuccessful.</li>
                </ul></test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSC_EXT.1.5">
            <title>The TSF shall present the Supported Elliptic Curves Extension in the Client Hello with the following NIST curves: 
              <selectables>
                <selectable>secp256r1</selectable>
                <selectable>secp384r1</selectable>
                <selectable>secp521r1</selectable>
              </selectables> and no other curves.</title>
            <note role="application">If ciphersuites with elliptic curves were selected in FCS_TLSC_EXT.1.1, this component is required.<htm:br></htm:br>
              This requirement limits the elliptic curves allowed for authentication and key agreement to the NIST curves from FCS_COP.1(2) and FCS_CKM.1 and FCS_CKM.2. This extension is required for clients supporting Elliptic Curve ciphersuites.
            </note>
            <aactivity>The evaluator shall verify that TSS describes the Supported Elliptic Curves Extension and whether the required behavior is performed by default or may be configured.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall configure the server to perform an ECDHE key exchange in the TLS connection using a non-supported curve (for example P-192) and shall verify that the TOE disconnects after receiving the server’s Key Exchange handshake message.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FCS_TLSS_EXT.1" name="TLS Server Protocol" status="sel-based">
          <f-element id="FCS_TLSS_EXT.1.1">
            <title>The TSF shall implement 
              <selectables>
                <selectable>TLS 1.2 (RFC 5246)</selectable>
                <selectable>TLS 1.1 (RFC 4346)</selectable>
              </selectables> supporting the following ciphersuites:
              <ul>
                <li>Mandatory Ciphersuites:<htm:br></htm:br>
                  <ul><li>TLS_RSA_WITH_AES_128_CBC_SHA as defined in RFC 3268</li></ul>
                </li>
                <li>Optional Ciphersuites:<htm:br></htm:br>
                  <selectables linebreak="yes">
                    <selectable>TLS_RSA_WITH_AES_256_CBC_SHA as defined in RFC 3268 </selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 3268 </selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 3268 </selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA as defined in RFC 4492 </selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA as defined in RFC 4492 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA as defined in RFC 4492 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA as defined in RFC 4492 </selectable>
                    <selectable>TLS_RSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5246 </selectable>
                    <selectable>TLS_RSA_WITH_AES_256_CBC_ SHA256 as defined in RFC 5246</selectable>
                    <selectable>TLS_DHE_RSA_WITH_AES_128_CBC_ SHA256 as defined in RFC 5246</selectable> 
                    <selectable>TLS_DHE_RSA_WITH_AES_256_CBC_ SHA256 as defined in RFC 5246 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_CBC_SHA256 as defined in RFC 5289 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_CBC_SHA384 as defined in RFC 5289 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289 </selectable>
                    <selectable>TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 </selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256 as defined in RFC 5289 </selectable>
                    <selectable>TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384 as defined in RFC 5289 </selectable>
                    <selectable>no other ciphersuite</selectable>
                  </selectables>.
                </li>
              </ul>
            </title>
            <note role="application">The ciphersuites to be tested in the evaluated configuration are limited by this requirement. The ST author should select the optional ciphersuites that are supported; if there are no ciphersuites supported other than the mandatory suites, then “None” should be selected. It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. The Suite B algorithms listed above (RFC 6460) are the preferred algorithms for implementation. TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.<htm:br></htm:br>
              These requirements will be revisited as new TLS versions are standardized by the IETF.<htm:br></htm:br>
              If any ciphersuites are selected using ECDHE, then FCS_TLSS_EXT.1.5 is required.<htm:br></htm:br>
              In a future version of this PP TLS v1.2 will be required for all TOEs.</note>
            <aactivity>The ciphersuites to be tested in the evaluated configuration are limited by this requirement. The ST author should select the optional ciphersuites that are supported; if there are no ciphersuites supported other than the mandatory suites, then “None” should be selected. It is necessary to limit the ciphersuites that can be used in an evaluated configuration administratively on the server in the test environment. The Suite B algorithms listed above (RFC 6460) are the preferred algorithms for implementation. TLS_RSA_WITH_AES_128_CBC_SHA is required in order to ensure compliance with RFC 5246.<htm:br></htm:br>
              These requirements will be revisited as new TLS versions are standardized by the IETF.<htm:br></htm:br>
              If any ciphersuites are selected using ECDHE, then FCS_TLSS_EXT.1.5 is required.<htm:br></htm:br>
              In a future version of this PP TLS v1.2 will be required for all TOEs.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall also check the operational guidance to ensure that it contains instructions on configuring the TOE so that TLS conforms to the description in the TSS (for instance, the set of ciphersuites advertised by the TOE may have to be restricted to meet the requirements).
              <testlist>
                <test>The evaluator shall establish a TLS connection using each of the ciphersuites specified by the requirement. This connection may be established as part of the establishment of a higher-level protocol, e.g., as part of an EAP session. It is sufficient to observe the successful negotiation of a ciphersuite to satisfy the intent of the test; it is not necessary to examine the characteristics of the encrypted traffic in an attempt to discern the ciphersuite being used (for example, that the cryptographic algorithm is 128-bit AES and not 256-bit AES).</test>
                <test>The evaluator shall send a Client Hello to the server with a list of ciphersuites that does not contain any of the ciphersuites in the server’s ST and verify that the server denies the connection. Additionally, the evaluator shall send a Client Hello to the server containing only the TLS_NULL_WITH_NULL_NULL ciphersuite and verify that the server denies the connection.</test>
                <test>The evaluator shall use a client to send a key exchange message in the TLS connection that the does not match the server-selected ciphersuite (for example, send an ECDHE key exchange while using the TLS_RSA_WITH_AES_128_CBC_SHA ciphersuite or send a RSA key exchange while using one of the ECDSA ciphersuites.) The evaluator shall verify that the TOE disconnects after the receiving the key exchange message.</test>
              <test>
                The evaluator shall perform the following modifications to the traffic:<htm:br></htm:br>
               <ul>
                 <li>Modify at a byte in the client’s nonce in the Client Hello handshake message, and verify that the server rejects the client’s Certificate Verify handshake message (if using mutual authentication) or that the server denies the client’s Finished handshake message.</li>
                 <li>Modify the signature block in the Client’s Key Exchange handshake message, and verify that the server rejects the client’s Certificate Verify handshake message (if using mutual authentication) or that the server denies the client’s Finished handshake message.</li>
                   <li>Modify a byte in the Client Finished handshake message, and verify that the server rejects the connection and does not send any application data.</li>
                 <li>After generating a fatal alert by sending a Finished message from the client before the client sends a ChangeCipherSpec message, send a Client Hello with the session identifier from the previous test, and verify that the server denies the connection.</li>
                       <li>Send a garbled message from the client after the client has issued the ChangeCipherSpec message and verify that the Server denies the connection.</li>
               </ul>
              </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSS_EXT.1.2">
            <title>The TSF shall deny connections from clients requesting SSL 1.0, SSL 2.0, SSL 3.0, TLS 1.0, and 
              <selectables>
                <selectable>TLS 1.1</selectable>
                <selectable>none</selectable>
              </selectables>.</title>
            <note role="application">All SSL versions and TLS v1.0 shall be denied. Any TLS versions not selected in FCS_TLSS_EXT.1.1 should be selected here.</note>
            <aactivity>The evaluator shall verify that the TSS contains a description of the denial of old SSL and TLS versions.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that any configuration necessary to meet the requirement are contained in the AGD guidance.
              <testlist>
                <test>The evaluator shall send a Client Hello requesting a connection with version SSL 1.0 and verify that the server denies the connection. The evaluator shall repeat this test with SSL 2.0, SSL 3.0, TLS 1.0, and any selected TLS versions.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSS_EXT.1.3">
            <title>The TSF shall generate key agreement parameters 
             <selectables>
               <selectable>over NIST curves
                      <selectables>
                        <selectable>secp256r1</selectable>
                        <selectable>secp384r1</selectable>
                      </selectables> and no other curves</selectable>
               <selectable>Diffie-Hellman parameters of size 2048 bits and 
                 <selectables>
                   <selectable>3072 bits</selectable>
                   <selectable>no other size</selectable>
                 </selectables>
               </selectable>
             </selectables>.
              </title>
            <note role="application">If the ST lists a DHE ciphersuite in FCS_TLSS_EXT.1.1, the ST must include the Diffie-Hellman selection in the requirement. FMT_MOF_EXT.1 requires the configuration of the key agreement parameters in order to establish the security strength of the TLS connection.</note>
            <aactivity>The evaluator shall verify that the TSS describes the key agreement parameters of the server key exchange message.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that any configuration necessary to meet the requirement is contained in the AGD guidance.
              <testlist>
                <test>The evaluator shall attempt a connection using an ECDHE ciphersuite and a configured curve and, using a packet analyzer, verify that the key agreement parameters in the Key Exchange message are the ones configured. (Determining that the size matches the expected size for the configured curve is sufficient.) The evaluator shall repeat this test for each supported NIST Elliptic Curve and each supported Diffie-Hellman key size.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSS_EXT.1.4">
            <title>(optional) The TSF shall support mutual authentication of TLS clients using X.509v3 certificates.</title>
            <aactivity>The evaluator shall ensure that the TSS description required per FIA_X509_EXT.2.1 includes the use of client-side certificates for TLS mutual authentication.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that the AGD guidance required per FIA_X509_EXT.2.1 includes instructions for configuring the client-side certificates for TLS mutual authentication.
              <testlist>
                <test>The evaluator shall configure the server to send a certificate request to the client and shall attempt a connection without sending a certificate from the client. The evaluator shall verify that the connection is denied.</test>
                <test>The evaluator shall configure the server to send a certificate request to the client without the supported_signature_algorithm used by the client’s certificate. The evaluator shall attempt a connection using the client certificate and verify that the connection is denied.</test>
                <test>The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. Using the administrative guidance, the evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                <test>The evaluator shall configure the client to send a certificate that does not chain to one of the Certificate Authorities (either a Root or Intermediate CA) in the server’s Certificate Request message. The evaluator shall verify that the attempted connection is denied.</test>
                <test>The evaluator shall configure the client to send a certificate with the Client Authentication purpose in the extendedKeyUsage field and verify that the server accepts the attempted connection. The evaluator shall repeat this test without the Client Authentication purpose and shall verify that the server denies the connection. Ideally, the two certificates should be identical except for the Client Authentication purpose.</test>
                <test>The evaluator shall perform the following modifications to the traffic:<htm:br></htm:br>
                  <ul>
                    <li>Configure the server to require mutual authentication and then modify a byte in the client’s certificate. The evaluator shall verify that the server rejects the connection.</li>
                    <li>Configure the server to require mutual authentication and then modify a byte in the client’s Certificate Verify handshake message. The evaluator shall verify that the server rejects the connection.</li>
                  </ul>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSS_EXT.1.5">
            <title>The TSF shall not establish a trusted channel if the peer certificate is invalid.</title>
            <note role="application">The use of X.509v3 certificates for TLS is addressed in FIA_X509_EXT.2.1. This requirement adds that this use must include support for client-side certificates for TLS mutual authentication.<htm:br></htm:br>
              Validity is determined by the certificate path, the expiration date, and the revocation status in accordance with RFC 5280. Certificate validity shall be tested in accordance with testing performed for FIA_X509_EXT.1.</note>
            <aactivity>The evaluator shall ensure that the TSS description required per FIA_X509_EXT.2.1 includes the use of client-side certificates for TLS mutual authentication.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              The evaluator shall verify that the AGD guidance required per FIA_X509_EXT.2.1 includes instructions for configuring the client-side certificates for TLS mutual authentication.
              <testlist>
                <test>The evaluator shall configure the server to send a certificate request to the client and shall attempt a connection without sending a certificate from the client. The evaluator shall verify that the connection is denied.</test>
                <test>The evaluator shall configure the server to send a certificate request to the client without the supported_signature_algorithm used by the client’s certificate. The evaluator shall attempt a connection using the client certificate and verify that the connection is denied.</test>
                <test>The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. Using the administrative guidance, the evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                <test>The evaluator shall configure the client to send a certificate that does not chain to one of the Certificate Authorities (either a Root or Intermediate CA) in the server’s Certificate Request message. The evaluator shall verify that the attempted connection is denied.</test>
                <test>The evaluator shall configure the client to send a certificate with the Client Authentication purpose in the extendedKeyUsage field and verify that the server accepts the attempted connection. The evaluator shall repeat this test without the Client Authentication purpose and shall verify that the server denies the connection. Ideally, the two certificates should be identical except for the Client Authentication purpose.</test>
                <test>The evaluator shall perform the following modifications to the traffic:<htm:br></htm:br>
                <ul>
                  <li>Configure the server to require mutual authentication and then modify a byte in the client’s certificate. The evaluator shall verify that the server rejects the connection.</li>
                  <li>Configure the server to require mutual authentication and then modify a byte in the client’s Certificate Verify handshake message. The evaluator shall verify that the server rejects the connection.</li>
                </ul>
                </test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FCS_TLSS_EXT.1.6">
            <title>The TSF shall not establish a trusted channel if the distinguished name (DN) or Subject Alternative Name (SAN) contained in a certificate does not match the expected identifier for the peer.</title>
            <note role="application">This requirement only applies to those TOEs performing mutually-authenticated TLS (FCS_TLSS_EXT.1.4). The peer identifier may be in the Subject field or the Subject Alternative Name extension of the certificate. The expected identifier may either be configured, may be compared to the Domain Name, IP address, username, or email address used by the peer, or may be passed to a directory server for comparison. Matching should be performed by a bit-wise comparison.</note>
            <aactivity>(conditional) If the TOE implements mutual authentication, the evaluator shall verify that the TSS describes how the DN or SAN in the certificate is compared to the expected identifier.<htm:br></htm:br>
              <htm:i>Operational Guidance</htm:i><htm:br></htm:br>
              (conditional) If the TOE implements mutual authentication, and if the DN is not compared automatically to the Domain Name or IP address, username, or email address, then the evaluator shall ensure that the AGD guidance includes configuration of the expected DN or the directory server for the connection.
              <testlist>
                <test>The evaluator shall send a client certificate with an identifier that does not match an expected identifier and verify that the server denies the connection.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
      </subsection><!--   end of FCS reqs -->
      <subsection title="User Data Protection (FDP)" id="fdp1">
        <f-component id="FDP_VMS_EXT.1" name="VM Separation" status="threshold">
          <f-element id="FDP_VMS_EXT.1.1">
            <title>The VS shall provide the following mechanisms for transferring data between Guest VMs: 
              <selectables>
                <selectable>no mechanism</selectable>
                <selectable>virtual networking</selectable>
                <selectable><assignable>other inter-VM data sharing mechanisms</assignable></selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FDP_VMS_EXT.1.2">
            <title>The TSF shall allow Administrators to configure these mechanisms to 
              <selectables>
                <selectable>enable</selectable>
                <selectable>disable</selectable>
              </selectables> the transfer of data between Guest VMs.
            </title>
          </f-element>
          <f-element id="FDP_VMS_EXT.1.3">
            <title>The VS shall ensure that no Guest VM is able to read or transfer data to or from another Guest VM except through the mechanisms listed in FDP_VMS_EXT.1.1.
            </title>
            <note role="application">
              The fundamental requirement of a Virtualization System is the ability to enforce separation between information domains implemented as Virtual Machines and Virtual Networks. The intent of this requirement is to ensure that VMs, VMMs, and the Virtualization System as a whole is implemented with this fundamental requirement in mind.<htm:br></htm:br>
              The ST author should select “no mechanism” in the unlikely event that the VS implements no mechanisms for transferring data between Guest VMs. Otherwise, the ST author should select “virtual networking” and identify all other mechanisms through which data can be transferred between Guest VMs. This should be the same list of mechanisms supplied for FMT_MSA_EXT.1.<htm:br></htm:br>
              Examples of non-network inter-VM sharing mechanisms are:<htm:br></htm:br>
              <htm:ul>
                <htm:li>User interface-based mechanisms, such as copy/paste and drag-and-drop.</htm:li>
                <htm:li>Shared virtual or physical devices</htm:li>
                <htm:li>API-based mechanisms such as Hypercalls.</htm:li>
              </htm:ul>
              For data transfer mechanisms implemented in terms of Hypercall functions, FDP_VMS_EXT.1.2 is met if FPT_HCL_EXT.1.2 is met for those Hypercall functions (VM access to Hypercall functions is configurable).<htm:br></htm:br>
              For data transfer mechanisms that use shared physical devices, FDP_VMS_EXT.1.2 is met if the device is listed in and meets FDP_PPR_EXT.1.1 (VM access to the physical device is configurable).<htm:br></htm:br>
              For data transfer mechanisms that use virtual networking, FDP_VMS_EXT.1.2 is met if FDP_VNC_EXT.1.1 is met (VM access to virtual networks is configurable).<htm:br></htm:br>
              FDP_VMS_EXT.1.3 is an attestation requirement. The vendor must attest that data cannot be transferred between Guest VMs except through the configurable mechanisms documented in FDP_VMS_EXT.1.1. The vendor must attest that there are no design or implementation flaws that permit the above mechanisms to be bypassed or defeated, or for data to be transferred through a different, undocumented mechanism.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to verify that it documents all inter-VM communications mechanisms (as defined above), including how the mechanisms are configured, how they are invoked, and how they are disabled.<htm:br></htm:br>
              The evaluator shall perform the following tests for each documented inter-VM communications channel:<htm:br></htm:br>
              <htm:ol type='a'>
                <htm:li>Create two VMs.</htm:li>
                <htm:li>Test that communications cannot be passed between the VMs through the channel.</htm:li>
                <htm:li>As an Administrator, enable inter-VM communications between two VMs.</htm:li>
                <htm:li>Test that communications can be passed through the inter-VM channel.</htm:li>
                <htm:li>As an Administrator again, disable inter-VM communications between the two VMs.</htm:li>
                <htm:li>Test that communications can no longer be passed through the channel.</htm:li>
              </htm:ol>
              FDP_VMS_EXT.1.2 is met if communications is successful in step (d) and unsuccessful in step (f).<htm:br></htm:br>
              FMT_MSA_EXT.1.2 is met if communication is unsuccessful in step (b).<htm:br></htm:br>
              The evaluator must ensure that the ST includes the following statement attesting that there are no other ways for data to be transferred between VMs other than those listed in FDP_VMS_EXT.1.1:<htm:br></htm:br>
              A Guest VM cannot access the data of another Guest VM, or transfer data to another Guest VM other than through the mechanisms described in FDP_VMS_EXT.1.1 when expressly enabled by an authorized Administrator. There are no known design or implementation flaws that permit the above mechanisms to be bypassed or defeated, or for data to be transferred through undocumented mechanisms. This claim does not apply to covert channels or architectural side-channels.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FDP_PPR_EXT.1" name="Physical Platform Resource Controls" status="threshold">
          <f-element id="FDP_PPR_EXT.1.1">
            <title>The TSF shall allow an authorized administrator to control VM access to the following physical platform resources: 
              <assignable>list of physical platform resources the VMM is able to control access to</assignable>.
            </title>
          </f-element>
          <f-element id="FDP_PPR_EXT.1.2">
            <title>The TSF shall explicitly deny all Guest VMs access to the following physical platform resources: 
              <selectables>
                <selectable>no physical platform resources</selectable>
                <selectable><assignable>list of physical platform resources to which access is explicitly denied</assignable></selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FDP_PPR_EXT.1.3">
            <title>The TSF shall explicitly allow all Guest VMs access to the following physical platform resources: 
              <selectables>
                <selectable>no physical platform resources</selectable>
                <selectable><assignable>list of physical platform resources to which access is always allowed</assignable></selectable>
              </selectables>.</title>
            <note role="application">This requirement specifies that the VMM controls access to physical platform resources, and indicates that it must be configurable, but does not specify the means by which that is done. The ST author should list the physical platform resources that can be configured for Guest VM access by the administrator. Guest VMs may not be allowed direct access to certain physical resources; those resources are listed in the second element. If there are no such resources, the ST author selects "no physical platform resources". Likewise, any resources to which all Guest VMs automatically have access to are listed in the third element; if there are no such resources, then "no physical platform resources" is selected.</note>
            <aactivity>
              The evaluator shall examine the TSS to determine that it describes the mechanism by which the VMM controls a Guest VM's access to physical platform resources is described. This description shall cover all of the physical platforms allowed in the evaluated configuration by the ST. This description shall include how the VMM distinguishes among Guest VMs, and how each physical platform resource that is controllable (that is, listed in the assignment statement in the first element) is identified. The evaluator shall ensure that the TSS describes how the Guest VM is associated with each physical resources, and how other Guest VMs cannot access a physical resource without being granted explicit access. For TOEs that implement a robust interface (other than just "allow access" or "deny access"), the evaluator shall ensure that the TSS describes the possible operations or modes of access between a Guest VMs and physical platform resources.<htm:br></htm:br>
              If physical resources are listed in the second element, the evaluator shall examine the TSS and operational guidance to determine that there appears to be no way to configure those resources for access by a Guest VM. The evaluator shall document in the evaluation report their analysis of why the controls offered to configure access to physical resources can't be used to specify access to the resources identified in the second element (for example, if the interface offers a drop-down list of resources to assign, and the denied resources are not included on that list, that would be sufficient justification in the evaluation report).<htm:br></htm:br>
              The evaluator shall examine the operational guidance to determine that it describes how an administrator is able to configure access to physical platform resources for Guest VMs for each platform allowed in the evaluated configuration according to the ST. The evaluator shall also determine that the operational guidance identifies those resources listed in the second and third elements of the component and notes that access to these resources is explicitly denied/allowed, respectively.<htm:br></htm:br>
              Using the operational guidance, the evaluator shall perform the following tests for each physical platform identified in the ST:<htm:br></htm:br>
              <testlist>
                <test>For each physical platform resource identified in the first element, the evaluator shall configure a Guest VM to have access to that resource and show that the Guest VM is able to successfully access that resource.</test>
                <test>For each physical platform resource identified in the first element, the evaluator shall configure the system such that a Guest VM does not have access to that resource and show that the Guest VM is unable to successfully access that resource.</test>
                <test>[conditional]: For TOEs that have a robust control interface, the evaluator shall exercise each element of the interface as described in the TSS and the operational guidance to ensure that the behavior described in the operational guidance is exhibited.</test>
                <test>[conditional]: If the TOE explicitly denies access to certain physical resources, the evaluator shall attempt to access each listed (in FDP_PPR_EXT.1.2) physical resource from a Guest VM and observe that access is denied.</test>
                <test>[conditional]: If the TOE explicitly allows access to certain physical resources, the evaluator shall attempt to access each listed (in FDP_PPR_EXT.1.3) physical resource from a Guest VM and observe that the access is allowed. If the operational guidance specifies that access is allowed simultaneously by more than one Guest VM, the evaluator shall attempt to access each resource listed from more than one Guest VM and show that access is allowed.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FDP_VNC_EXT.1" name="Virtual Networking Components" status="threshold">
          <f-element id="FDP_VNC_EXT.1.1">
            <title>The TSF shall allow Administrators to configure virtual networking components to connect VMs to each other, and to physical networks.
            </title>
          </f-element>
          <f-element id="FDP_VNC_EXT.1.2">
            <title>The TSF shall ensure that network traffic visible to a Guest VM on a virtual network--or virtual segment of a physical network--is visible only to Guest VMs configured to be on that virtual network or segment.
            </title>
            <note role="application">
              Virtual networks must be isolated from one another to provide assurance commensurate with that provided by physically separate networks. It must not be possible for data to cross between properly configured virtual networks regardless of whether the traffic originated from a local Guest VM or a remote host.<htm:br></htm:br>
              Unprivileged users must not be able to connect VMs to each other or to external networks.<htm:br></htm:br>
              FDP_VNC_EXT.1.2 is an attestation requirement. The vendor must attest that traffic traversing a virtual network is visible only to Guest VMs that are configured by an Administrator to be members of that virtual network, and that there are no design or implementation flaws that permit the virtual networking configuration to be bypassed or defeated, or for data to be transferred through undocumented mechanisms.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator must ensure that the TSS and Operational Guidance describes how to create virtualized networks and connect VMs to each other and to physical networks.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall assume the role of the Administrator and attempt to configure a VM to connect to a network component. The evaluator shall verify that the attempt is successful. The evaluator shall then assume the role of an unprivileged user and attempt the same connection. If the attempt fails, or there is no way for an unprivileged user to configure VM network connections, the requirement is met.</test>
                <test>The evaluator shall assume the role of the Administrator and attempt to configure a VM to connect to a physical network. The evaluator shall verify that the attempt is successful. The evaluator shall then assume the role of an unprivileged user and make the same attempt. If the attempt fails, or there is no way for an unprivileged user to configure VM network connections, the requirement is met.</test>
              </testlist>
              The evaluator must ensure that the ST includes the following statement attesting that virtual network traffic is visible only to VMs configured to be on that virtual network<htm:br></htm:br>
              Traffic traversing a virtual network is visible only to Guest VMs that are configured by an Administrator to be members of that virtual network. There are no known design or implementation flaws that permit the virtual networking configuration to be bypassed or defeated, or for data to be transferred through undocumented mechanisms. This claim does not apply to covert channels or architectural side-channels.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FDP_RIP_EXT.1" name="Residual information in memory" status="threshold">
          <f-element id="FDP.RIP_EXT.1">
            <title>The TSF shall ensure that any previous information content of physical memory is cleared prior to allocation to a Guest VM.
            </title>

            <note role="application">
              Physical memory must be zeroed before it is made accessible to a VM for general use by a Guest OS.<htm:br></htm:br>
              The purpose of this requirement is to ensure that a VM does not receive memory containing data previously used by another VM or the host.<htm:br></htm:br>
              “For general use” means for use by the Guest OS in its page tables for running applications or system software.<htm:br></htm:br>
              This does not apply to pages shared by design or policy between VMs or between the VMMs and VMs, such as read-only OS pages or pages used for virtual device buffers.<htm:br></htm:br>
            </note>
            <aactivity>
              <htm:ol>
                <htm:li>The evaluator shall ensure that the TSS documents the conditions under which physical memory is not cleared prior to allocation to a Guest VM, and describes when and how the memory is cleared.</htm:li>
                <htm:li>The evaluator shall run a kernel-mode application or driver in the Guest OS that allocates a large (10MB) readable and writeable buffer. The test is to read each location in the buffer to ensure that every location contains a value of 0.</htm:li>
              </htm:ol>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FDP_RIP_EXT.2" name="Residual information on disk" status="threshold">
          <f-element id="FDP.RIP_EXT.2">
            <title>The TSF shall ensure that any previous information content of physical disk storage is cleared prior to allocation to a Guest VM.
            </title>
            <note role="application">
              Disk storage must be zeroed before it is made accessible to a VM for use by a Guest OS.<htm:br></htm:br>
              The purpose of this requirement is to ensure that a VM does not receive disk storage containing data previously used by another VM or the host.<htm:br></htm:br>
              This does not apply to disk-resident files shared by design or policy between VMs or between the VMMs and VMs, such as read-only data files or files used for inter-VM data transfers permitted by policy.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall ensure that the TSS documents the conditions under which physical disk storage is not cleared prior to allocation to a Guest VM.<htm:br></htm:br>
              The evaluator shall perform the following tests:<htm:br></htm:br>
              <testlist>
                <test>The evaluator (as an unprivileged VM user) must create a new, large file (10MB) in the VM’s file system. The test is to read each location in the file to ensure that every location contains a value of 0. This can be done using a custom tool or a binary file editor or viewer.</test>
                <test>The evaluator (as VS Administrator) must create a virtual disk and connect it to a VM. As an unprivileged VM user, the evaluator must then create a large (10 MB) memory-mapped file on the virtual disk. The test is to read each location in the file to ensure that every location contains a value of 0. This can be done using a custom tool or a binary file editor or viewer.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FDP_HBI_EXT.1" name="Hardware-Based Isolation Mechanisms" status="threshold">
          <f-element id="FDP_HBI_EXT.1.1">
            <title>The TSF shall use 
             <selectables>
               <selectable>no mechanism</selectable>
               <selectable><assignable>list of platform-provided, hardware-based mechanisms</assignable></selectable>
              </selectables> to constrain a Guest VM’s direct access to the following physical devices: 
              <selectables>
                <selectable>no devices</selectable>
                <selectable><assignable>physical devices to which the VMM allows Guest VMs physical access</assignable></selectable>
              </selectables>.
            </title>
            <note role="application">
              The TSF must use available hardware-based isolation mechanisms to constrain VMs when VMs have direct access to physical devices. “Direct access” in this context means that the VM can read or write device memory or access device I/O ports without the VMM being able to intercept and validate every transaction.<htm:br></htm:br>
            If the VMM does not allow Guest VMs direct access to any physical devices, then the “no mechanisms” and “no devices” selections can be made.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall verify that the operational guidance contains instructions on how to ensure that the platform-provided, hardware-based mechanisms are enabled.<htm:br></htm:br>
              The evaluator shall ensure that the TSS provides evidence that hardware-based isolation mechanisms are used to constrain VMs when VMs have direct access to physical devices, including an explanation of the conditions under which the TSF invokes these protections.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Trusted Path/Channel (FTP)" id="ftp1">
        <f-component id="FTP_TRP.1" name="Trusted Path for Remote Administration" status="threshold">
          <f-element id="FTP_TRP.1.1">
            <title>Refinement: The TSF shall use 
              <selectables>
                <selectable>IPsec</selectable>
                <selectable>SSH</selectable>
                <selectable>TLS</selectable>
                <selectable>TLS/HTTPS</selectable>
              </selectables> to provide a trusted communication path between itself and remote administrators that is logically distinct from other communication paths and provides assured identification of its endpoints and protection of the communicated data from disclosure and detection of modification of the communicated data.
            </title>
          </f-element>
          <f-element id="FTP_TRP.1.2">
            <title>The TSF shall permit remote administrators to initiate communication via the trusted path.
            </title>
          </f-element>
          <f-element id="FTP_TRP.1.3">
            <title>The TSF shall require the use of the trusted path for all remote administration actions.
            </title>
            <note role="application">This requirement ensures that authorized remote administrators initiate all communication with the TOE via a trusted path, and that all communications with the TOE by remote administrators is performed over this path. The data passed in this trusted communication channel are encrypted as defined the protocol chosen in the first selection. The ST author chooses the mechanism or mechanisms supported by the TOE, and then ensures that the detailed requirements in Annex B corresponding to their selection are copied to the ST if not already present.</note>
            <aactivity>The evaluator shall examine the TSS to determine that the methods of remote TOE administration are indicated, along with how those communications are protected. The evaluator shall also confirm that all protocols listed in the TSS in support of TOE administration are consistent with those specified in the requirement, and are included in the requirements in the ST. The evaluator shall confirm that the operational guidance contains instructions for establishing the remote administrative sessions for each supported method. The evaluator shall also perform the following tests:
              <testlist>
                <test>The evaluators shall ensure that communications using each specified (in the operational guidance) remote administration method is tested during the course of the evaluation, setting up the connections as described in the operational guidance and ensuring that communication is successful.</test>
                <test>For each method of remote administration supported, the evaluator shall follow the operational guidance to ensure that there is no available interface that can be used by a remote user to establish remote administrative sessions without invoking the trusted path.</test>
                <test>The evaluator shall ensure, for each method of remote administration, the channel data is not sent in plaintext.</test>
                <test>The evaluator shall ensure, for each method of remote administration, modification of the channel data is detected by the TOE.</test>
              </testlist>
              Further assurance activities are associated with the specific protocols.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FTP_UIF_EXT.1" name="User Interface: I/O Focus" status="threshold">
          <f-element id="FTP_UIF_EXT.1.1">
            <title>The VMM shall indicate to the user which VM is currently connected to 
              <selectables>
                <selectable>keyboard</selectable>
                <selectable>mouse <assignable>other supported user input devices</assignable></selectable>
              </selectables>.
            </title>
            <note role="application">
              This requirement applies to all users—whether Unprivileged User or Administrator.<htm:br></htm:br>
              In environments where multiple VMs run at the same time, the user must have a way of knowing which VM user input is directed to at any given moment. This is especially important in multiple-domain environments.<htm:br></htm:br>
            </note>
            <aactivity>
              <htm:ol>
                <htm:li>The evaluator shall ensure that the TSS lists the supported user input devices.</htm:li>
                <htm:li>The evaluator shall ensure that the operational guidance specifies how the current input focus is indicated to the user.</htm:li>
                <htm:li>For each supported input device, the evaluator shall demonstrate that the input from each device listed in the TSS is directed to the VM that is indicated to have the input focus.</htm:li>
              </htm:ol>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FTP_UIF_EXT.2" name="User Interface: Identification of VM" status="threshold">
          <f-element id="FTP_UIF_EXT.2.1">
            <title>The TSF shall uniquely identify a VM’s output display to a user.
            </title>
            <note role="application">
              In environments where a user has access to more than one VM at the same time, the user must be able to determine the identity of each VM displayed in order to avoid inadvertent cross-domain data entry.<htm:br></htm:br>
              The requirement would be met, for example, by a border around a VM’s screen display that identifies the VM.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall ensure that the TSS describes the mechanism for identifying VMs to the user, how identities are assigned to VMs, and how conflicts are prevented.<htm:br></htm:br>
              The evaluator shall perform the following test:<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall attempt to create and start at least three Guest VMs on a single display device where the evaluator attempts to assign two of the VMs the same identifier. If the user interface displays different identifiers for each VM, then the requirement is met. Likewise, the requirement is met if the system refuses to create or start a VM when there is already a VM with the same identifier.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Identification and Authentication (FIA)" id="fia1">
        <f-component id="FIA_PMG_EXT.1" name="Extended: Password Management" status="threshold">
          <f-element id="FIA_PMG_EXT.1.1">
            <title>The TSF shall provide the following password management capabilities for administrative passwords:<htm:br></htm:br>
              <ol type="a">
                <li>Passwords shall be able to be composed of any combination of upper and lower case characters, digits, and the following special characters: 
               <selectables>
                <selectable>“!”</selectable>
                <selectable>“@”</selectable>
                <selectable>“#”</selectable>
                <selectable>“$”</selectable>
                <selectable>“%”</selectable>
                <selectable>“^”</selectable>
                <selectable>“&amp;”</selectable>
                <selectable>“*”</selectable>
                <selectable>“(“</selectable>
                <selectable>“)”</selectable>
                <selectable><assignable>other characters</assignable></selectable>
              </selectables></li>
                <li>Minimum password length shall be settable and support passwords of 15 characters or greater.</li>
              </ol>
            </title>
            <note role="application">The ST author selects the special characters that are supported by the TOE; they may optionally list additional special characters supported using the assignment. “Administrative passwords” refers to passwords used by administrators to gain access to the Management Subsystem.</note>
            <aactivity>The evaluator shall examine the operational guidelines to determine that it provides guidance to security administrators in the composition of strong passwords, and that it provides instructions on setting the minimum password length. The evaluator shall also perform the following tests. Note that one or more of these tests may be performed with a single test case.
              <testlist>
                <test>The evaluator shall compose passwords that either meet the requirements, or fail to meet the requirements, in some way. For each password, the evaluator shall verify that the TOE supports the password. While the evaluator is not required (nor is it feasible) to test all possible combinations of passwords, the evaluator shall ensure that all characters, rule characteristics, and a minimum length listed in the requirement are supported, and justify the subset of those characters chosen for testing.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FIA_UIA_EXT.1" name="Administrator Identification and Authentication" status="threshold">
          <f-element id="FIA_UIA_EXT.1.1">
            <title>The TSF shall allow the following actions prior to requiring the Administrator to initiate the identification and authentication process:<htm:br></htm:br>
              <selectables>
                <selectable>no actions</selectable>
                <selectable><assignable>list of services, actions performed by the TSF in response to local or remote requests</assignable></selectable>
              </selectables>   
            </title>
          </f-element>
          <f-element id="FIA_UIA_EXT.1.2">
            <title>The TSF shall require each administrative user to be successfully identified and authenticated before allowing any other TSF-mediated actions on behalf of that administrative user.
            </title>
            <note role="application">
              This requirement applies to users of services available from the TOE directly, and not services available by connecting from the platform, for instance. While it should be the case that few or no services are available to external entities prior to identification and authentication, if there are some available (perhaps ICMP echo) these should be listed in the assignment statement; otherwise “no other actions” should be selected.<htm:br></htm:br>
              Authentication can be password-based through the local console or through a protocol that supports passwords (such as SSH), or be certificate based (SSH, TLS).<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to determine that it describes the logon process for each logon method (local, remote (HTTPS, SSH, etc.)) supported for the product. This description shall contain information pertaining to the credentials allowed/used, any protocol transactions that take place, and what constitutes a “successful logon”. The evaluator shall examine the operational guidance to determine that any necessary preparatory steps (e.g., establishing credential material such as pre-shared keys, tunnels, certificates, etc.) to logging in are described. For each supported the login method, the evaluator shall ensure the operational guidance provides clear instructions for successfully logging on. If configuration is necessary to ensure the services provided before login are limited, the evaluator shall determine that the operational guidance provides sufficient instruction on limiting the allowed services.<htm:br></htm:br>
              The evaluator shall perform the following tests for each method by which administrators access the TOE (local and remote), as well as for each type of credential supported by the login method:<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall use the operational guidance to configure the appropriate credential supported for the login method. For that credential/login method, the evaluator shall show that providing correct I<!-- here & -->A information results in the ability to access the system, while providing incorrect information results in denial of access.</test>
                <test>The evaluator shall configure the services allowed (if any) according to the operational guidance, and then determine the services available to a remote or local administrator. The evaluator shall determine that the list of services available is limited to those specified in the requirement.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FIA_X509_EXT.1 X.509" name="Certificate Validation" status="threshold">
          <f-element id="FIA_X509_EXT.1.1">
            <title>FIA_X509_EXT.1.1 The TSF shall validate certificates in accordance with the following rules:<htm:br></htm:br>
              <ul>
                <li>RFC 5280 certificate validation and certificate path validation.</li>
                <li>The certificate path must terminate with a trusted certificate.</li>
                <li>The TSF shall validate a certificate path by ensuring the presence of the basicConstraints extension and that the CA flag is set to TRUE for all CA certificates.</li>
                <li>The TSF shall validate the revocation status of the certificate using 
              <selectables>
                <selectable>the Online Certificate Status Protocol (OCSP) as specified in RFC 2560</selectable>
                <selectable>a Certificate Revocation List (CRL) as specified in RFC 5759</selectable>
              </selectables>
              </li>
                <li>The TSF shall validate the extendedKeyUsage field according to the following rules:<htm:br></htm:br>
                  <htm:ul>
                    <htm:li>Certificates used for trusted updates and executable code integrity verification shall have the Code Signing purpose (id-kp 3 with OID 1.3.6.1.5.5.7.3.3) in the extendedKeyUsage field.</htm:li>
                    <htm:li>Server certificates presented for TLS shall have the Server Authentication purpose (id-kp 1 with OID 1.3.6.1.5.5.7.3.1) in the extendedKeyUsage field.</htm:li>
                    <htm:li>Client certificates presented for TLS shall have the Client Authentication purpose (id-kp 2 with OID 1.3.6.1.5.5.7.3.2) in the extendedKeyUsage field.</htm:li>
                    <htm:li>OCSP certificates presented for OCSP responses shall have the OCSP Signing purpose (id-kp 9 with OID 1.3.6.1.5.5.7.3.9) in the extendedKeyUsage field.</htm:li>
                </htm:ul>
                </li>
              </ul>
            </title>
            <note role="application">FIA_X509_EXT.1.1 lists the rules for validating certificates. The ST author shall select whether revocation status is verified using OCSP or CRLs. FIA_X509_EXT.2 requires that certificates are used for IPsec; this use requires that the extendedKeyUsage rules are verified. Certificates may optionally be used for SSH, TLS and HTTPS and, if implemented, must be validated to contain the corresponding extendedKeyUsage.<htm:br></htm:br>
              Regardless of the selection of TSF or TOE platform, the validation is expected to end in a trusted root CA certificate in a root store managed by the platform.
            </note>
          </f-element>
          <f-element id="FIA_X509_EXT.1.2">
            <title>The TSF shall only treat a certificate as a CA certificate if the basicConstraints extension is present and the CA flag is set to TRUE.<htm:br></htm:br>
              This requirement applies to certificates that are used and processed by the TSF and restricts the certificates that may be added as trusted CA certificates.</title>
            <note role="application"> </note>
            <aactivity>
              The evaluator shall ensure the TSS describes where the check of validity of the certificates takes place. The evaluator ensures the TSS also provides a description of the certificate path validation algorithm.<htm:br></htm:br>
              The evaluator shall examine the TSS to confirm that it describes the behavior of the TOE when a connection cannot be established during the validity check of a certificate used in establishing a trusted channel. If the requirement that the administrator is able to specify the default action, then the evaluator shall ensure that the operational guidance contains instructions on how this configuration action is performed.<htm:br></htm:br>
              The tests described must be performed in conjunction with the other Certificate Services assurance activities, including the use cases in FIA_X509_EXT.2.1. The tests for the extendedKeyUsage rules are performed in conjunction with the uses that require those rules.<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall demonstrate that validating a certificate without a valid certification path results in the function (application validation, trusted channel setup, or trusted software update) failing. The evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                <test>The evaluator shall demonstrate that validating an expired certificate results in the function failing.</test>
                <test>The evaluator shall test that the TOE can properly handle revoked certificates –conditional on whether CRL or OCSP is selected; if both are selected, and then a test is performed for each method. The evaluator has to only test one up in the trust chain (future revisions may require to ensure the validation is done up the entire chain). The evaluator shall ensure that a valid certificate is used, and that the validation function succeeds. The evaluator then attempts the test with a certificate that will be revoked (for each method chosen in the selection) to ensure when the certificate is no longer valid that the validation function fails. </test>
                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the TOE’s certificate does not contain the basicConstraints extension. The validation of the certificate path fails.</test>
                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the TOE’s certificate has the cA flag in the basicConstraints extension not set. The validation of the certificate path fails.</test>
                <test>The evaluator shall construct a certificate path, such that the certificate of the CA issuing the TOE’s certificate has the cA flag in the basicConstraints extension set to TRUE. The validation of the certificate path succeeds.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FIA_X509_EXT.2 X.509" name="Certificate Authentication" status="threshold">
          <f-element id="FIA_X509_EXT.2.1">
            <title>The TSF shall use X.509v3 certificates as defined by RFC 5280 to support authentication for 
              
              <selectables>
                <selectable>IPsec</selectable>
                <selectable>TLS</selectable>
                <selectable>HTTPS</selectable>
                <selectable>SSH</selectable>
              </selectables>
               and 
              <selectables>
                <selectable>code signing for system software updates</selectable>
                <selectable>code signing for integrity verification</selectable>
                <selectable><assignable>other uses</assignable></selectable>
                <selectable>no additional uses</selectable></selectables>.
            </title>
            <note role="application">The ST author’s selection shall match the selection of FTP_ITC.1.1.</note>
          </f-element>
          <f-element id="FIA_X509_EXT.2.2">
            <title>When the TSF cannot establish a connection to determine the validity of a certificate, the TSF shall 
              <selectables>
                <selectable>allow the administrator to choose whether to accept the certificate in these cases</selectable>
                <selectable>accept the certificate</selectable>
              <selectable>not accept the certificate</selectable></selectables>.
            </title>
            <note role="application">Often a connection must be established to check the revocation status of a certificate - either to download a CRL or to perform a lookup using OCSP. The selection is used to describe the behavior in the event that such a connection cannot be established (for example, due to a network error). If the TOE has determined the certificate valid according to all other rules in FIA_X509_EXT.1, the behavior indicated in the selection shall determine the validity. The TOE must not accept the certificate if it fails any of the other validation rules in FIA_X509_EXT.1. If the administrator-configured option is selected by the ST Author, the ST Author must also select the corresponding function in FMT_MOF_EXT.1.</note>
            <aactivity>The evaluator shall check the TSS to ensure that it describes how the TOE chooses which certificates to use, and any necessary instructions in the administrative guidance for configuring the operating environment so that the TOE can use the certificates.<htm:br></htm:br>
            The evaluator shall examine the TSS to confirm that it describes the behavior of the TOE when a connection cannot be established during the validity check of a certificate used in establishing a trusted channel. If the requirement that the administrator is able to specify the default action, then the evaluator shall ensure that the operational guidance contains instructions on how this configuration action is performed.<htm:br></htm:br>
            The evaluator shall perform Test 1 for each function listed in FIA_X509_EXT.2.1 that requires the use of certificates:<htm:br></htm:br>
            
              <testlist>
                <test>The evaluator shall demonstrate that using a certificate without a valid certification path results in the function failing. Using the administrative guidance, the evaluator shall then load a certificate or certificates needed to validate the certificate to be used in the function, and demonstrate that the function succeeds. The evaluator then shall delete one of the certificates, and show that the function fails.</test>
                <test>The evaluator shall demonstrate that using a valid certificate that requires certificate validation checking to be performed in at least some part by communicating with a non-TOE IT entity. The evaluator shall then manipulate the environment so that the TOE is unable to verify the validity of the certificate, and observe that the action selected in FIA_X509_EXT.2.2 is performed. If the selected action is administrator-configurable, then the evaluator shall follow the operational guidance to determine that all supported administrator-configurable options behave in their documented manner.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        
      </subsection>
      <subsection title="Security Management (FMT)" id="fmt1">
        <f-component id="FMT_SMR.2" name="Restrictions on Security Roles" status="threshold">
          <f-element id="FMT_SMR.2.1">
            <title>The TSF shall maintain the roles:<htm:br></htm:br>
              <ul>
                <li>Administrator.</li>
                <li>User.</li>
              </ul>
            </title>
          </f-element>
          <f-element id="FMT_SMR.2.2">
            <title>The TSF shall be able to associate users with roles.
            </title>
          </f-element>
          <f-element id="FMT_SMR.2.3">
            <title>The TSF shall ensure that the conditions
              <ul>
                <li>Administrator role shall be able to administer the TOE locally;</li>
                <li>Administrator role shall be able to administer the TOE remotely;</li>
                <li>Administrator role shall be able to manage the audit capabilities of the TOE.</li>
              </ul>
              are satisfied.
            </title>
            <note role="application">
              Unprivileged users are not able to administer the TOE or manage the audit capabilities of the TOE.<htm:br></htm:br>
              FMT_SMR.2.2 requires that user accounts be associated with only one role. However, note that multiple users may have the same role, and the TOE is not required to restrict roles to a single person.<htm:br></htm:br>
              FMT_SMR.2.3 requires that an authorized administrator be able to administer the TOE through the local console and through a remote mechanism (IPsec, SSH, TLS, TLS/HTTPS). For multiple component TOEs, only the TOE components providing the management control and configuration of the other TOE components require a local administration interface. The Administrator role is used for managing the Audit system.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator shall examine the TSS to verify that they describe the administrator role and the powers granted to and limitations of the role. The evaluator shall review the operational guidance to ensure that it contains instructions for administering the TOE both locally and remotely, including any configuration that needs to be performed on the client for remote administration. In the course of performing the testing activities for the evaluation, the evaluator shall use all supported interfaces, although it is not necessary to repeat each test involving an administrative action with each interface. The evaluator shall ensure, however, that each supported method of administering the TOE that conforms to the requirements of this PP be tested; for instance, if the TOE can be administered through a local hardware interface; SSH; and TLS/HTTPS; then all three methods of administration must be exercised during the evaluation team’s test activities.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FMT_MSA_EXT.1" name="Default data sharing configuration" status="threshold">
          <f-element id="FMT_MSA_EXT.1.1">
            <title>The TSF shall by default enforce a policy prohibiting sharing of data between Guest VMs using 
              <selectables>
                <selectable>no mechanism</selectable>
                <selectable>virtual networking</selectable>
                <selectable><assignable>other inter-VM data sharing mechanisms</assignable></selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FMT_MSA_EXT.1.2">
            <title>The TSF shall allow Administrators to specify alternative initial configuration values to override the default values when a Guest VM is created.
            </title>
            <note role="application">
              By default the VMM must enforce a policy prohibiting sharing of data between VMs. The default policy applies to all mechanisms for sharing data between VMs, including inter-VM communication channels, shared physical devices, shared virtual devices, and virtual networks. The default policy does not apply to covert channels and architectural side-channels.<htm:br></htm:br>
              The ST author should select “no mechanism” in the unlikely event that the VS implements no mechanisms for transferring data between Guest VMs. Otherwise, the ST author should select “virtual networking” and all other mechanisms through which data can be transferred between Guest VMs. This should be the same list of mechanisms supplied in FDP_VMS_EXT.1.<htm:br></htm:br>
              Examples of non-network inter-VM sharing mechanisms are:<htm:br></htm:br>
              <htm:ul>
                <htm:li>User interface-based mechanisms, such as copy/pate and drag-and-drop.</htm:li>
                <htm:li>Shared virtual or physical devices</htm:li>
                <htm:li>API-based mechanisms such as Hypercalls.</htm:li>
              </htm:ul>
            </note>
            <aactivity>This requirement is met if FDP_VMS_EXT.1 is met.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FMT_MOF_EXT.1" name="Management of security functions behavior" status="threshold">
          <f-element id="FMT_MOF_EXT.1.1">
            <title>The TSF shall be capable of performing the following management functions controlled by authorized Administrators only:
           <ol>
             <li>Ability to administer the Virtualization System locally and remotely;</li>
             <li>Ability to update the Virtualization System, and to verify the updates using 
              <selectables>
                <selectable>digital signature</selectable>
                <selectable>published hash</selectable>
                <selectable>no other mechanism</selectable>
              </selectables> capability prior to installing those updates;</li>
             <li>Ability to configure password policy<htm:br></htm:br>
             <ul>
               <li>Minimum password length,</li>
               <li>Minimum password complexity,</li>
               <li>Maximum password lifetime.</li>
             </ul>
             </li>
             <li>Ability to create, delete, and configure VMs;</li>
             <li>Ability to set default initial VM configurations;</li>
             <li>Ability to configure virtual networks including VM;</li>
             <li>Ability to manage the audit system and audit data;</li>
             <li>Ability to configure VM access to physical devices;</li>
             <li>Ability to configure inter-VM data sharing;</li>
             <li>Ability to enable/disable VM access to Hypercall functions;</li>
             <li>Ability to configure removable media policy;</li>
             <li>
              <selectables linebreak="yes">
                <selectable>Ability to configure the list of TOE-provided services available before an entity is identified and authenticated, as specified in FIA_UIA_EXT.1</selectable>
                <selectable>Ability to configure the cryptographic functionality</selectable>
                <selectable>Ability to change default authorization factors</selectable>
                <selectable>Ability to enable/disable screen lock</selectable>
                <selectable>Ability to configure screen lock inactivity timeout</selectable>
                <selectable>Ability to configure remote connection inactivity timeout</selectable>
                <selectable>Ability to configure lockout policy for unsuccessful authentication attempts through
                  <selectables>
                    <selectable>timeouts between attempts</selectable>
                    <selectable>limiting number of attempts during a time period</selectable>
                  </selectables>
                </selectable>
                <selectable>Ability to configure name/address of directory server to bind with</selectable>
                <selectable>Ability to configure name/address of audit/logging server to which to send audit/logging records</selectable>
                <selectable>Ability to configure name/address of network time server,</selectable>
                <selectable>No other capabilities</selectable>
              </selectables>.
             </li>
           </ol>
            </title>
            <note role="application">
              This SFR fills the roles of both FMT_MOF.1 and FMT_SMF.1.<htm:br></htm:br>
              The TOE must provide functionality for both local and remote administration. Administration is considered “local” if management communications between the Administrator and the Management Subsystem do not travel outside the data center or site that hosts the Virtualization System, and the traffic does not travel on other than the Management network.<htm:br></htm:br>
              Administration is considered “remote” if the Administrator is located outside the data center or site, or if traffic between the Administrator and the Management Subsystem travels on a network other than the dedicated Management network—whether encrypted or not. Note that is it possible to perform “remote” administration from a VM running on the host that is being managed if communications between the VM and the Management Subsystem run over an operational (a.k.a. Guest) network.<htm:br></htm:br>
              If the TOE implements any of the capabilities under (12), then the ST author should make the appropriate choices within the selection. Otherwise, "no other capabilities" should be selected.<htm:br></htm:br>
              Management functions must be performed only by VS Administrators. The VS Management interface must authenticate users of the Management System. A user must authenticate to the Management Subsystem to receive Administrator credentials.<htm:br></htm:br>
              There is no requirement to authenticate unprivileged users of the Virtualization System. Users that have access to VMs but not to the Management Subsystem need not authenticate to the Virtualization System in order to use Guest VMs. Requirements for authentication of VM users is determined by the policies of the domains running within the Guest VMs.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS and Operational Guidance to ensure that it describes which security management functions require Administrator privilege and the actions associated with each management function. The evaluator shall verify that the security management functions and actions can be executed only by authorized Administrators.<htm:br></htm:br>
              The evaluator must attempt to access each of the functions and policies in FMT_MOF_EXT.1.1 as a non-Administrative user and verify that the attempts fail. In addition, the evaluator must attempt to perform the below-listed management functions. The requirement is met if all attempts fail.<htm:br></htm:br>
              <testlist>
                <test>The evaluator must attempt to change a VS configuration setting.</test>
                <test>The evaluator must attempt to create, delete, and reconfigure a VM.</test>
              </testlist>
            </aactivity>
          </f-element>
          <f-element id="FMT_MOF_EXT.1.2">
            <title>
              The TSF shall be capable of performing the following management functions controlled by 
              <selectables>
                <selectable>authorized Administrators</selectable>
                <selectable>unprivileged Users</selectable>
              </selectables>: 
              <selectables linebreak="yes">
                <selectable>Ability to connect/disconnect removeable devices to/from a VM</selectable>
                <selectable>Ability to start a VM</selectable>
                <selectable>Ability to checkpoint a VM</selectable>
                <selectable>Ability to suspend a VM</selectable>
                <selectable>No other capabilities</selectable>
              </selectables>.
            </title>
            <aactivity>
              The evaluator shall examine the TSS and Operational Guidance to ensure that it describes which privileges are required for each security management function selected in FMT_MOF_EXT.1.2. The evaluator shall verify that the security management functions and actions can be executed by users or administrators with the identified privileges.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FMT_SMO_EXT.1" name="Separation of Management and Operational Networks" status="threshold">
          <f-element id="FMT_SMO_EXT.1.1">
            <title>The TSF shall support the configuration of separate management and operational networks through 
              <selectables>
                <selectable>physical means</selectable>
                <selectable>logical means</selectable>
                <selectable>TLS</selectable>
                <selectable>TLS/HTTPS</selectable>
                <selectable>IPsec</selectable>
                <selectable>SSH</selectable>
              </selectables>.
            </title>
            <note role="application"> 
              Management communications must be separate from user workloads. Administrative communications—including communications between physical hosts concerning load balancing, audit data, VM startup and shutdown—must be separate from guest operational networks.<htm:br></htm:br>
              “Physical means” refers to using separate physical networks for management and operational networks. For example, the machines in the management network are connected by separate cables plugged into separate and dedicated physical ports on each physical host.<htm:br></htm:br>
              “Logical means” refers to using separate network cables to connect physical hosts together using general-purpose networking ports. The management and operational networks are kept separate within the hosts using separate virtualized networking components.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to verify that it describes how management and operational networks may be separated.<htm:br></htm:br>
              The evaluator shall examine the operational guidance to verify that it details how to configure the VS with separate Management and Operational Networks.<htm:br></htm:br>
              The evaluator shall configure the management network as documented. If separation is cryptographic or logical, then the evaluator shall capture packets on the management network. If Guest network traffic is detected, the requirement is not met.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
      </subsection>
      <subsection title="Protection of the TSF (FPT)" id="fpt1">
        <f-component id="FPT_TUD_EXT.1" name="Trusted Updates to the Virtualization System" status="threshold">
          <f-element id="FPT_TUD_EXT.1.1">
            <title>The TSF shall provide Administrators the ability to query the currently executed version of the TOE firmware/software as well as the most recently installed version of the TOE firmware/software.
            </title>
            <note role="application">The version currently running (being executed) may not be the version most recently installed. For instance, maybe the update was installed but the system requires a reboot before this update will run. Therefore, it needs to be clear that the query should indicate both the most recently executed version as well as the most recently installed update.</note>
          </f-element>
          <f-element id="FPT_TUD_EXT.1.2">
            <title>The TSF shall provide Administrators the ability to manually initiate updates to TOE firmware/software and 
              <selectables>
                <selectable>support automatic updates</selectable>
                <selectable>no other update mechanism</selectable>
              </selectables>.
            </title>
          </f-element>
          <f-element id="FPT_TUD_EXT.1.3">
            <title>The TSF shall provide means to authenticate firmware/software updates to the TOE using a 
              <selectables>
                <selectable>digital signature mechanism</selectable>
                <selectable>published hash</selectable>
              </selectables> prior to installing those updates.
            </title>
            <note role="application">
              The digital signature mechanism referenced in FPT_TUD_EXT.1.3 is one of the algorithms specified in FCS_COP.1(3).<htm:br></htm:br>
              If certificates are used by the update verification mechanism, certificates are validated in accordance with FIA_X509_EXT.1 and should be selected in FIA_X509_EXT.2.1. Additionally, FPT_TUD_EXT.2.1 must be included in the ST.<htm:br></htm:br>
              “Update” in the context of this SFR refers to the process of replacing a non-volatile, system resident software component with another. The former is referred to as the NV image, and the latter is the update image. While the update image is typically newer than the NV image, this is not a requirement. There are legitimate cases where the system owner may want to rollback a component to an older version (e.g. when the component manufacturer releases a faulty update, or when the system relies on an undocumented feature no longer present in the update). Likewise, the owner may want to update with the same version as the NV image to recover from faulty storage.<htm:br></htm:br>
              All discrete software components (e.g. applications, drivers, kernel, firmware) of the TSF, should be digitally signed by the corresponding manufacturer and subsequently verified by the mechanism performing the update. Since it is recognized that components may be signed by different manufacturers, it is essential that the update process verify that both the update and NV images were produced by the same manufacturer (e.g. by comparing public keys) or signed by legitimate signing keys (e.g. successful verification of certificates when using X.509 certificates).<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall verify that the TSS describes all TSF software update mechanisms for updating the system software. Updates to the TOE either have a hash associated with them, or are signed by an authorized source. The evaluator shall verify that the description includes either a digital signature or published hash verification of the software before installation and that installation fails if the verification fails. The evaluator shall verify that the TSS describes the method by which the digital signature or published hash is verified to include how the candidate updates are obtained, the processing associated with verifying the update, and the actions that take place for both successful and unsuccessful verification. If digital signatures are used, the evaluator shall also ensure the definition of an authorized source is contained in the TSS.<htm:br></htm:br>
              If the ST author indicates that a certificate-based mechanism is used for software update digital signature verification, the evaluator shall verify that the TSS contains a description of how the certificates are contained on the device. The evaluator also ensures that the TSS (or administrator guidance) describes how the certificates are installed/updated/selected, if necessary.<htm:br></htm:br>
              The evaluator shall perform the following tests:<htm:br></htm:br>
              <testlist>
                <test>The evaluator performs the version verification activity to determine the current version of the product. The evaluator obtains a legitimate update using procedures described in the operational guidance and verifies that it is successfully installed on the TOE. After the update, the evaluator performs the version verification activity again to verify the version correctly corresponds to that of the update.</test>
                <test>The evaluator performs the version verification activity to determine the current version of the product. The evaluator obtains or produces illegitimate updates as defined below, and attempts to install them on the TOE. The evaluator verifies that the TOE rejects all of the illegitimate updates. The evaluator performs this test using all of the following forms of illegitimate updates:
                <htm:ol>
                  <htm:li>A modified version (e.g. using a hex editor) of a legitimately signed or hashed update</htm:li>
                  <htm:li>An image that has not been signed/hashed</htm:li>
                  <htm:li>An image signed with an invalid hash or invalid signature (e.g. by using a different key as expected for creating the signature or by manual modification of a legitimate hash/signature)</htm:li>
                </htm:ol>
                </test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_VIV_EXT.1 VMM" name="Isolation from VMs" status="threshold">
          <f-element id="FPT_VIV_EXT1.1">
            <title>The TSF must ensure that software running in a VM is not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform.
            </title>
          </f-element>
          <f-element id="FPT_VIV_EXT.1.2">
            <title>The TSF must ensure that a Guest VM is unable to invoke platform code that runs at a privilege level equal to or exceeding that of the VMM without involvement of the VMM.
            </title>
            <note role="application">
              This requirement is intended to ensure that software running within a Guest VM cannot compromise other VMs, the VMM, or the platform. This requirement is not met if Guest VM software—whatever its privilege level—can crash the Virtualization System or the Platform, or breakout of its virtual hardware abstraction to gain execution on the platform, within or outside of the context of the VMM.<htm:br></htm:br>
              This requirement is not violated if software running within a VM can crash the Guest OS and there is no way for an attacker to gain execution in the VMM or outside of the virtualized domain.<htm:br></htm:br>
              FPT_VIV_EXT.1.2 addresses several specific mechanisms that must not be permitted to bypass the VMM and invoke privileged code on the Platform.
              At a minimum, the TSF should enforce the following:<htm:br></htm:br>
            <htm:ol type="a">
              <htm:li>On the x86 platform, a virtual System Management Interrupt (SMI) cannot invoke platform System Management Mode (SMM).</htm:li>
              <htm:li>An attempt to update virtual firmware or virtual BIOS cannot cause physical platform firmware or physical platform BIOS to be modified.</htm:li>
              <htm:li>An attempt to update virtual firmware or virtual BIOS cannot cause the VMM to be modified.</htm:li>
            </htm:ol>
              Of the above, (a) does not apply to platforms that do not support SMM. The rationale behind activity (c) is that a firmware update of a single VM must not affect other VMs. So if multiple VMs share the same firmware image as part of a common hardware abstraction, then the update of a single machine’s BIOS must not be allowed to change the common abstraction. The virtual hardware abstraction is part of the VMM.<htm:br></htm:br>
              This is an attestation requirement. The vendor must attest that software running in a VM is not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform. The vendor must attest that there are no design or implementation flaws that permit the above.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator ensures that the ST includes the following statement attesting that software running in a VM is not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform:<htm:br></htm:br>
              Software running in a VM is not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform. There are no known design or implementation flaws that bypass or defeat VM isolation.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_HCL_EXT.1" name="Hypercall Controls" status="threshold">
          <f-element id="FPT_HCL_EXT.1.1">
            <title>The TSF shall provide a Hypercall interface for Guest VMs to use to invoke functionality provided by the VMM.
            </title>
          </f-element>
          <f-element id="FPT_HCL_EXT.1.2">
            <title>The TSF shall allow administrators to configure any VM’s Hypercall interface to 
              <selectables>
                <selectable>enable</selectable>
                <selectable>disable</selectable>
              </selectables> access to Hypercall functions.
            </title>
          </f-element>
          <f-element id="FPT_HCL_EXT.1.3">
            <title>The TSF shall permit exceptions to the configuration of the following Hypercall interface functions: 
              <assignable>list of functions that are not subject to the configuration controls in FPT_HCL_EXT.1.2</assignable>.
            </title>
          </f-element>
          <f-element id="FPT_HCL_EXT.1.4">
            <title>The TSF shall validate the parameters passed to the hypercall interface prior to execution of the VMM functionality exposed by that interface.
            </title>
            <note role="application">
              The purpose of this requirement is to help ensure the integrity of the VMM by documenting the attack surface exposed to Guest VMs, and to ensure that Hypercall parameters supplied by software running in the untrusted Guest VM are properly validated prior to use by the VMM.<htm:br></htm:br>
              A Hypercall interface allows a set of VMM functions to be invoked by software running within a VM. Hypercall interfaces are used by virtualization-aware VMs to communicate and exchange data with the VMM. For example, a VM could use a hypercall interface to get information about the real world, such as the time of day or the underlying hardware of the host system. A hypercall could also be used to transfer data between VMs through a copy-paste mechanism. Because hypercall interfaces expose the VMM to Guest VMs, these interfaces constitute attack surface. In order to minimize attack surface, these interfaces must be limited to the minimum needed to support VM functionality.<htm:br></htm:br>
              For the selection in FPT_HCL_EXT.1.2, the ST author selects the applicable actions that administrators can perform to configure functions supported by the interface.<htm:br></htm:br>
              For the assignment in FPT_HCL_EXT.1.3, the ST author lists the interface functions that cannot be configured per FPT_HCL_EXT.1.2.<htm:br></htm:br>
              A vendor-provided test harness may reduce evaluation time.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS or operational guidance to ensure it includes the documentation of the interface, including all possible functions available via the interface. Documentation must include, for each function, how to call the function, function parameters and legal values, configuration settings for enabling/disabling the function, and conditions under which the function can be disabled. The TSS must also specify those functions that cannot be disabled.<htm:br></htm:br>
              The evaluator shall examine the operational guidance to ensure it contains instructions for how to configure interface functions per FPT_HCL_EXT.1.2.<htm:br></htm:br>
              The evaluator shall perform the following tests:<htm:br></htm:br>
              <testlist>
                <test>For each configurable function that meets FPT_HCL_EXT.1.2, the evaluator shall follow the operational guidance to enable the function. The evaluator shall then attempt to call each function from within the VM. If the call is allowed, then the test succeeds.</test>
                <test>For each configurable function, the evaluator shall configure the TSF to disable the function. The evaluator shall then attempt to call the function from within the VM. If the call is blocked, then the test succeeds.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_VDP_EXT.1" name="Virtual Device Parameters" status="threshold">
          <f-element id="FPT_VDP_EXT.1.1">
            <title>The TSF shall provide interfaces for virtual devices implemented by the VMM as part of the virtual hardware abstraction.
            </title>
          </f-element>
          <f-element id="FPT_VDP_EXT.1.2">
            <title>The TSF shall validate the parameters passed to the virtual device interface prior to execution of the VMM functionality exposed by those interfaces.
            </title>
            <note role="application">
              The purpose of this requirement is to ensure that the VMM is not vulnerable to compromise through the processing of malformed data passed to the virtual device interface from a Guest OS. The VMM cannot assume that any data coming from a VM is well-formed—even if the virtual device interface is unique to the Virtualization System and the data comes from a virtual device driver supplied by the Virtualization Vendor.<htm:br></htm:br>
              FPT_VDP_EXT.1.2 is an attestation requirement. The vendor must attest that parameters passed from a VM to a virtual device interface are not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform. The vendor must attest that there are no design or implementation flaws that permit the above.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to ensure it documents all virtual device interfaces, including I/O ports, protocols, and data formats.<htm:br></htm:br>
              The evaluator ensures that the ST includes the following statement attesting that parameters passed from a Guest VM to virtual device interfaces are thoroughly validated, that all values outside the legal values specified in the TSS are rejected, and that any data passed to the virtual device interfaces is unable to degrade or disrupt the functioning of other VMs, the VMM, or the Platform:<htm:br></htm:br>
              Parameters passed from Guest VMs to virtual device interfaces are thoroughly validated and all illegal values (as specified in the TSS) are rejected. Additionally, parameters passed from Guest VMs to virtual device interfaces are not able to degrade or disrupt the functioning of other VMs, the VMM, or the Platform. Thorough testing and architectural design reviews have been conducted to ensure the accuracy of these claims, and there are no known design or implementation flaws that bypass or defeat the security of the virtual device interfaces.<htm:br></htm:br>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_HAS_EXT.1" name="Hardware Assists" status="threshold">
          <f-element id="FPT_HAS_EXT.1.1">
            <title>The VMM shall use 
              <assignable>list of hardware-based virtualization assists</assignable> to reduce or eliminate the need for binary translation.
            </title>
          </f-element>
          <f-element id="FPT_HAS_EXT.1.2">
            <title>The VMM shall use 
              <assignable>list of hardware-based virtualization memory-handling assists</assignable> to reduce or eliminate the need for shadow page tables.
            </title>
            <note role="application">
              These hardware-assists help reduce the size and complexity of the VMM, and thus, of the trusted computing base, by eliminating or reducing the need for paravirtualization or binary translation. Paravirtualization involves modifying guest software so that instructions that cannot be properly virtualized are never executed on the physical processor.<htm:br></htm:br>
              For the assignment in FPT_HAS_EXT.1, the ST author lists the hardware-based virtualization assists on all platforms included in the ST that are used by the VMM to reduce or eliminate the need for software-based binary translation. Examples for the x86 platform are Intel VT-x and AMD-V. “None” is an acceptable assignment for platforms that do not require virtualization assists in order to eliminate the need for binary translation. This must be documented in the TSS.<htm:br></htm:br>
              For the assignment in FPT_HAS_EXT.1.2, the ST author lists the set of hardware-based virtualization memory-handling extensions for all platforms listed in the ST that are used by the VMM to reduce or eliminate the need for shadow page tables. Examples for the x86 platform are Intel EPT and AMD RVI. “None” is an acceptable assignment for platforms that do not require memory-handling assists in order to eliminate the need for shadow page tables. This must be documented in the TSS.<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to ensure that it states, for each platform listed in the ST, the hardware assists and memory-handling extensions used by the TOE on that platform. The evaluator shall ensure that these lists correspond to what is specified in the applicable FPT_HAS_EXT component.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_EEM_EXT.1" name="Execution Environment Mitigations" status="threshold">
          <f-element id="FPT_EEM_EXT.1.1">
            <title>The TSF shall take advantage of execution environment-based vulnerability mitigation mechanisms supported by the Platform such as:
              <selectables linebreak="yes">
                <selectable>Address-space randomization</selectable>
                <selectable>Memory execution protection (e.g. DEP)</selectable>
                <selectable>Stack buffer overflow protection</selectable>
                <selectable>Heap corruption detection</selectable>
                <selectable><assignable>other mechanisms</assignable></selectable>
              </selectables>.
            </title>
            <note role="application">
              Processor manufacturers, compiler developers, and operating system vendors have developed execution environment-based mitigations that increase the cost to attackers by adding complexity to the task of compromising systems. Software can often take advantage of these mechanisms by using APIs provided by the operating system or by enabling the mechanism through compiler or linker options.<htm:br></htm:br>
              This requirement does not mandate that these protections be enabled throughout the Virtualization System—only that they be enabled where they have likely impact. For example, code that receives and processes user input should take advantage of these mechanisms.<htm:br></htm:br>
              For the selection, the ST author selects the supported mechanism(s) and uses the assignment to include mechanisms not listed in the selection, if any.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator shall examine the TSS to ensure that it states, for each platform listed in the ST, the execution environment-based vulnerability mitigation mechanisms used by the TOE on that platform. The evaluator shall ensure that the lists correspond to what is specified in FPT_EEM_EXT.1.1.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_RDM_EXT.1" name="Removable Devices and Media" status="threshold">
          <f-element id="FPT_RDM_EXT.1.1">
            <title>The TSF shall implement controls for handling the transfer of virtual and physical removable media and virtual and physical removable media devices between information domains.
            </title>
          </f-element>
          <f-element id="FPT_RDM_EXT.1.2">
            <title>The TSF shall enforce the following rules when <assignable>virtual or physical removable media and virtual or physical removable media devices</assignable> are switched between information domains, then
              <selectables linebreak="yes">
                <selectable>the Administrator has granted explicit access for the media or device to be connected to the receiving domain</selectable>
                <selectable>the media in a device that is being transferred is ejected prior to the receiving domain being allowed access to the device</selectable>
                <selectable>the user of the receiving domain expressly authorizes the connection</selectable>
                <selectable>the device or media that is being transferred is prevented from being accessed by the receiving domain</selectable>
              </selectables>.
            </title>
            <note role="application">
              The purpose of these requirements is to ensure that VMs are not given inadvertent access to information from different domains because of media or removable media devices left connected to physical machines.<htm:br></htm:br>
              Removable media is media that can be ejected from a device, such as a compact disc, floppy disk, SD, or compact flash memory card.<htm:br></htm:br>
              Removable media devices are removable devices that include media, such as USB flash drives and USB hard drives. Removable media devices can themselves contain removable media (e.g. USB CDROM drives).<htm:br></htm:br>
              For purposes of this requirement, an Information Domain is:<htm:br></htm:br>
              <htm:ol type="a">
                A VM or collection of VMs,<htm:br></htm:br>
                The Virtualization System,<htm:br></htm:br>
                Host OS, or<htm:br></htm:br>
                Management Subsystem.<htm:br></htm:br>
              </htm:ol>
              These requirements also apply to virtualized removable media—such as virtual CD drives that connect to ISO images—as well as physical media—such as CDROMs and USB flash drives. In the case of virtual CDROMs, virtual ejection of the virtual media is sufficient.<htm:br></htm:br>
              In the first assignment, the ST author lists all removable media and removable media devices (both virtual and real) that are supported by the TOE. The ST author then selects actions that are appropriate for all removable media and removable media devices (both virtual and real) that are being claimed in the assignment. <htm:br></htm:br>
              For clarity, the ST author may iterate this requirement so that like actions are grouped with the removable media or devices to which they apply (e.g., the first iteration could contain all devices for which media is ejected on a switch; the second iteration could contain all devices for which access is prevented on switch, etc.).<htm:br></htm:br>
            </note>
            <aactivity>
              The evaluator shall examine the TSS to ensure it describes the association between the media or devices supported by the TOE and the actions that can occur when switching information domains. The evaluator shall examine the operational guidance to ensure it documents how an administrator or user configures the behavior of each media or device.<htm:br></htm:br>
              The evaluator shall perform the following test for each listed media or device:<htm:br></htm:br>
              <testlist>
                <test>The evaluator shall configure two VMs that are members of different information domains, with the media or device connected to one of the VMs. The evaluator shall disconnect the media or device from the VM and connect it to the other VM. The evaluator shall verify that the action performed is consistent with the action assigned in the TSS.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_DVD_EXT.1" name="Non-Existence of Disconnected Virtual Devices" status="threshold">
          <f-element id="FPT_DVD_EXT.1.1">
            <title>The TSF shall limit a Guest VM’s access to virtual devices to those that are present in the VM’s current hardware configuration.
            </title>
            <note role="application">
              The virtualized hardware abstraction implemented by a particular VS might include the virtualized interfaces for many different devices. Sometimes these devices are not present in a particular instantiation of a VM. The interface for devices not present must not accessible by the VM.<htm:br></htm:br>
              Such interfaces include memory buffers and processor I/O ports.<htm:br></htm:br>
              The purpose of this requirement is to reduce the attack surface of the VMM by closing unused interfaces.<htm:br></htm:br>
            </note>
            <aactivity>The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall connect a device to a VM, then using a device driver running in the guest, scan the VM’s processor I/O ports to ensure that the device’s ports are present. (The device’s interface should be documented in the TSS under FPT_VDP_EXT.1.) The evaluator shall remove the device from the VM and run the scan again. This requirement is met if the device’s I/O ports are no longer present.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_TUD_EXT.2" name="Trusted Update based on Certificates" status="sel-based">
          <f-element id="FPT_TUD_EXT.2.1">
            <title>The TSF shall not install an update if the code signing certificate is deemed invalid.</title>
            <note role="application">Certificates may optionally be used for code signing of system software updates (FPT_TUD_EXT.1.3). This element must be included in the ST if certificates are used for validating updates. If “code signing for system software updates” is selected in FIA_X509_EXT.2.1, FPT_TUD_EXT.2.1 must be included in the ST.<htm:br></htm:br>
              Validity is determined by the certificate path, the expiration date, and the revocation status in accordance with FIA_X509_EXT.1.<htm:br></htm:br></note>
            <aactivity>The assurance activity for this requirement is performed in conjunction with the assurance activity for FIA_X509_EXT.1 and FIA_X509_EXT.2.<htm:br></htm:br>
              
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_INT_EXT.1" name="Support for Introspection" status="objective">
          <f-element id="FPT_INT_EXT.1.1">
            <title>The TSF shall support a mechanism for permitting the VMM or privileged VMs to access the internals of another VM for purposes of introspection.
            </title>
            <note role="application">Introspection can be used to support malware and anomaly detection from outside of the guest environment. This not only helps protect the Guest OS, it also protects the VS by providing an opportunity for the VS to detect threats to itself that originate within VMs, and that may attempt to break out of the VM and compromise the VMM or other VMs.<htm:br></htm:br>
              The hosting of malware detection software outside of the guest VM helps protect the guest and helps ensure the integrity of the malware detection/antivirus software. This capability can be implemented in the VMM itself, but ideally it should be hosted by a Service VM so that it can be better contained and does not introduce bugs into the VMM.</note>
            <aactivity>The evaluator shall examine the TSS documentation to verify that it describes the interface for VM introspection and whether the introspection is performed by the VMM or another VM.<htm:br></htm:br>
              The evaluator shall examine the operational guidance to ensure that it contains instructions for configuration of the introspection mechanism.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_DDI_EXT.1" name="Device Driver Isolation"  status="objective">
          <f-element id="FPT_DDI_EXT.1.1">
            <title>The TSF shall ensure that device drivers for physical devices are isolated from the VMM.
            </title>
            <note role="application">In order to function on physical hardware, the VMM must have access to the device drivers for the physical platform on which it runs. These drivers are often written by third parties, and yet are effectively a part of the VMM. Thus the integrity of the VMM in part depends on the quality of third party code that the virtualization vendor has no control over.<htm:br></htm:br>
              By encapsulating these drivers within one or more dedicated driver domains (e.g. Service VM or VMs) the damage of a driver failure or vulnerability can be contained within the domain, and would not compromise the VMM.
            </note>
            <aactivity>The evaluator shall examine the TSS documentation to verify that it describes the mechanism used for device driver isolation.
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_CIM_EXT.1" name="Collection of Integrity Measurements"  status="objective">
          <f-element id="FPT_CIM_EXT.1.1">
            <title>The TSF shall support the collection of integrity measurements from the host platform and make them available to the Management Subsystem for display to an Administrator.
            </title>
            <note role="application">If the platform computes integrity measurements of the platform or Virtualization Solution (e.g. firmware measurements stored in a TPM), then the measurements must be made available to the Management Subsystem. An Administrator should be able to examine the measurements and make a judgment about the integrity of the host platform. This requirement does not mandate that the VS itself compute measurements, nor does it require that the measurements be sent off platform for attestation to a third-party.</note>
            <aactivity>The evaluator shall verify that the TSS or Operational Guidance describes how integrity measurements are performed and made available to the Management Subsystem. The evaluator shall examine the operational guidance to verify that it documents how to access the measurements in the Management Subsystem.<htm:br></htm:br>
              The evaluator shall perform the following tests:
              <testlist>
                <test>The evaluator shall start the VS, login as an Administrator, and verify that the measurements are viewable in the Management Subsystem.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
        <f-component id="FPT_IDV_EXT.1" name="Software Identification and Versions"  status="objective">
          <f-element id="FPT_IDV_EXT.1.1">
            <title>The TSF shall include software identification (SWID) tags that contain a SoftwareIdentity element and an Entity element as defined in ISO/IEC 19770-2:2009.
            </title>
          </f-element>
          <f-element id="FPT_IDV_EXT.1.2">
            <title>The TSF shall store SWIDs in a .swidtag file as defined in ISO/IEC 19770-2:2009.
            </title>
            <note role="application">SWID tags are XML files embedded within software that provide a standard method for IT departments to track and manage the software. The presence of SWIDs can greatly simplify the software management process and improve security by enhancing the ability of IT departments to manage updates.</note>
            <aactivity>The evaluator shall examine the TSS to ensure it describes how SWID tags are implemented and the format of the tags. The evaluator shall verify that the format complies with FPT_IDV_EXT.1.1 and that SWIDs are stored in accordance with FPT_IDV_EXT.1.2.<htm:br></htm:br>
              The evaluator shall perform the following test:
              <testlist>
                <test>The evaluator shall check for the existence of SWID tags in a .swidtag file. The evaluator shall open the file and verify that each SWID contains at least a SoftwareIdentity element and an Entity element.</test>
              </testlist>
            </aactivity>
          </f-element>
        </f-component>
         <f-component id="FTA_TAB.1" name="TOE Access Banners" status="optional">
          <f-element id="FTA_TAB.1">
            <title>Before establishing an administrator session, the TSF shall display an advisory warning message regarding unauthorized use of the TOE.</title>
            <aactivity>The evaluator shall configure the TOE to display the advisory warning message "TEST TEST Warning Message TEST TEST". The evaluator shall then log out and confirm that the advisory message is displayed before logging in can occur.</aactivity>
          </f-element>
        </f-component>
      </subsection>
    </section>
    
    <section title="Security Assurance Requirements" id="SARs">
      The Security Objectives for the TOE in Section 3 were constructed to address threats identified in Section 2. The Security Functional Requirements (SFRs) in Section 4.2 are a formal instantiation of the Security Objectives. The PP draws from the CC Security Assurance Requirements (SARs) to frame the extent to which the evaluator assesses the documentation applicable for the evaluation and performs independent testing.<htm:br></htm:br>
      While this section contains the complete set of SARs from the CC, the Assurance Activities to be performed by an evaluator are detailed both in Section 4.2 as well as in this section.<htm:br></htm:br>
      The general model for evaluation of TOEs against STs written to conform to this PP is as follows:<htm:br></htm:br>
      After the ST has been approved for evaluation, the Common Criteria Testing Laboratory (CCTL) will obtain the TOE, supporting environmental IT, and the administrative guides for the TOE. The Assurance Activities listed in the ST (which will be refined by the CCTL to be TOE-specific, either within the ST or in a separate document) will then be performed by the CCTL. The results of these activities will be documented and presented (along with the administrative guidance used) for validation.<htm:br></htm:br>
      For each family, “Developer Notes” are provided on the developer action elements to clarify what, if any, additional documentation/activity needs to be provided by the developer. For the content/presentation and evaluator activity elements, additional assurance activities are described as a whole for the family, rather than for each element. Additionally, the assurance activities described in this section are complementary to those specified in Section 4.2.<htm:br></htm:br>
      The TOE security assurance requirements, summarized in Table 2, identify the management and evaluative activities required to address the threats identified in Section 2 of this PP.<htm:br></htm:br>
      
      <!--table from page 60 -->
       <htm:table border="1">
        <htm:caption>TOE Security Assurance Requirements</htm:caption> 
        <htm:tr class="header" >
          <htm:th>Assurance Class</htm:th>
          <htm:th>Assurance Components</htm:th>
          <htm:th>Assurance Components Description</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td valign="top">Development</htm:td>
          <htm:td>ADV_FSP.1</htm:td>
          <htm:td>Basic Functional Specification</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td rowspan="2" valign="top">Guidance Documents</htm:td>
          <htm:td>AGD_OPE.1</htm:td>
          <htm:td>Operational User Guidance</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>AGD_PRE.1</htm:td>
          <htm:td>Preparative Procedures</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td rowspan="3">Life-Cycle Support</htm:td>
          <htm:td>ALC_CMC.1</htm:td>
          <htm:td>Labeling of the TOE</htm:td>
        </htm:tr>
         <htm:tr>
           <htm:td>ALC_CMS.1</htm:td>
           <htm:td>TOE CM Coverage</htm:td>
         </htm:tr>
         <htm:tr>
           <htm:td>ALC_TSU_EXT</htm:td>
           <htm:td>Timely Security Updates</htm:td>
         </htm:tr>
         <htm:tr>
          <htm:td rowspan="6">Security Target Evaluation</htm:td>
           <htm:td>ASE_CCL.1</htm:td>
           <htm:td>Conformance Claims</htm:td>
        </htm:tr>
         <htm:tr>
           <htm:td>ASE_ECD.1</htm:td>
           <htm:td>Extended Components Definition</htm:td>
         </htm:tr>
         <htm:tr>
           <htm:td>ASE_INT.1</htm:td>
           <htm:td>ST Introduction</htm:td>
         </htm:tr>
         <htm:tr>
           <htm:td>ASE_OBJ.1</htm:td>
           <htm:td>Security Objectives for the Operational Environment</htm:td>
         </htm:tr>
         <htm:tr>
           <htm:td>ASE_REQ.1</htm:td>
           <htm:td>Stated Security Requirements</htm:td>
         </htm:tr>
         <htm:tr>
           <htm:td>ASE_TSS.1</htm:td>
           <htm:td>TOE Summary Specification</htm:td>
         </htm:tr>
         <htm:tr>
          <htm:td>Tests</htm:td>
           <htm:td>ATE_IND.1</htm:td>
           <htm:td>Independent Testing – Sample</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>Vulnerability Assessment</htm:td>
          <htm:td>AVA_VAN.1</htm:td>
          <htm:td>Vulnerability Survey</htm:td>
        </htm:tr>
      </htm:table>
      <subsection title="Class ADV: Development" id="adv2">The information about the TOE is contained in the guidance documentation available to the end user as well as the TOE Summary Specification (TSS) portion of the ST. The TOE developer must concur with the description of the product that is contained in the TSS as it relates to the functional requirements. The Assurance Activities contained in Section 4.2 should provide the ST authors with sufficient information to determine the appropriate content for the TSS section.
        <a-component id="ADV_FSP.1" name="Basic functional specification">
          <group type="dev-action">
            <a-element id="ADV_FSP.1.1D">
              <title>The developer shall provide a tracing from the functional specification to the SFRs.
              </title>
            </a-element>
            <a-element id="ADV_FSP.1.2D">
              <title>The developer shall provide a tracing from the functional specification to the SFRs.
              </title>
              <note role="developer"> 
                As indicated in the introduction to this section, the functional specification is composed of the information contained in the AGD_OPR and AGD_PRE documentation, coupled with the information provided in the TSS of the ST. The assurance activities in the functional requirements point to evidence that should exist in the documentation and TSS section; since these are directly associated with the SFRs, the tracing in element ADV_FSP.1.2D is implicitly already done and no additional documentation is necessary.
              </note> 
            </a-element>
	         </group>
          <group type="con-pres">
            <a-element id="ADV_FSP.1.1C">
              <title>The functional specification shall describe the purpose and method of use for each SFR-enforcing and SFR-supporting TSFI.
              </title>
            </a-element>
            <a-element id="ADV_FSP.1.2C">
              <title>The functional specification shall identify all parameters associated with each SFR-enforcing and SFR-supporting TSFI.
              </title>
            </a-element>
            <a-element id="ADV_FSP.1.3C">
              <title>The functional specification shall provide rationale for the implicit
                categorization of interfaces as SFR-non-interfering.
              </title>
            </a-element>
            <a-element id="ADV_FSP.1.4C">
              <title>The tracing shall demonstrate that the SFRs trace to TSFIs in the
                functional specification.
              </title>
            </a-element>
          </group>
          <group type="eval-action">
            <a-element id="ADV_FSP.1.1E">
              <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
              </title>
            </a-element>
            <a-element id="ADV_FSP.1.2E">
              <title>The evaluator shall determine that the functional specification is an accurate and complete instantiation of the SFRs.
              </title>
              <note role="application">There are no specific assurance activities associated with these SARs. The functional specification documentation is provided to support the evaluation activities described in Section 4.2, and other activities described for AGD, ATE, and AVA SARs. The requirements on the content of the functional specification information is implicitly assessed by virtue of the other assurance activities being performed; if the evaluator is unable to perform an activity because the there is insufficient interface information, then an adequate functional specification has not been provided.</note>
            </a-element>
          </group>
        </a-component>
      </subsection>
      <subsection title="Class AGD: Guidance Documents" id="agd2">
        The guidance documents will be provided with the developer’s security target. Guidance must include a description of how the authorized user verifies that the Operational Environment can fulfill its role for the security functionality. The documentation should be in an informal style and readable by an authorized user.<htm:br></htm:br>
        Guidance must be provided for every operational environment that the product supports as claimed in the ST. This guidance includes<htm:br></htm:br>
        <htm:ul>
          <htm:li>instructions to successfully install the TOE in that environment; and</htm:li>
          <htm:li>instructions to manage the security of the TOE as a product and as a component of the larger operational environment.</htm:li>
        </htm:ul>
        Guidance pertaining to particular security functionality is also provided; specific requirements on such guidance are contained in the assurance activities specified in Section 4.2.<htm:br></htm:br>

        <a-component id="AGD_OPE.1" name="Operational User Guidance">
        <group type="dev-action">
          <a-element id="AGD_OPE.1.1D">
            <title>The developer shall provide operational user guidance.
            </title>
            <note role="developer">Rather than repeat information here, the developer should review the assurance activities for this component to ascertain the specifics of the guidance that the evaluators will be checking for. This will provide the necessary information for the preparation of acceptable guidance.</note>
          </a-element>
        </group>
        <group type="con-pres">
          <a-element id="AGD_OPE.1.1C">
            <title>The operational user guidance shall describe what the authorized user-accessible functions and privileges that should be controlled in a secure processing environment, including appropriate warnings.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.2C">
            <title>The operational user guidance shall describe, for the authorized user, how to use the available interfaces provided by the TOE in a secure manner.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.3C">
            <title>The operational user guidance shall describe, for the authorized user, the available functions and interfaces, in particular all security parameters under the control of the user, indicating secure values as appropriate.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.4C">
            <title>The operational user guidance shall, for the authorized user, clearly present each type of security-relevant event relative to the user-accessible functions that need to be performed, including changing the security characteristics of entities under the control of the TSF.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.5C">
            <title>The operational user guidance shall identify all possible modes of operation of the TOE (including operation following failure or operational error), their consequences and implications for maintaining secure operation.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.6C">
            <title>The operational user guidance shall, for the authorized user, describe the security measures to be followed in order to fulfill the security objectives for the operational environment as described in the ST.
            </title>
          </a-element>
          <a-element id="AGD_OPE.1.7C">
            <title>The operational user guidance shall be clear and reasonable.
            </title>
          </a-element>
        </group>
        <group type="eval-action">
          <a-element id="AGD_OPE.1.1E">
            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
            </title>
            <aactivity>
              Some of the contents of the operational guidance will be verified by the assurance activities in Section 4.2 and evaluation of the TOE according to the CEM. The following additional information is also required.<htm:br></htm:br>
              The operational guidance shall contain instructions for configuring the password characteristics, number of allowed authentication attempt failures, the lockout period times for inactivity, and the notice and consent warning that is to be provided when authenticating.<htm:br></htm:br>
              The operational guidance shall contain step-by-step instructions suitable for use by an end-user of the Virtualization System to configure a new, out-of-the-box system into the configuration evaluated under this Protection Profile.<htm:br></htm:br>
              The documentation shall describe the process for verifying updates to the TOE, either by checking the hash or by verifying a digital signature. The evaluator shall verify that this process includes the following steps:<htm:br></htm:br>
              <htm:ul>
                <htm:li>Instructions for querying the current version of the TOE software.</htm:li>
                <htm:li>For hashes, a description of where the hash for a given update can be obtained. For digital signatures, instructions for obtaining the certificate that will be used by the FCS_COP.1(2) mechanism to ensure that a signed update has been received from the certificate owner. This may be supplied with the product initially, or may be obtained by some other means.</htm:li>
                <htm:li>Instructions for obtaining the update itself. This should include instructions for making the update accessible to the TOE (e.g., placement in a specific directory).</htm:li>
                <htm:li>Instructions for initiating the update process, as well as discerning whether the process was successful or unsuccessful. This includes generation of the hash/digital signature.</htm:li>
              </htm:ul>
            </aactivity>
          </a-element>
        </group>
        </a-component>

        <a-component id="AGD_PRE.1" name="Preparative procedures">
          <group type="dev-action">
          <a-element id="AGD_PRE.1.1D">
            <title>The developer shall provide the TOE including its preparative procedures.
            </title>
            <note role="developer">As with the operational guidance, the developer should look to the assurance activities to determine the required content with respect to preparative procedures.</note>
          </a-element>
          </group>
          <group type="con-pres">
          <a-element id="AGD_PRE.1.1C">
            <title>The preparative procedures shall describe all the steps necessary for secure acceptance of the delivered TOE in accordance with the developer’s delivery procedures.
            </title>
          </a-element>
          <a-element id="AGD_PRE.1.2C">
            <title>The preparative procedures shall describe all the steps necessary for secure installation of the TOE and for the secure preparation of the operational environment in accordance with the security objectives for the operational environment as described in the ST.</title>
          </a-element>
          </group>
          <group type="eval-action">
          <a-element  id="AGD_PRE.1.1E">
            <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
          </a-element>
          <a-element id="AGD_PRE.1.2E">
            <title>The evaluator shall apply the preparative procedures to confirm that the TOE can be prepared securely for operation.</title>
            <note role="application"> </note>
            <aactivity>
              As indicated in the introduction above, there are significant expectations with respect to the documentation—especially when configuring the operational environment to support TOE functional requirements. The evaluator shall check to ensure that the guidance provided for the TOE adequately addresses all platforms (that is, combination of hardware and operating system) claimed for the TOE in the ST.<htm:br></htm:br>
              The operational guidance shall contain step-by-step instructions suitable for use by an end-user of the Virtualization System to configure a new, out-of-the-box system into the configuration evaluated under this Protection Profile.<htm:br></htm:br>
            </aactivity>
          </a-element>
          </group>
        </a-component>
      </subsection>
      <subsection title="Class ALC: Life-cycle support" id="alc2">At the assurance level provided for TOEs conformant to this PP, life-cycle support is limited to an examination of the TOE vendor’s development and configuration management process. This is a result of the critical role that a developer’s practices play in contributing to the overall trustworthiness of a product.
        <a-component id="ALC_CMC.1" name="Labeling of the TOE">
          
            <group type="dev-action">
              <a-element id="ALC_CMC.1.1D">
                <title>The developer shall provide the TOE and a reference for the TOE.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ALC_CMC.1.1C">
              <title>The TOE shall be labeled with its unique reference.
              </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ALC_CMC.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
                <aactivity>The evaluator shall verify that the TOE has been provided with its unique reference labeled. The evaluator shall verify that the CM documentation has been provided and that it describes the method used to uniquely identify each configuration item. The evaluator shall verify that the developer has used a CM system and that this system uniquely identifies each configuration item.
                </aactivity>
              </a-element>
            </group>
           
        </a-component>
        <a-component id="ALC_CMS.1" name="TOE CM coverage">
          
            <group type="dev-action">
              <a-element id="ALC_CMS.1.1D">
                <title>The developer shall provide a configuration list for the TOE.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ALC_CMS.1.1C">
                <title>The configuration list shall include the following: the TOE itself; and the
                  evaluation evidence required by the SARs.
                </title>
              </a-element>
              <a-element id="ALC_CMS.1.2C">
                <title>The configuration list shall uniquely identify the configuration items.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ALC_CMS.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided a configuration list for the TOE that contains each item highlighted above. The evaluator shall verify that each item in the configuration list is uniquely identified and its developer is indicated.
                </aactivity>
              </a-element>
            </group>
            
          
        </a-component>
        <a-component id="ALC_TSU_EXT" name="Timely Security Updates">
            <group type="dev-action">
              <a-element id="ALC_TSU_EXT.1.1D">
                <title>The developer shall provide a description in the TSS of how timely security updates are made to the TOE.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ALC_TSU_EXT.1.1C">
                <title>The description shall include the process for creating and deploying security updates for the TOE software/firmware.
                </title>
              </a-element>
              <a-element id="ALC_TSU_EXT.1.2C">
                <title>The description shall express the time window as the length of time, in days, between public disclosure of a vulnerability and the public availability of security updates to the TOE.
                </title>
                <note role="application">The total length of time may be presented as a summation of the periods of time that each party (e.g., TOE developer, hardware vendor) on the critical path consumes. The time period until public availability per deployment mechanism may differ; each is described.</note>
              </a-element>
              <a-element id="ALC_TSU_EXT.1.3C">
                <title>The description shall include the mechanisms publicly available for reporting security issues pertaining to the TOE.</title>
                <note role="application">
                  The reporting mechanism could include web sites, email addresses, as well as a means to protect the sensitive nature of the report (e.g., public keys that could be used to encrypt the details of a proof-of-concept exploit).
                </note>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ALC_TSU_EXT.2.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.</title>
              </a-element>
            </group>
           
          
        </a-component>
      </subsection>
      <subsection title="Class ASE: Security Target Evaluation" id="ase2">
        <a-component id="ASE_CCL.1" name="Conformance claims">
           
            <group type="dev-action">
              <a-element id="ASE_CCL.1.1D">
                <title>The developer shall provide a conformance claim.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.2D">
                <title>The developer shall provide a conformance claim rationale.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ASE_CCL.1.1C">
                <title>The conformance claim shall contain a CC conformance claim that identifies the version of the CC to which the ST and the TOE claim conformance.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.2C">
                <title>The CC conformance claim shall describe the conformance of the ST to CC Part 2 as either CC Part 2 conformant or CC Part 2 extended.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.3C">
                <title>The CC conformance claim shall describe the conformance of the ST to CC Part 3 as either CC Part 3 conformant or CC Part 3 extended.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.4C">
                <title>The CC conformance claim shall be consistent with the extended components definition.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.5C">
                <title>The conformance claim shall identify all PPs and security requirement packages to which the ST claims conformance.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.6C">
                <title>The conformance claim shall describe any conformance of the ST to a package as either package-conformant or package-augmented.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.7C">
                <title>The conformance claim rationale shall demonstrate that the TOE type is consistent with the TOE type in the PPs for which conformance is being claimed.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.8C">
                <title>The conformance claim rationale shall demonstrate that the statement of the security problem definition is consistent with the statement of the security problem definition in the PPs for which conformance is being claimed.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.9C">
                <title>The conformance claim rationale shall demonstrate that the statement of security objectives is consistent with the statement of security objectives in the PPs for which conformance is being claimed.
                </title>
              </a-element>
              <a-element id="ASE_CCL.1.10C">
                <title>The conformance claim rationale shall demonstrate that the statement of security requirements is consistent with the statement of security requirements in the PPs for which conformance is being claimed.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_CCL.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided a conformance claim that meets the standards outlined above. The evaluator shall verify that the developer has provided a conformance claim rationale that meets the standard above.
                </aactivity>
              </a-element>
            </group>
        </a-component>
        <a-component id="ASE_ECD.1" name="Extended components definition"> 
            <group type="dev-action">
              <a-element id="ASE_ECD.1.1D">
                <title>The developer shall provide a statement of security requirements.
                </title>
              </a-element>
              <a-element id="ASE_ECD.1.2D">
                <title>The developer shall provide an extended components definition.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ASE_ECD.1.1C">
                <title>The statement of security requirements shall identify all extended security requirements.
                </title>
              </a-element>
              <a-element id="ASE_ECD1.2C">
                <title>The extended components definition shall define an extended component for each extended security requirement.
                </title>
              </a-element>
              <a-element id="ASE_ECD.1.3C">
                <title>The extended components definition shall describe how each extended component is related to the existing CC components, families, and classes.
                </title>
              </a-element>
              <a-element id="ASE_ECD.1.4C">
                <title>The extended components definition shall use the existing CC components, families, classes, and methodology as a model for presentation.
                </title>
              </a-element>
              <a-element id="ASE_ECD.1.5C">
                <title>The extended components shall consist of measurable and objective elements such that conformance or nonconformance to these elements can be demonstrated.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_ECD.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
              </a-element>
              <a-element id="ASE_ECD.1.2E">
                <title>The evaluator shall confirm that no extended component can be clearly expressed using existing components.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided a statement of security requirements in accordance with ASE_REQ.1. The evaluator shall verify that the statement identifies all requirements. The evaluator shall confirm that the developer has provided an extended components definition that meets the standards listed above.
                </aactivity>
              </a-element>
            </group>
        </a-component>
        <a-component id="ASE_INT.1" name="ST introduction">
            <group type="dev-action">
              <a-element id="ASE_INT.1.1D">
                <title>The developer shall provide an ST introduction.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ASE_INT.1.1C">
                <title>The ST introduction shall contain an ST reference, a TOE reference, a TOE overview and a TOE description.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.2C">
                <title>The ST reference shall uniquely identify the ST.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.3C">
                <title>The TOE reference shall identify the TOE.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.4C">
                <title>The TOE overview shall summarize the usage and major security features of the TOE.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.5C">
                <title>The TOE overview shall identify the TOE type.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.6C">
                <title>The TOE overview shall identify any non-TOE hardware/software/firmware required by the TOE.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.7C">
                <title>The TOE description shall describe the physical scope of the TOE.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.8C">
                <title>The TOE description shall describe the logical scope of the TOE.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_INT.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
              </a-element>
              <a-element id="ASE_INT.1.2E">
                <title>The evaluator shall confirm that the TOE reference, the TOE overview, and the TOE description are consistent with each other.</title>
                <aactivity>The evaluator shall verify that the developer has provided an ST introduction. The evaluator shall confirm that the ST introduction contains an ST reference, a TOE reference, a TOE overview, and a TOE description that meet the content and presentation elements listed above.
                </aactivity>
              </a-element>
            </group>
        </a-component>
        <a-component id="ASE_OBJ.1" name="Security objectives for the operational environment">
            <group type="dev-action">
              <a-element id="ASE_OBJ.1.1D">
                <title>The developer shall provide a statement of security objectives.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ASE_OBJ.1.1C">
                <title>The statement of security objectives shall describe the security objectives for the operational environment.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_OBJ.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided a statement of security objectives describing the objectives for the TOE and the operational environment as a whole. The evaluator shall verify that the developer has provided a security objective rationale that meets the content and presentation requirements listed above.
                </aactivity>
              </a-element>
            </group>
        </a-component>
        <a-component id="ASE_REQ.1" name="Stated security requirements"> 
            <group type="dev-action">
              <a-element id="ASE_REQ.1.1D">
                <title>The developer shall provide a statement of security requirements.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.2D">
                <title>The developer shall provide a security requirements rationale.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ASE_REQ.1.1C">
                <title>The statement of security requirements shall describe the SFRs and the SARs.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.2C">
                <title>All subjects, objects, operations, security attributes, external entities and other terms that are used in the SFRs and the SARs shall be defined.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.3C">
                <title>The statement of security requirements shall identify all operations on the security requirements.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.4C">
                <title>All operations shall be performed correctly.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.5C">
                <title>Each dependency of the security requirements shall either be satisfied, or the security requirements rationale shall justify the dependency not being satisfied.
                </title>
              </a-element>
              <a-element id="ASE_REQ.1.6C">
                <title>The statement of security requirements shall be internally consistent.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_REQ.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided a statement of security requirements that describes all the SFRs and SARs. The evaluator shall ensure that the statement lists all operations on the security requirements and all the dependencies are satisfied. The evaluator shall verify that the developer has provided a security requirements rationale that meets the requirements listed above.
                </aactivity>
              </a-element>
            </group>
        </a-component>
        <a-component id="ASE_TSS.1" name="TOE summary specification">
            <group type="dev-action">
              <a-element id="ASE_TSS.1.1D">
                <title>The developer shall provide a TOE summary specification.
                </title>
              </a-element> 
            </group>
            <group type="con-pres">
              <a-element id="ASE_TSS.1.1C">
                <title>The TOE summary specification shall describe how the TOE meets each SFR.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ASE_TSS.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
              </a-element>
              <a-element id="ASE_TSS.1.2E">
                <title>The evaluator shall confirm that the TOE summary specification is consistent with the TOE overview and the TOE description.
                </title>
                <aactivity>The evaluator shall verify that the developer has provided the TSS. The evaluator shall verify that the TSS describes how the TOE meets each SFR. This evaluation can be done using the assurance requirements listed in Section 4.2
                </aactivity>
              </a-element>
            </group>
        </a-component>
      </subsection>
      <subsection title="Class ATE: Tests" id="ate1">Testing is specified for functional aspects of the system as well as aspects that take advantage of design or implementation weaknesses. The former is done through ATE_IND family, while the latter is through the AVA_VAN family. At the assurance level specified in this PP, testing is based on advertised functionality and interfaces with dependency on the availability of design information. One of the primary outputs of the evaluation process is the test report as specified in the following requirements.
        <a-component id="ATE_IND.1" name="Independent Testing - sample"> 
            <group type="dev-action">
              <a-element id="ATE_IND.1.1D">
                <title>The developer shall provide the TOE for testing.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="ATE_IND.1.1C">
                <title>The TOE shall be suitable for testing.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="ATE_IND.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
              </a-element>
              <a-element id="ATE_IND.1.2E">
                <title>The evaluator shall test a subset of the TSF to confirm that the TSF
                  operates as specified.
                </title>
                <aactivity>
                  The evaluator shall prepare a test plan and report documenting the testing aspects of the system. While it is not necessary to have one test case per test listed in an Assurance Activity, the evaluators must document in the test plan that each applicable testing requirement in the ST is covered.<htm:br></htm:br>
                  The Test Plan identifies the platforms to be tested, and for those platforms not included in the test plan but included in the ST, the test plan provides a justification for not testing the platforms. This justification must address the differences between the tested platforms and the untested platforms, and make an argument that the differences do not affect the testing to be performed. It is not sufficient to merely assert that the differences have no affect; rationale must be provided. If all platforms claimed in the ST are tested, then no rationale is necessary.
                  The test plan describes the composition of each platform to be tested, and any setup that is necessary beyond what is contained in the AGD documentation. It should be noted that the evaluators are expected to follow the AGD documentation for installation and setup of each platform either as part of a test or as a standard pre-test condition. This may include special test drivers or tools. For each driver or tool, an argument (not just an assertion) is provided that the driver or tool will not adversely affect the performance of the functionality by the TOE and its platform. This also includes the configuration of cryptographic engines to be used. The cryptographic algorithms implemented by these engines are those specified by this PP and used by the cryptographic protocols being evaluated (IPsec, TLS/HTTPS, SSH).<htm:br></htm:br>
                  The test plan identifies high-level test objectives as well as the test procedures to be followed to achieve those objectives. These procedures include expected results. The test report (which could just be an annotated version of the test plan) details the activities that took place when the test procedures were executed, and includes the actual results of the tests. This shall be a cumulative account, so if there was a test run that resulted in a failure; a fix installed; and then a successful re-run of the test, the report would show a “fail” and “pass” result (and the supporting details), and not just the “pass” result.<htm:br></htm:br>
                </aactivity>
              </a-element>
            </group>
        </a-component>
      </subsection>
      <subsection title="Class AVA: Vulnerability assessment" id="ava1">For the first generation of this protection profile, the evaluation lab is expected to survey open sources to learn what vulnerabilities have been discovered in these types of products. In most cases, these vulnerabilities will require sophistication beyond that of a basic attacker. Until penetration tools are created and uniformly distributed to the evaluation labs, evaluators will not be expected to test for these vulnerabilities in the TOE. The labs will be expected to comment on the likelihood of these vulnerabilities given the documentation provided by the vendor. This information will be used in the development of penetration testing tools and for the development of future protection profiles.
        <a-component id="AVA_VAN.1" name="Vulnerability survey"> 
            <group type="dev-action">
              <a-element id="AVA_VAN.1.1D">
                <title>The developer shall provide the TOE for testing.
                </title>
              </a-element>
            </group>
            <group type="con-pres">
              <a-element id="AVA_VAN.1.1C">
                <title>The TOE shall be suitable for testing.
                </title>
              </a-element>
            </group>
            <group type="eval-action">
              <a-element id="AVA_VAN.1.1E">
                <title>The evaluator shall confirm that the information provided meets all requirements for content and presentation of evidence.
                </title>
              </a-element>
              <a-element id="AVA_VAN.1.2E">
                <title>The evaluator shall perform a search of public domain sources to identify potential vulnerabilities in the TOE.
                </title>
              </a-element>
              <a-element id="AVA_VAN.1.3E">
                <title>The evaluator shall conduct penetration testing, based on the identified potential vulnerabilities, to determine that the TOE is resistant to attacks performed by an attacker possessing Basic attack potential.</title>
                <aactivity>As with ATE_IND the evaluator shall generate a report to document their findings with respect to this requirement. This report could physically be part of the overall test report mentioned in ATE_IND, or a separate document. The evaluator performs a search of public information to determine the vulnerabilities that have been found in Server Virtualization in general, as well as those that pertain to the particular TOE. The evaluator documents the sources consulted and the vulnerabilities found in the report. For each vulnerability found, the evaluator either provides a rationale with respect to its non-applicability or the evaluator formulates a test (using the guidelines provided in ATE_IND) to confirm the vulnerability, if suitable. Suitability is determined by assessing the attack vector needed to take advantage of the vulnerability. For example, if the vulnerability can be detected by pressing a key combination on boot-up, a test would be suitable at the assurance level of this PP. If exploiting the vulnerability requires expert skills and an electron microscope, for instance, then a test would not be suitable and an appropriate justification would be formulated.
                </aactivity>
              </a-element>
            </group>
        </a-component>
      </subsection>
    </section>
  </chapter>
  <chapter title="Rationale" id="rat">
    
      The rationale tracing the threats to the objectives and the objectives to the requirements is contained in the prose in Sections 2.0 and 3.0 and is included in table form below. The only outstanding mappings are those for the Assumptions and Organizational Security Policies; those are contained in Annex A below.
      <!--  table 3 on page 74 -->
    <htm:table  border="1">
      <htm:caption>Threat-Objective-SFR Mapping</htm:caption>
      <htm:tr class="header">
        <htm:th colspan="2">SPD Threat Statements Section 2</htm:th>
        <htm:th>Security Objectives</htm:th>
        <htm:th>SFRs</htm:th>
      </htm:tr>
      <htm:tr>
        <htm:td>Cross-Domain Data Leakage</htm:td>
        <htm:td>T.DATA_LEAKAGE</htm:td>
        <htm:td>O.VM_ISOLATION<htm:br></htm:br>O.DOMAIN_INTEGRITY</htm:td>
        <htm:td>FDP_VMS_EXT.1<htm:br></htm:br>FDP_PPR_EXT.1<htm:br></htm:br>FDP_VNC_EXT.1<htm:br></htm:br>
          FDP_RIP_EXT.1<htm:br></htm:br>FDP_RIP_EXT.2<htm:br></htm:br>FDP_HBI_EXT.1<htm:br></htm:br>
          FMT_MSA_EXT.1<htm:br></htm:br>
          FPT_VIV_EXT.1<htm:br></htm:br>
          FPT_HCL_EXT.1<htm:br></htm:br>
          FTP_UIF_EXT.1<htm:br></htm:br>FTP_UIF_EXT.2<htm:br></htm:br>
          FPT_EEM_EXT.1<htm:br></htm:br>
          FPT_RDM_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Unauthorized Update</htm:td>
        <htm:td>T.UNAUTHORIZED_UPDATE</htm:td>
        <htm:td>O.VMM_INTEGRITY</htm:td>
        <htm:td>FIA_PMG_EXT.1<htm:br></htm:br>
          FIA_UIA_EXT.1<htm:br></htm:br>
          FMR_SMR.2<htm:br></htm:br>
          FMT_MOF_EXT.1<htm:br></htm:br>
          FMT_SMO_EXT.1<htm:br></htm:br>FTP_TRP.1<htm:br></htm:br>
          FMT_TUD_EXT.1<htm:br></htm:br>
          FIA_X509_EXT.1<htm:br></htm:br>
          FIA_X509_EXT.2</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Unauthorized Modification</htm:td>
        <htm:td>T.UNAUTHORIZED_MODIFICATION</htm:td>
        <htm:td>O.VMM_INTEGRITY<htm:br></htm:br>O.AUDIT</htm:td>
        <htm:td>FAU_GEN.1<htm:br></htm:br>
          FAU_SAR.1<htm:br></htm:br>
          FAU_SAR.2<htm:br></htm:br>
          FAU_SAR.3<htm:br></htm:br>
          FAU_STG.1<htm:br></htm:br>
          FDP_PPR_EXT.1<htm:br></htm:br>
          FDP_HBI_EXT.1<htm:br></htm:br>
          FTP_TRP.1<htm:br></htm:br>
          FPT_VIV_EXT.1<htm:br></htm:br>
          FPT_HPV_EXT.1<htm:br></htm:br>
          FPT_VDP_EXT.1<htm:br></htm:br>
          FPT_HAS_EXT.1<htm:br></htm:br>
          FPT_EEM_EXT.1<htm:br></htm:br>
          FPT_DVD_EXT.1<htm:br></htm:br>
          FPT_CIM_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>User Error</htm:td>
        <htm:td>T.USER_ERROR</htm:td>
        <htm:td>O.VM_ISOLATION</htm:td>
        <htm:td>FDP_VMS_EXT.1<htm:br></htm:br>FTP_UIF_EXT.1<htm:br></htm:br>FTP_UIF_EXT.2<htm:br></htm:br>
          FMT_MSA_EXT.1<htm:br></htm:br>
          FPT_RDM_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Vulnerability In Third-Party Software</htm:td>
        <htm:td>T.3P_SOFTWARE</htm:td>
        <htm:td>O.VMM_INTEGRITY</htm:td>
        <htm:td>FPT_EEM_EXT.1<htm:br></htm:br>
          FPT_INT_EXT.1<htm:br></htm:br>
          FPT_DDI_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>VMM Compromise</htm:td>
        <htm:td>T.VMM_COMPROMISE</htm:td>
        <htm:td>O.VMM_INTEGRITY
          O.VM_ISOLATION</htm:td>
        <htm:td>FDP_HBI_EXT.1<htm:br></htm:br>
          FDP_PPR_EXT.1<htm:br></htm:br>
          FMT_SMO_EXT.1<htm:br></htm:br>
          FTP_TRP.1<htm:br></htm:br>
          FPT_TUD_EXT.1<htm:br></htm:br>
          FIA_X509_EXT.1<htm:br></htm:br>
          FIA_X509_EXT.2<htm:br></htm:br>
          FPT_VIV_EXT.1<htm:br></htm:br>
          FPT_HCL_EXT.1<htm:br></htm:br>
          FPT_VDP_EXT.1<htm:br></htm:br>
          FPT_HAS_EXT.1<htm:br></htm:br>
          FPT_EEM_EXT.1<htm:br></htm:br>
          FPT_DVD_EXT.1<htm:br></htm:br>
          FPT_CIM_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Platform Compromise</htm:td>
        <htm:td>T.PLATFORM_COMPROMISE</htm:td>
        <htm:td>O.PLATFORM_INTEGRITY</htm:td>
        <htm:td>FDP_HBI_EXT.1<htm:br></htm:br>
          FDP_PPR_EXT.1<htm:br></htm:br>
          FPT_VIV_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Unauthorized Access to Management Functions</htm:td>
        <htm:td>T.UNAUTHORIZED_ACCESS</htm:td>
        <htm:td>O.MANAGEMENT_ACCESS</htm:td>
        <htm:td>FDP_VNC_EXT.1<htm:br></htm:br>
          FIA_PMG_EXT.1<htm:br></htm:br>
          FIA_UIA_EXT.1<htm:br></htm:br>
          FMT_SMR.2<htm:br></htm:br>
          FMT_MOF_EXT.1<htm:br></htm:br>
          FMT_SMO_EXT.1<htm:br></htm:br>
          FTP_TRP.1<htm:br></htm:br>
          FCS_CKM.1<htm:br></htm:br>
          FCS_CKM_EXT.4<htm:br></htm:br>
          FCS_COP.1<htm:br></htm:br>
          FCS_RBG_EXT.1<htm:br></htm:br>
          FCS_HTTPS_EXT.1<htm:br></htm:br>
          FCS_IPSEC_EXT.1<htm:br></htm:br>
          FCS_SSH_EXT.1<htm:br></htm:br>
          FCS_TLS_EXT.1</htm:td>
      </htm:tr>
      <htm:tr>
        <htm:td>Weak Cryptography Due to Insufficient Entropy</htm:td>
        <htm:td>T.WEAK_CRYPTO</htm:td>
        <htm:td>O.VM_ENTROPY</htm:td>
        <htm:td>FCS_ENT_EXT.1</htm:td>
      </htm:tr>
      </htm:table>
</chapter>
  <appendix title="Supporting Tables" id="s-tables">
    In this Protection Profile, the focus in the initial sections of the document is to use a narrative presentation in an attempt to increase the overall understandability of the threats to Virtualization Systems; the methods used to mitigate those threats; and the extent of the mitigation achieved by compliant TOEs. This presentation style does not readily lend itself to a formalized evaluation activity, so this Annex contains the tabular artifacts that can be used for the evaluation activities associated with this document.
    <section id="assump" title="Assumptions">
      The specific conditions listed in the following subsections are assumed to exist in the TOE’s Operational Environment. These assumptions include both practical realities in the development of the TOE security requirements and the essential environmental conditions on the use of the TOE.<htm:br></htm:br>
      ST authors should ensure that the assumptions still hold for their particular technology; the table should be modified as appropriate.<htm:br></htm:br>
    <!-- table from page 76  -->
      <htm:table  border="1">
        <htm:caption>Assumptions</htm:caption>
        <htm:tr class="header">
          <htm:th>Assumption Name</htm:th>
          <htm:th>Assumption Description</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>A.PLATFORM_INTEGRITY</htm:td>
          <htm:td>The platform has not been compromised prior to installation of the Virtualization System.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>A.PHYSICAL</htm:td>
          <htm:td>Physical security commensurate with the value of the TOE and the data it contains is assumed to be provided by the environment.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>A.TRUSTED_ADMIN</htm:td>
          <htm:td>TOE Administrators are trusted to follow and apply all administrator guidance.</htm:td>
        </htm:tr>
      </htm:table>
    </section>
    <section id="threats" title="Threats">
      The following threats should be integrated into the threats that are specific to the technology by the ST authors when including the requirements described in this document. Modifications, omissions, and additions to the requirements may impact this list, so the ST author should modify or delete these threats as appropriate.
      <!--  table from page 76 -->
      <htm:table  border="1">
        <htm:caption>Threats</htm:caption>
        <htm:tr class="header">
          <htm:th>Threat Name</htm:th>
          <htm:th>Threat Definition</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>T.DATA_LEAKAGE</htm:td>
          <htm:td>If it is possible for data to leak between domains when prohibited by policy, then an adversary on one domain or network can obtain data from another domain. Such cross-domain data leakage can, for example, cause classified information, corporate proprietary information, or medical data to be made accessible to unauthorized entities.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.UNAUTHORIZED_UPDATE</htm:td>
          <htm:td>A malicious party attempts to supply the Administrator with an update to the product that may compromise the security features of the TOE.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.UNAUTHORIZED_MODIFICATION</htm:td>
          <htm:td>Malware running on the physical host must not be able to undetectably modify Virtualization System components while the system is running or at rest. Likewise, malicious code running within a virtual machine must not be able to modify Virtualization System components.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.USER_ERROR</htm:td>
          <htm:td>An administrator may unintentionally install or configure the TOE incorrectly, resulting in ineffective security mechanisms.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.3P_SOFTWARE</htm:td>
          <htm:td>Vulnerabilities in 3rd party software can lead to VMM compromise. Where possible, the VS should mitigate the results of potential vulnerabilities or malicious content in third-party code.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.VMM_COMPROMISE</htm:td>
          <htm:td>Failure of security mechanisms could lead to unauthorized intrusion into or modification of the VMM or bypass of the VMM altogether.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.PLATFORM_COMPROMISE</htm:td>
          <htm:td>The hosting of untrusted or malicious domains by the VS cannot be permitted to compromise the security and integrity of the platform on which the VS executes.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.UNAUTHORIZED_ACCESS</htm:td>
          <htm:td>A user may gain unauthorized access to the TOE data and TOE executable code. A malicious user, process, or external IT entity may masquerade as an authorized entity in order to gain unauthorized access to data or TOE resources. A malicious user, process, or external IT entity may misrepresent itself as the TOE to obtain identification and authentication data.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.WEAK_CRYPTO</htm:td>
          <htm:td>A threat of weak cryptography may arise if the VMM does not provide sufficient entropy to support security-related features that depend on entropy to implement cryptographic algorithms.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>T.UNMANAGEABLE_NW</htm:td>
          <htm:td>The Virtualization System itself is generally part of a larger enterprise network and must be updated and patched as a normal part of enterprise network operations. Such basic network hygiene is more difficult if the enterprise network is unmanageable.</htm:td>
        </htm:tr>
      </htm:table>
    </section>
    <section id="thts" title="Security Objectives for the TOE">
      The following tables contain objectives for the TOE and Operational Environment. As assumptions are added to the PP, these objectives should be augmented to reflect such additions.
      <!--  table from page 78 -->
      <htm:table  border="1">
        <htm:caption>Security Objectives for the TOE</htm:caption>
        <htm:tr class="header">
          <htm:th>Security Objective</htm:th>
          <htm:th>Security Objective Definition</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>O.VM_ISOLATION</htm:td>
          <htm:td>As basic functionality, the VMM must support a security policy that mandates no information transfer between VMs.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.VMM_INTEGRITY</htm:td>
          <htm:td>Integrity is a core security objective for Virtualization Systems. To achieve system integrity the integrity of each VMM component must be established and maintained. This objective concerns only the integrity of the Virtualization System—not the integrity of software running inside of VMs or of the physical platform. The overall objective is to ensure the integrity of critical components of a Virtualization System.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.PLATFORM_INTEGRITY</htm:td>
          <htm:td>The integrity of the VMM depends on the integrity of the hardware and software on which the VMM relies. Although the VS does not have complete control over the integrity of the platform, the VS should as much as possible try to ensure that no users or software hosted by the VS is capable of undermining the integrity of the platform.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.DOMAIN_INTEGRITY</htm:td>
          <htm:td>The VS responsible ensuring that software running in Guest VMs us not interfered with by VMs from other domains.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.MANAGEMENT_ACCESS</htm:td>
          <htm:td>Management functions must be exercised only by authorized Administrators.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.MANAGEABLE_NETWORK</htm:td>
          <htm:td>The VS must support standards and protocols that help enhance manageability of the VS as an IT product.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>O.AUDIT</htm:td>
          <htm:td>The purpose of audit is to capture and protect data about what happens on a system so that it can later be examined to determine what has happened in the past.</htm:td>
        </htm:tr>
      </htm:table>
    </section>
    <section id="thts" title="Security Objectives for the Operational Environment">
      <!--  table from page 78 -->
      <htm:table  border="1">
        <htm:caption>Security Objectives for the Operational Environment</htm:caption>
        <htm:tr class="header">
          <htm:th>Security Objective</htm:th>
          <htm:th>Security Objective Definition</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>OE.CONFIG</htm:td>
          <htm:td>TOE administrators will configure the Virtualization System correctly to create the intended security policy.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>OE.PHYSICAL</htm:td>
          <htm:td>Physical security, commensurate with the value of the TOE and the data it contains, is provided by the environment.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>OE.TRUSTED_ADMIN</htm:td>
          <htm:td>TOE Administrators are trusted to follow and apply all administrator guidance in a trusted manner.</htm:td>
        </htm:tr>
      </htm:table>
    </section>
    <section id="aud-ev" title="Auditable Events">
      <!-- HERE where is Section C1.1 and Section C.1.1 ???? -->
      Depending on the specific requirements selected by the ST author from Section C1.1, the ST author should include the appropriate auditable events in the corresponding table in the ST for the requirements selected.<htm:br></htm:br>
      <!-- table from page 109 -->
      <htm:table  border="1">
        <htm:caption>Audit Events for Selection-Based Requirements</htm:caption>
        <htm:tr class="header">
          <htm:th>Requirement</htm:th>
          <htm:th>Auditable Events</htm:th>
          <htm:th>Additional Audit Record Contents</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_HTTPS_EXT.1</htm:td>
          <htm:td>Failure to establish a HTTPS Session.<htm:br></htm:br>Establishment/Termination of a HTTPS session.</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address) for both successes and failures.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_IPSEC_EXT.1</htm:td>
          <htm:td>Failure to establish an IPsec SA.<htm:br></htm:br>Establishment/Termination of an IPsec SA.</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address) for both successes and failures.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_SSHC_EXT.1</htm:td>
          <htm:td>Failure to establish an SSH session Establishment/Termination of an SSH session.<htm:br></htm:br>
            Successful SSH rekey</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address).</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_SSHS_EXT.1</htm:td>
          <htm:td>Failure to establish an SSH session Establishment/Termination of an SSH session.<htm:br></htm:br>
            Successful SSH rekey</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address).</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_TLSC_EXT.1</htm:td>
          <htm:td>Failure to establish a TLS Session.<htm:br></htm:br>Establishment/Termination of a TLS session.</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address).</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FCS_TLSS_EXT.1</htm:td>
          <htm:td>Failure to establish a TLS Session.<htm:br></htm:br>Establishment/Termination of a TLS session.</htm:td>
          <htm:td>Reason for failure.<htm:br></htm:br>Non-TOE endpoint of connection (IP address).</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FPT_TUD_EXT.2</htm:td>
          <htm:td>None.</htm:td>
          <htm:td>None.</htm:td>
        </htm:tr>
      </htm:table>
      Depending on the specific requirements selected by the ST author from Section C.1.1, the ST author should include the appropriate auditable events in the corresponding table in the ST for the requirements selected.<htm:br></htm:br>
    <!-- table from page 113 -->
      <htm:table  border="1">
        <htm:caption>Auditable Events for Objective Requirements</htm:caption>
        <htm:tr class="header">
          <htm:th>Requirement</htm:th>
          <htm:th>Auditable Events</htm:th>
          <htm:th>Additional Audit Record Contents</htm:th>
        </htm:tr>
        <htm:tr>
          <htm:td>FPT_INT_EXT.1</htm:td>
          <htm:td>None.</htm:td>
          <htm:td>None.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FPT_DDI_EXT.1</htm:td>
          <htm:td>None.</htm:td>
          <htm:td>None.</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FPT_CIM_EXT.1</htm:td>
          <htm:td>Integrity measurements</htm:td>
          <htm:td>None</htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td>FPT_IDV_EXT.1</htm:td>
          <htm:td>None.</htm:td>
          <htm:td>None.</htm:td>
        </htm:tr>
      </htm:table>
    </section>
 
  </appendix>
  <appendix title="Selection-Based Requirements" id="sel-based">

  </appendix>
  <appendix title="Optional Requirements" id="optional">
    
  </appendix>
  <appendix title="Objective Requirements" id="objective">
    
  </appendix>
  <appendix title="Entropy Documentation and Assessment" id="entropy">
    The documentation of the entropy source should be detailed enough that, after reading, the evaluator will thoroughly understand the entropy source and why it can be relied upon to provide entropy. This documentation should include multiple detailed sections: design description, entropy justification, operating conditions, and health testing. This documentation is not required to be part of the TSS.
    <section id="dd" title="Design Description">
      Documentation shall include the design of the entropy source as a whole, including the interaction of all entropy source components. It will describe the operation of the entropy source to include how it works, how entropy is produced, and how unprocessed (raw) data can be obtained from within the entropy source for testing purposes. The documentation should walk through the entropy source design indicating where the random comes from, where it is passed next, any post-processing of the raw outputs (hash, XOR, etc.), if/where it is stored, and finally, how it is output from the entropy source. Any conditions placed on the process (e.g., blocking) should also be described in the entropy source design. Diagrams and examples are encouraged.<htm:br></htm:br>
      This design must also include a description of the content of the security boundary of the entropy source and a description of how the security boundary ensures that an adversary outside the boundary cannot affect the entropy rate.
    </section>
    <section id="ej" title="Entropy Justification">
      There should be a technical argument for where the unpredictability in the source comes from and why there is confidence in the entropy source exhibiting probabilistic behavior (an explanation of the probability distribution and justification for that distribution given the particular source is one way to describe this). This argument will include a description of the expected entropy rate and explain how you ensure that sufficient entropy is going into the TOE randomizer seeding process. This discussion will be part of a justification for why the entropy source can be relied upon to produce bits with entropy.
    </section>
    <section id="oc" title="Operating Conditions"> 
      Documentation will also include the range of operating conditions under which the entropy source is expected to generate random data. It will clearly describe the measures that have been taken in the system design to ensure the entropy source continues to operate under those conditions. Similarly, documentation shall describe the conditions under which the entropy source is known to malfunction or become inconsistent. Methods used to detect failure or degradation of the source shall be included.
    </section>
    <section id="ht" title="Health Testing">
      More specifically, all entropy source health tests and their rationale will be documented. This will include a description of the health tests, the rate and conditions under which each health test is performed (e.g., at startup, continuously, or on-demand), the expected results for each health test, and rationale indicating why each test is believed to be appropriate for detecting one or more failures in the entropy source.
    </section>
  </appendix>
    <!-- 
      
        <f-component id="" name=""  status="threshold">
          <f-element id="">
            <title>
            </title>
            </f-element>
            <f-element id="">
            <title>
            </title>
            <note role="application"> </note>
            <aactivity>
                <testlist>
                <test></test>
                <test></test>
                </testlist>
            </aactivity>
          </f-element>
        </f-component>

        
      <selectables linebreak="yes">
              <selectable></selectable>
              <selectable></selectable>
            </selectables>
      <selectables>
              <selectable></selectable>
              <selectable></selectable>
            </selectables>      
        <f-component id="" name=""  status="threshold">
        <f-element id="">
          <title>
            </title>
          <note role="application"> </note>
          <aactivity>
                    <testlist>
                <test>
                <test>
                </testlist>
          </aactivity>
        </f-element>
        </f-component>     
        
        <htm:table  border="1">
        <htm:caption></htm:caption>
        <htm:tr class="header">
          <htm:th></htm:td>
          <htm:th></htm:td>
          <htm:th></htm:td>
        </htm:tr>
        <htm:tr>
          <htm:td></htm:td>
          <htm:td></htm:td>
          <htm:td></htm:td>
        </htm:tr>
      </htm:table>
      
      
    -->


  
</PP>
